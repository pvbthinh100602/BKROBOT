
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008348  08008348  00018348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008470  08008470  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08008470  08008470  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008470  08008470  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008478  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000090  08008508  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08008508  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001613c  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c11  00000000  00000000  00036238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  00039e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001017  00000000  00000000  0003b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca30  00000000  00000000  0003c317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c787  00000000  00000000  00058d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2d5c  00000000  00000000  000754ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058dc  00000000  00000000  0011822c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0011db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000090 	.word	0x20000090
 8000204:	00000000 	.word	0x00000000
 8000208:	0800832c 	.word	0x0800832c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000094 	.word	0x20000094
 8000224:	0800832c 	.word	0x0800832c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b60:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b62:	4a4b      	ldr	r2, [pc, #300]	; (8000c90 <MX_ADC1_Init+0x140>)
 8000b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b88:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8e:	483f      	ldr	r0, [pc, #252]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b90:	f002 f962 	bl	8002e58 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b9a:	f000 ff73 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bb0:	f002 fa3c 	bl	800302c <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 ff63 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bcc:	f002 fa2e 	bl	800302c <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 ff55 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4829      	ldr	r0, [pc, #164]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000be8:	f002 fa20 	bl	800302c <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 ff47 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c04:	f002 fa12 	bl	800302c <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c0e:	f000 ff39 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c12:	230c      	movs	r3, #12
 8000c14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c20:	f002 fa04 	bl	800302c <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c2a:	f000 ff2b 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c2e:	230d      	movs	r3, #13
 8000c30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c32:	2306      	movs	r3, #6
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c3c:	f002 f9f6 	bl	800302c <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c46:	f000 ff1d 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c58:	f002 f9e8 	bl	800302c <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c62:	f000 ff0f 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c66:	230f      	movs	r3, #15
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c74:	f002 f9da 	bl	800302c <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c7e:	f000 ff01 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000ac 	.word	0x200000ac
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <HAL_ADC_MspInit+0xe8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d15f      	bne.n	8000d74 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cfc:	233f      	movs	r3, #63	; 0x3f
 8000cfe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481e      	ldr	r0, [pc, #120]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000d0c:	f002 ffcc 	bl	8003ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <HAL_ADC_MspInit+0xf4>)
 8000d20:	f002 ffc2 	bl	8003ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d5a:	f002 fbaf 	bl	80034bc <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000d64:	f000 fe8e 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d6c:	621a      	str	r2, [r3, #32]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012400 	.word	0x40012400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40010c00 	.word	0x40010c00
 8000d8c:	200000dc 	.word	0x200000dc
 8000d90:	40020008 	.word	0x40020008

08000d94 <display_init>:
uint8_t display_7seg_map[10] = { 0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41,
		0x1f, 0x01, 0x09 }; // 0->9
uint16_t display_index = 0;
uint8_t spi_buffer = 0xff;

void display_init() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9e:	4802      	ldr	r0, [pc, #8]	; (8000da8 <display_init+0x14>)
 8000da0:	f003 f916 	bl	8003fd0 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40011000 	.word	0x40011000

08000dac <display_run>:

void display_run() {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

	spi_buffer = display_buffer[display_index];
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <display_run+0xe4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <display_run+0xe8>)
 8000db8:	5c9a      	ldrb	r2, [r3, r2]
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <display_run+0xec>)
 8000dbc:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc4:	4835      	ldr	r0, [pc, #212]	; (8000e9c <display_run+0xf0>)
 8000dc6:	f003 f903 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 1, 1);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4932      	ldr	r1, [pc, #200]	; (8000e98 <display_run+0xec>)
 8000dd0:	4833      	ldr	r0, [pc, #204]	; (8000ea0 <display_run+0xf4>)
 8000dd2:	f004 fd9d 	bl	8005910 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	482f      	ldr	r0, [pc, #188]	; (8000e9c <display_run+0xf0>)
 8000dde:	f003 f8f7 	bl	8003fd0 <HAL_GPIO_WritePin>

	switch (display_index) {
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <display_run+0xe4>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d02c      	beq.n	8000e44 <display_run+0x98>
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	dc3d      	bgt.n	8000e6a <display_run+0xbe>
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <display_run+0x4c>
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d013      	beq.n	8000e1e <display_run+0x72>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
		break;
	default:
		break;
 8000df6:	e038      	b.n	8000e6a <display_run+0xbe>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dfe:	4829      	ldr	r0, [pc, #164]	; (8000ea4 <display_run+0xf8>)
 8000e00:	f003 f8e6 	bl	8003fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0a:	4826      	ldr	r0, [pc, #152]	; (8000ea4 <display_run+0xf8>)
 8000e0c:	f003 f8e0 	bl	8003fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e16:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <display_run+0xf8>)
 8000e18:	f003 f8da 	bl	8003fd0 <HAL_GPIO_WritePin>
		break;
 8000e1c:	e026      	b.n	8000e6c <display_run+0xc0>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e24:	481f      	ldr	r0, [pc, #124]	; (8000ea4 <display_run+0xf8>)
 8000e26:	f003 f8d3 	bl	8003fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e30:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <display_run+0xf8>)
 8000e32:	f003 f8cd 	bl	8003fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	4819      	ldr	r0, [pc, #100]	; (8000ea4 <display_run+0xf8>)
 8000e3e:	f003 f8c7 	bl	8003fd0 <HAL_GPIO_WritePin>
		break;
 8000e42:	e013      	b.n	8000e6c <display_run+0xc0>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4a:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <display_run+0xf8>)
 8000e4c:	f003 f8c0 	bl	8003fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e56:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <display_run+0xf8>)
 8000e58:	f003 f8ba 	bl	8003fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e62:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <display_run+0xf8>)
 8000e64:	f003 f8b4 	bl	8003fd0 <HAL_GPIO_WritePin>
		break;
 8000e68:	e000      	b.n	8000e6c <display_run+0xc0>
		break;
 8000e6a:	bf00      	nop
	}
	display_index = (display_index + 1) % 3;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <display_run+0xe4>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <display_run+0xfc>)
 8000e74:	fb83 3102 	smull	r3, r1, r3, r2
 8000e78:	17d3      	asrs	r3, r2, #31
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	440b      	add	r3, r1
 8000e82:	1ad1      	subs	r1, r2, r3
 8000e84:	b28a      	uxth	r2, r1
 8000e86:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <display_run+0xe4>)
 8000e88:	801a      	strh	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000124 	.word	0x20000124
 8000e94:	20000120 	.word	0x20000120
 8000e98:	2000000a 	.word	0x2000000a
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	20000278 	.word	0x20000278
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	55555556 	.word	0x55555556

08000eac <display_7seg>:

void display_7seg(int num){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	display_buffer[0] = display_7seg_map[num/10];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <display_7seg+0x48>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1092      	asrs	r2, r2, #2
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <display_7seg+0x4c>)
 8000ec4:	5cd2      	ldrb	r2, [r2, r3]
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <display_7seg+0x50>)
 8000ec8:	701a      	strb	r2, [r3, #0]
	display_buffer[1] = display_7seg_map[num%10];
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <display_7seg+0x48>)
 8000ece:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed2:	109a      	asrs	r2, r3, #2
 8000ed4:	17cb      	asrs	r3, r1, #31
 8000ed6:	1ad2      	subs	r2, r2, r3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1aca      	subs	r2, r1, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <display_7seg+0x4c>)
 8000ee4:	5c9a      	ldrb	r2, [r3, r2]
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <display_7seg+0x50>)
 8000ee8:	705a      	strb	r2, [r3, #1]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	66666667 	.word	0x66666667
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000120 	.word	0x20000120

08000f00 <display_led>:

void display_led(uint8_t data_byte){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	display_buffer[2] = data_byte;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <display_led+0x1c>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	7093      	strb	r3, [r2, #2]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000120 	.word	0x20000120

08000f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_DMA_Init+0x38>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <MX_DMA_Init+0x38>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_DMA_Init+0x38>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	200b      	movs	r0, #11
 8000f44:	f002 fa83 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f48:	200b      	movs	r0, #11
 8000f4a:	f002 fa9c 	bl	8003486 <HAL_NVIC_EnableIRQ>

}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <gamepad_init>:
uint8_t m1 = 0;
uint8_t m2 = 0;
uint8_t thumbl = 0;
uint8_t thumbr = 0;

int gamepad_init(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, _GAMEPAD_RECEIVER_ADDR, 10, 100) != HAL_OK) return 0;
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	220a      	movs	r2, #10
 8000f64:	21aa      	movs	r1, #170	; 0xaa
 8000f66:	480a      	ldr	r0, [pc, #40]	; (8000f90 <gamepad_init+0x34>)
 8000f68:	f003 fc14 	bl	8004794 <HAL_I2C_IsDeviceReady>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <gamepad_init+0x1a>
 8000f72:	2300      	movs	r3, #0
 8000f74:	e009      	b.n	8000f8a <gamepad_init+0x2e>
	is_receiver_connect = 1;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <gamepad_init+0x38>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <gamepad_init+0x3c>)
 8000f84:	f003 f824 	bl	8003fd0 <HAL_GPIO_WritePin>
	return 1;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000017c 	.word	0x2000017c
 8000f94:	20000128 	.word	0x20000128
 8000f98:	40011000 	.word	0x40011000

08000f9c <_read_16>:

int16_t _read_16(uint8_t b1,uint8_t b2){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
    // Read and return a 16-bit signed little endian value from 2 bytes
    int16_t raw = (b1 << 8) | b2;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	81fb      	strh	r3, [r7, #14]
    if (raw & (1 << 15)){
 8000fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da02      	bge.n	8000fc8 <_read_16+0x2c>
        return (raw - (1 << 16));
 8000fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc6:	e001      	b.n	8000fcc <_read_16+0x30>
    	// sign bit is set
    } else{
    	return raw;
 8000fc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    }
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <_read_32>:

int32_t _read_32(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4){
 8000fd6:	b490      	push	{r4, r7}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4604      	mov	r4, r0
 8000fde:	4608      	mov	r0, r1
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71bb      	strb	r3, [r7, #6]
 8000fec:	460b      	mov	r3, r1
 8000fee:	717b      	strb	r3, [r7, #5]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	713b      	strb	r3, [r7, #4]
    // Read and return a 32-bit signed little endian value from 2 bytes
    int32_t raw = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	061a      	lsls	r2, r3, #24
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	797b      	ldrb	r3, [r7, #5]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	431a      	orrs	r2, r3
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
    if (raw & (1 << 31)){
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	da01      	bge.n	8001014 <_read_32+0x3e>
        return (raw - (1 << 32));
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	e000      	b.n	8001016 <_read_32+0x40>
    	// sign bit is set
    } else{
    	return raw;
 8001014:	68fb      	ldr	r3, [r7, #12]
    }
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bc90      	pop	{r4, r7}
 800101e:	4770      	bx	lr

08001020 <_convert_data>:

void _convert_data(){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	dpad_left = (dpad >> _DPAD_LEFT) & 1;
 8001024:	4b57      	ldr	r3, [pc, #348]	; (8001184 <_convert_data+0x164>)
 8001026:	f993 3000 	ldrsb.w	r3, [r3]
 800102a:	10db      	asrs	r3, r3, #3
 800102c:	b25b      	sxtb	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <_convert_data+0x168>)
 8001038:	701a      	strb	r2, [r3, #0]
	dpad_up = (dpad >> _DPAD_UP) & 1;
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <_convert_data+0x164>)
 800103c:	f993 3000 	ldrsb.w	r3, [r3]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b50      	ldr	r3, [pc, #320]	; (800118c <_convert_data+0x16c>)
 800104a:	701a      	strb	r2, [r3, #0]
	dpad_down = (dpad >> _DPAD_DOWN) & 1;
 800104c:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <_convert_data+0x164>)
 800104e:	f993 3000 	ldrsb.w	r3, [r3]
 8001052:	105b      	asrs	r3, r3, #1
 8001054:	b25b      	sxtb	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <_convert_data+0x170>)
 8001060:	701a      	strb	r2, [r3, #0]
	dpad_right = (dpad >> _DPAD_RIGHT) & 1;
 8001062:	4b48      	ldr	r3, [pc, #288]	; (8001184 <_convert_data+0x164>)
 8001064:	f993 3000 	ldrsb.w	r3, [r3]
 8001068:	109b      	asrs	r3, r3, #2
 800106a:	b25b      	sxtb	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b47      	ldr	r3, [pc, #284]	; (8001194 <_convert_data+0x174>)
 8001076:	701a      	strb	r2, [r3, #0]
	thumbl = (buttons >> _BUTTON_THUMB_L) & 1;
 8001078:	4b47      	ldr	r3, [pc, #284]	; (8001198 <_convert_data+0x178>)
 800107a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107e:	121b      	asrs	r3, r3, #8
 8001080:	b21b      	sxth	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <_convert_data+0x17c>)
 800108c:	701a      	strb	r2, [r3, #0]
	thumbr = (buttons >> _BUTTON_THUMB_R) & 1;
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <_convert_data+0x178>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	125b      	asrs	r3, r3, #9
 8001096:	b21b      	sxth	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <_convert_data+0x180>)
 80010a2:	701a      	strb	r2, [r3, #0]
	a = (buttons >> _BUTTON_A) & 1;
 80010a4:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <_convert_data+0x178>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <_convert_data+0x184>)
 80010b4:	701a      	strb	r2, [r3, #0]
	b = (buttons >> _BUTTON_B) & 1;
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <_convert_data+0x178>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	105b      	asrs	r3, r3, #1
 80010be:	b21b      	sxth	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <_convert_data+0x188>)
 80010ca:	701a      	strb	r2, [r3, #0]
	x = (buttons >> _BUTTON_X) & 1;
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <_convert_data+0x178>)
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	109b      	asrs	r3, r3, #2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <_convert_data+0x18c>)
 80010e0:	701a      	strb	r2, [r3, #0]
	y = (buttons >> _BUTTON_Y) & 1;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <_convert_data+0x178>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	10db      	asrs	r3, r3, #3
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <_convert_data+0x190>)
 80010f6:	701a      	strb	r2, [r3, #0]
	l1 = (buttons >> _BUTTON_SHOULDER_L) & 1;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <_convert_data+0x178>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	111b      	asrs	r3, r3, #4
 8001100:	b21b      	sxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <_convert_data+0x194>)
 800110c:	701a      	strb	r2, [r3, #0]
	r1 = (buttons >> _BUTTON_SHOULDER_R) & 1;
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <_convert_data+0x178>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	115b      	asrs	r3, r3, #5
 8001116:	b21b      	sxth	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <_convert_data+0x198>)
 8001122:	701a      	strb	r2, [r3, #0]
	l2 = (buttons >> _BUTTON_TRIGGER_L) & 1;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <_convert_data+0x178>)
 8001126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112a:	119b      	asrs	r3, r3, #6
 800112c:	b21b      	sxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <_convert_data+0x19c>)
 8001138:	701a      	strb	r2, [r3, #0]
	r2 = (buttons >> _BUTTON_TRIGGER_R) & 1;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <_convert_data+0x178>)
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	11db      	asrs	r3, r3, #7
 8001142:	b21b      	sxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <_convert_data+0x1a0>)
 800114e:	701a      	strb	r2, [r3, #0]
	m1 = (buttons >> _MISC_BUTTON_M1) & 1;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_convert_data+0x178>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	105b      	asrs	r3, r3, #1
 8001158:	b21b      	sxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <_convert_data+0x1a4>)
 8001164:	701a      	strb	r2, [r3, #0]
	m2 = (buttons >> _MISC_BUTTON_M2) & 1;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <_convert_data+0x178>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	109b      	asrs	r3, r3, #2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <_convert_data+0x1a8>)
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	2000014e 	.word	0x2000014e
 8001188:	2000016c 	.word	0x2000016c
 800118c:	2000016d 	.word	0x2000016d
 8001190:	2000016e 	.word	0x2000016e
 8001194:	2000016f 	.word	0x2000016f
 8001198:	20000168 	.word	0x20000168
 800119c:	2000017a 	.word	0x2000017a
 80011a0:	2000017b 	.word	0x2000017b
 80011a4:	20000170 	.word	0x20000170
 80011a8:	20000171 	.word	0x20000171
 80011ac:	20000172 	.word	0x20000172
 80011b0:	20000173 	.word	0x20000173
 80011b4:	20000174 	.word	0x20000174
 80011b8:	20000175 	.word	0x20000175
 80011bc:	20000176 	.word	0x20000176
 80011c0:	20000177 	.word	0x20000177
 80011c4:	20000178 	.word	0x20000178
 80011c8:	20000179 	.word	0x20000179

080011cc <gamepad_update>:

void gamepad_update(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af02      	add	r7, sp, #8
	if(is_receiver_connect == 0) return;
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <gamepad_update+0x120>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 8085 	beq.w	80012e6 <gamepad_update+0x11a>
	HAL_I2C_Master_Receive(&hi2c2, _GAMEPAD_RECEIVER_ADDR, result, 30, 50);
 80011dc:	2332      	movs	r3, #50	; 0x32
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	231e      	movs	r3, #30
 80011e2:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <gamepad_update+0x124>)
 80011e4:	21aa      	movs	r1, #170	; 0xaa
 80011e6:	4843      	ldr	r0, [pc, #268]	; (80012f4 <gamepad_update+0x128>)
 80011e8:	f003 f868 	bl	80042bc <HAL_I2C_Master_Receive>
	if(result[0] == 1) is_gamepad_connect = 1;
 80011ec:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <gamepad_update+0x124>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d103      	bne.n	80011fc <gamepad_update+0x30>
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <gamepad_update+0x12c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e002      	b.n	8001202 <gamepad_update+0x36>
	else is_gamepad_connect = 0;
 80011fc:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <gamepad_update+0x12c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

	if(is_gamepad_connect == 1){
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <gamepad_update+0x12c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d16a      	bne.n	80012e0 <gamepad_update+0x114>
		dpad = result[1];
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <gamepad_update+0x124>)
 800120c:	785b      	ldrb	r3, [r3, #1]
 800120e:	b25a      	sxtb	r2, r3
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <gamepad_update+0x130>)
 8001212:	701a      	strb	r2, [r3, #0]
		aLX = _read_32(result[2], result[3], result[4], result[5]);
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <gamepad_update+0x124>)
 8001216:	7898      	ldrb	r0, [r3, #2]
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <gamepad_update+0x124>)
 800121a:	78d9      	ldrb	r1, [r3, #3]
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <gamepad_update+0x124>)
 800121e:	791a      	ldrb	r2, [r3, #4]
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <gamepad_update+0x124>)
 8001222:	795b      	ldrb	r3, [r3, #5]
 8001224:	f7ff fed7 	bl	8000fd6 <_read_32>
 8001228:	4603      	mov	r3, r0
 800122a:	4a35      	ldr	r2, [pc, #212]	; (8001300 <gamepad_update+0x134>)
 800122c:	6013      	str	r3, [r2, #0]
		aLY = _read_32(result[6], result[7], result[8], result[9]);
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <gamepad_update+0x124>)
 8001230:	7998      	ldrb	r0, [r3, #6]
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <gamepad_update+0x124>)
 8001234:	79d9      	ldrb	r1, [r3, #7]
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <gamepad_update+0x124>)
 8001238:	7a1a      	ldrb	r2, [r3, #8]
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <gamepad_update+0x124>)
 800123c:	7a5b      	ldrb	r3, [r3, #9]
 800123e:	f7ff feca 	bl	8000fd6 <_read_32>
 8001242:	4603      	mov	r3, r0
 8001244:	4a2f      	ldr	r2, [pc, #188]	; (8001304 <gamepad_update+0x138>)
 8001246:	6013      	str	r3, [r2, #0]
		aRX = _read_32(result[10], result[11], result[12], result[13]);
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <gamepad_update+0x124>)
 800124a:	7a98      	ldrb	r0, [r3, #10]
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <gamepad_update+0x124>)
 800124e:	7ad9      	ldrb	r1, [r3, #11]
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <gamepad_update+0x124>)
 8001252:	7b1a      	ldrb	r2, [r3, #12]
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <gamepad_update+0x124>)
 8001256:	7b5b      	ldrb	r3, [r3, #13]
 8001258:	f7ff febd 	bl	8000fd6 <_read_32>
 800125c:	4603      	mov	r3, r0
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <gamepad_update+0x13c>)
 8001260:	6013      	str	r3, [r2, #0]
		aRY = _read_32(result[14], result[15], result[16], result[17]);
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <gamepad_update+0x124>)
 8001264:	7b98      	ldrb	r0, [r3, #14]
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <gamepad_update+0x124>)
 8001268:	7bd9      	ldrb	r1, [r3, #15]
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <gamepad_update+0x124>)
 800126c:	7c1a      	ldrb	r2, [r3, #16]
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <gamepad_update+0x124>)
 8001270:	7c5b      	ldrb	r3, [r3, #17]
 8001272:	f7ff feb0 	bl	8000fd6 <_read_32>
 8001276:	4603      	mov	r3, r0
 8001278:	4a24      	ldr	r2, [pc, #144]	; (800130c <gamepad_update+0x140>)
 800127a:	6013      	str	r3, [r2, #0]
		al2 = _read_32(result[18], result[19], result[20], result[21]);
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <gamepad_update+0x124>)
 800127e:	7c98      	ldrb	r0, [r3, #18]
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <gamepad_update+0x124>)
 8001282:	7cd9      	ldrb	r1, [r3, #19]
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <gamepad_update+0x124>)
 8001286:	7d1a      	ldrb	r2, [r3, #20]
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <gamepad_update+0x124>)
 800128a:	7d5b      	ldrb	r3, [r3, #21]
 800128c:	f7ff fea3 	bl	8000fd6 <_read_32>
 8001290:	4603      	mov	r3, r0
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <gamepad_update+0x144>)
 8001294:	6013      	str	r3, [r2, #0]
		ar2 = _read_32(result[22], result[23], result[24], result[25]);
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <gamepad_update+0x124>)
 8001298:	7d98      	ldrb	r0, [r3, #22]
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <gamepad_update+0x124>)
 800129c:	7dd9      	ldrb	r1, [r3, #23]
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <gamepad_update+0x124>)
 80012a0:	7e1a      	ldrb	r2, [r3, #24]
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <gamepad_update+0x124>)
 80012a4:	7e5b      	ldrb	r3, [r3, #25]
 80012a6:	f7ff fe96 	bl	8000fd6 <_read_32>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <gamepad_update+0x148>)
 80012ae:	6013      	str	r3, [r2, #0]
		buttons = _read_16(result[26], result[27]);
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <gamepad_update+0x124>)
 80012b2:	7e9b      	ldrb	r3, [r3, #26]
 80012b4:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <gamepad_update+0x124>)
 80012b6:	7ed2      	ldrb	r2, [r2, #27]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe6e 	bl	8000f9c <_read_16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <gamepad_update+0x14c>)
 80012c6:	801a      	strh	r2, [r3, #0]
		misc_buttons = _read_16(result[28], result[29]);
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <gamepad_update+0x124>)
 80012ca:	7f1b      	ldrb	r3, [r3, #28]
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <gamepad_update+0x124>)
 80012ce:	7f52      	ldrb	r2, [r2, #29]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe62 	bl	8000f9c <_read_16>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <gamepad_update+0x150>)
 80012de:	801a      	strh	r2, [r3, #0]
	}
	_convert_data();
 80012e0:	f7ff fe9e 	bl	8001020 <_convert_data>
 80012e4:	e000      	b.n	80012e8 <gamepad_update+0x11c>
	if(is_receiver_connect == 0) return;
 80012e6:	bf00      	nop
}
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000128 	.word	0x20000128
 80012f0:	20000130 	.word	0x20000130
 80012f4:	2000017c 	.word	0x2000017c
 80012f8:	2000012c 	.word	0x2000012c
 80012fc:	2000014e 	.word	0x2000014e
 8001300:	20000150 	.word	0x20000150
 8001304:	20000154 	.word	0x20000154
 8001308:	20000158 	.word	0x20000158
 800130c:	2000015c 	.word	0x2000015c
 8001310:	20000160 	.word	0x20000160
 8001314:	20000164 	.word	0x20000164
 8001318:	20000168 	.word	0x20000168
 800131c:	2000016a 	.word	0x2000016a

08001320 <gamepad_calculate_leff_joystick>:

int gamepad_calculate_leff_joystick(){
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
	if(is_gamepad_connect == 0) return -1;
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <gamepad_calculate_leff_joystick+0x188>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <gamepad_calculate_leff_joystick+0x14>
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e0ae      	b.n	8001492 <gamepad_calculate_leff_joystick+0x172>
    int dir = -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	60fb      	str	r3, [r7, #12]

    int distance = (int)(sqrt(aLX*aLX + aLY*aLY));
 800133a:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <gamepad_calculate_leff_joystick+0x18c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5b      	ldr	r2, [pc, #364]	; (80014ac <gamepad_calculate_leff_joystick+0x18c>)
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	fb03 f202 	mul.w	r2, r3, r2
 8001346:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <gamepad_calculate_leff_joystick+0x190>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4959      	ldr	r1, [pc, #356]	; (80014b0 <gamepad_calculate_leff_joystick+0x190>)
 800134c:	6809      	ldr	r1, [r1, #0]
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	4413      	add	r3, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8b9 	bl	80004cc <__aeabi_i2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f006 fc87 	bl	8007c74 <sqrt>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fbc7 	bl	8000b00 <__aeabi_d2iz>
 8001372:	4603      	mov	r3, r0
 8001374:	607b      	str	r3, [r7, #4]

    if (distance < 15){
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0e      	cmp	r3, #14
 800137a:	dc06      	bgt.n	800138a <gamepad_calculate_leff_joystick+0x6a>
        distance = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
        dir = -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	60fb      	str	r3, [r7, #12]
        return dir;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	e083      	b.n	8001492 <gamepad_calculate_leff_joystick+0x172>
    }else if (distance > 100){
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b64      	cmp	r3, #100	; 0x64
 800138e:	dd01      	ble.n	8001394 <gamepad_calculate_leff_joystick+0x74>
    	distance = 100;
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	607b      	str	r3, [r7, #4]
    }

    int angle = (int)(atan2(aLY, aLX) * 180 / 3.14);
 8001394:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <gamepad_calculate_leff_joystick+0x190>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f897 	bl	80004cc <__aeabi_i2d>
 800139e:	4604      	mov	r4, r0
 80013a0:	460d      	mov	r5, r1
 80013a2:	4b42      	ldr	r3, [pc, #264]	; (80014ac <gamepad_calculate_leff_joystick+0x18c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f890 	bl	80004cc <__aeabi_i2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f006 fc5c 	bl	8007c70 <atan2>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <gamepad_calculate_leff_joystick+0x194>)
 80013be:	f7ff f8ef 	bl	80005a0 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	a335      	add	r3, pc, #212	; (adr r3, 80014a0 <gamepad_calculate_leff_joystick+0x180>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff fa10 	bl	80007f4 <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fb90 	bl	8000b00 <__aeabi_d2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	60bb      	str	r3, [r7, #8]

    if (angle < 0) angle += 360;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da03      	bge.n	80013f2 <gamepad_calculate_leff_joystick+0xd2>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013f0:	60bb      	str	r3, [r7, #8]

    if ((0 <= angle && angle < 10) || angle >= 350)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db02      	blt.n	80013fe <gamepad_calculate_leff_joystick+0xde>
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	dd03      	ble.n	8001406 <gamepad_calculate_leff_joystick+0xe6>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001404:	db02      	blt.n	800140c <gamepad_calculate_leff_joystick+0xec>
        dir = ROBOT_DIR_SR;
 8001406:	2308      	movs	r3, #8
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e041      	b.n	8001490 <gamepad_calculate_leff_joystick+0x170>
    else if (15 <= angle && angle < 75)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b0e      	cmp	r3, #14
 8001410:	dd05      	ble.n	800141e <gamepad_calculate_leff_joystick+0xfe>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b4a      	cmp	r3, #74	; 0x4a
 8001416:	dc02      	bgt.n	800141e <gamepad_calculate_leff_joystick+0xfe>
        dir = ROBOT_DIR_RB;
 8001418:	2306      	movs	r3, #6
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e038      	b.n	8001490 <gamepad_calculate_leff_joystick+0x170>
    else if (80 <= angle && angle < 110)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b4f      	cmp	r3, #79	; 0x4f
 8001422:	dd05      	ble.n	8001430 <gamepad_calculate_leff_joystick+0x110>
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b6d      	cmp	r3, #109	; 0x6d
 8001428:	dc02      	bgt.n	8001430 <gamepad_calculate_leff_joystick+0x110>
        dir = ROBOT_DIR_BW;
 800142a:	2309      	movs	r3, #9
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e02f      	b.n	8001490 <gamepad_calculate_leff_joystick+0x170>
    else if (115 <= angle && angle < 165)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b72      	cmp	r3, #114	; 0x72
 8001434:	dd05      	ble.n	8001442 <gamepad_calculate_leff_joystick+0x122>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2ba4      	cmp	r3, #164	; 0xa4
 800143a:	dc02      	bgt.n	8001442 <gamepad_calculate_leff_joystick+0x122>
        dir = ROBOT_DIR_LB;
 800143c:	2305      	movs	r3, #5
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e026      	b.n	8001490 <gamepad_calculate_leff_joystick+0x170>
    else if (170 <= angle && angle < 190)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2ba9      	cmp	r3, #169	; 0xa9
 8001446:	dd05      	ble.n	8001454 <gamepad_calculate_leff_joystick+0x134>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2bbd      	cmp	r3, #189	; 0xbd
 800144c:	dc02      	bgt.n	8001454 <gamepad_calculate_leff_joystick+0x134>
        dir = ROBOT_DIR_SL;
 800144e:	2307      	movs	r3, #7
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e01d      	b.n	8001490 <gamepad_calculate_leff_joystick+0x170>
    else if (195 <= angle && angle < 255)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2bc2      	cmp	r3, #194	; 0xc2
 8001458:	dd05      	ble.n	8001466 <gamepad_calculate_leff_joystick+0x146>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2bfe      	cmp	r3, #254	; 0xfe
 800145e:	dc02      	bgt.n	8001466 <gamepad_calculate_leff_joystick+0x146>
        dir = ROBOT_DIR_LF;
 8001460:	2304      	movs	r3, #4
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e014      	b.n	8001490 <gamepad_calculate_leff_joystick+0x170>
    else if (260 <= angle && angle < 280)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800146c:	db06      	blt.n	800147c <gamepad_calculate_leff_joystick+0x15c>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001474:	da02      	bge.n	800147c <gamepad_calculate_leff_joystick+0x15c>
        dir = ROBOT_DIR_FW;
 8001476:	2303      	movs	r3, #3
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	e009      	b.n	8001490 <gamepad_calculate_leff_joystick+0x170>
    else if (285 <= angle && angle < 345)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001482:	dd05      	ble.n	8001490 <gamepad_calculate_leff_joystick+0x170>
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800148a:	dc01      	bgt.n	8001490 <gamepad_calculate_leff_joystick+0x170>
        dir = ROBOT_DIR_RF;
 800148c:	2302      	movs	r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
    return dir;
 8001490:	68fb      	ldr	r3, [r7, #12]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bdb0      	pop	{r4, r5, r7, pc}
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w
 80014a0:	51eb851f 	.word	0x51eb851f
 80014a4:	40091eb8 	.word	0x40091eb8
 80014a8:	2000012c 	.word	0x2000012c
 80014ac:	20000150 	.word	0x20000150
 80014b0:	20000154 	.word	0x20000154
 80014b4:	40668000 	.word	0x40668000

080014b8 <gamepad_run_tele>:

int sm_pos = 1;
void gamepad_run_tele(int accel){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	static int last_dir = -1;
	int my_dir = -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	617b      	str	r3, [r7, #20]
	int run_speed = MIN_SPEED;
 80014c6:	231e      	movs	r3, #30
 80014c8:	613b      	str	r3, [r7, #16]
	int turn_speed = MIN_SPEED;
 80014ca:	231e      	movs	r3, #30
 80014cc:	60fb      	str	r3, [r7, #12]
	my_dir = gamepad_calculate_leff_joystick();
 80014ce:	f7ff ff27 	bl	8001320 <gamepad_calculate_leff_joystick>
 80014d2:	6178      	str	r0, [r7, #20]
	if(b) {
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <gamepad_run_tele+0x144>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <gamepad_run_tele+0x2c>
		servo_set_angle(SERVO1, 0);
 80014dc:	2100      	movs	r1, #0
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 fd12 	bl	8001f08 <servo_set_angle>
	}
	if(x){
 80014e4:	4b46      	ldr	r3, [pc, #280]	; (8001600 <gamepad_run_tele+0x148>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <gamepad_run_tele+0x3c>
		servo_set_angle(SERVO1, 45);
 80014ec:	212d      	movs	r1, #45	; 0x2d
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 fd0a 	bl	8001f08 <servo_set_angle>
	}
	if(a){
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <gamepad_run_tele+0x14c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00a      	beq.n	8001512 <gamepad_run_tele+0x5a>
		if(sm_pos == 1){
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <gamepad_run_tele+0x150>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <gamepad_run_tele+0x5a>
			sm_pos = 0;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <gamepad_run_tele+0x150>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
			moveSM(-4);
 800150a:	f06f 0003 	mvn.w	r0, #3
 800150e:	f000 fe05 	bl	800211c <moveSM>
		}
	}
	if(y){
 8001512:	4b3e      	ldr	r3, [pc, #248]	; (800160c <gamepad_run_tele+0x154>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <gamepad_run_tele+0x76>
		if(sm_pos == 0){
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <gamepad_run_tele+0x150>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d105      	bne.n	800152e <gamepad_run_tele+0x76>
			sm_pos = 1;
 8001522:	4b39      	ldr	r3, [pc, #228]	; (8001608 <gamepad_run_tele+0x150>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
			moveSM(4);
 8001528:	2004      	movs	r0, #4
 800152a:	f000 fdf7 	bl	800211c <moveSM>
		}
	}
	if(dpad_up){
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <gamepad_run_tele+0x158>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <gamepad_run_tele+0x82>
		my_dir = ROBOT_DIR_FW;
 8001536:	2303      	movs	r3, #3
 8001538:	617b      	str	r3, [r7, #20]
	}
	if(dpad_down){
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <gamepad_run_tele+0x15c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <gamepad_run_tele+0x8e>
		my_dir = ROBOT_DIR_BW;
 8001542:	2309      	movs	r3, #9
 8001544:	617b      	str	r3, [r7, #20]
	}
	if(dpad_left){
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <gamepad_run_tele+0x160>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <gamepad_run_tele+0x9a>
		my_dir = ROBOT_DIR_L;
 800154e:	230a      	movs	r3, #10
 8001550:	617b      	str	r3, [r7, #20]
	}
	if(dpad_right){
 8001552:	4b32      	ldr	r3, [pc, #200]	; (800161c <gamepad_run_tele+0x164>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <gamepad_run_tele+0xa6>
		my_dir = ROBOT_DIR_R;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
	}
	if (my_dir != last_dir) // got new direction command
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <gamepad_run_tele+0x168>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	429a      	cmp	r2, r3
 8001566:	d004      	beq.n	8001572 <gamepad_run_tele+0xba>
	{
        run_speed = MIN_SPEED; // reset speed
 8001568:	231e      	movs	r3, #30
 800156a:	613b      	str	r3, [r7, #16]
        turn_speed = MIN_SPEED;
 800156c:	231e      	movs	r3, #30
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	e015      	b.n	800159e <gamepad_run_tele+0xe6>
	}else {
		run_speed = run_speed + accel;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
		if(run_speed > MAX_SPEED) run_speed = MAX_SPEED;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	2b28      	cmp	r3, #40	; 0x28
 800157e:	dd01      	ble.n	8001584 <gamepad_run_tele+0xcc>
 8001580:	2328      	movs	r3, #40	; 0x28
 8001582:	613b      	str	r3, [r7, #16]
		turn_speed = turn_speed + accel/2;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0fda      	lsrs	r2, r3, #31
 8001588:	4413      	add	r3, r2
 800158a:	105b      	asrs	r3, r3, #1
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
		if(turn_speed > MAX_SPEED) turn_speed = MAX_SPEED;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b28      	cmp	r3, #40	; 0x28
 8001598:	dd01      	ble.n	800159e <gamepad_run_tele+0xe6>
 800159a:	2328      	movs	r3, #40	; 0x28
 800159c:	60fb      	str	r3, [r7, #12]
	}

	switch(my_dir){
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	2b09      	cmp	r3, #9
 80015a4:	bf8c      	ite	hi
 80015a6:	2201      	movhi	r2, #1
 80015a8:	2200      	movls	r2, #0
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	2a00      	cmp	r2, #0
 80015ae:	d11e      	bne.n	80015ee <gamepad_run_tele+0x136>
 80015b0:	2201      	movs	r2, #1
 80015b2:	409a      	lsls	r2, r3
 80015b4:	f240 233b 	movw	r3, #571	; 0x23b
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <gamepad_run_tele+0x12c>
 80015c8:	f402 73e2 	and.w	r3, r2, #452	; 0x1c4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <gamepad_run_tele+0x136>
	case ROBOT_DIR_FW:
	case ROBOT_DIR_BW:
	case ROBOT_DIR_SL:
	case ROBOT_DIR_SR:
		runDir(my_dir, run_speed);
 80015da:	6939      	ldr	r1, [r7, #16]
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f000 fc2f 	bl	8001e40 <runDir>
		break;
 80015e2:	e007      	b.n	80015f4 <gamepad_run_tele+0x13c>
	case ROBOT_DIR_L:
	case ROBOT_DIR_LB:
	case ROBOT_DIR_LF:
	case ROBOT_DIR_RB:
	case ROBOT_DIR_RF:
		runDir(my_dir, turn_speed);
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f000 fc2a 	bl	8001e40 <runDir>
		break;
 80015ec:	e002      	b.n	80015f4 <gamepad_run_tele+0x13c>
	default:
		stop();
 80015ee:	f000 fb2f 	bl	8001c50 <stop>
		break;
 80015f2:	bf00      	nop
	}

}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000171 	.word	0x20000171
 8001600:	20000172 	.word	0x20000172
 8001604:	20000170 	.word	0x20000170
 8001608:	2000000c 	.word	0x2000000c
 800160c:	20000173 	.word	0x20000173
 8001610:	2000016d 	.word	0x2000016d
 8001614:	2000016e 	.word	0x2000016e
 8001618:	2000016c 	.word	0x2000016c
 800161c:	2000016f 	.word	0x2000016f
 8001620:	20000010 	.word	0x20000010

08001624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001638:	4b52      	ldr	r3, [pc, #328]	; (8001784 <MX_GPIO_Init+0x160>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a51      	ldr	r2, [pc, #324]	; (8001784 <MX_GPIO_Init+0x160>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <MX_GPIO_Init+0x160>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <MX_GPIO_Init+0x160>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <MX_GPIO_Init+0x160>)
 8001656:	f043 0320 	orr.w	r3, r3, #32
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b49      	ldr	r3, [pc, #292]	; (8001784 <MX_GPIO_Init+0x160>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <MX_GPIO_Init+0x160>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a45      	ldr	r2, [pc, #276]	; (8001784 <MX_GPIO_Init+0x160>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <MX_GPIO_Init+0x160>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <MX_GPIO_Init+0x160>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <MX_GPIO_Init+0x160>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <MX_GPIO_Init+0x160>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800169e:	483a      	ldr	r0, [pc, #232]	; (8001788 <MX_GPIO_Init+0x164>)
 80016a0:	f002 fc96 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 80016a4:	2200      	movs	r2, #0
 80016a6:	f649 1102 	movw	r1, #39170	; 0x9902
 80016aa:	4838      	ldr	r0, [pc, #224]	; (800178c <MX_GPIO_Init+0x168>)
 80016ac:	f002 fc90 	bl	8003fd0 <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2124      	movs	r1, #36	; 0x24
 80016b4:	4836      	ldr	r0, [pc, #216]	; (8001790 <MX_GPIO_Init+0x16c>)
 80016b6:	f002 fc8b 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 80016ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	482d      	ldr	r0, [pc, #180]	; (8001788 <MX_GPIO_Init+0x164>)
 80016d4:	f002 fae8 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 80016d8:	f649 1302 	movw	r3, #39170	; 0x9902
 80016dc:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4619      	mov	r1, r3
 80016f0:	4826      	ldr	r0, [pc, #152]	; (800178c <MX_GPIO_Init+0x168>)
 80016f2:	f002 fad9 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin;
 80016f6:	2304      	movs	r3, #4
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2302      	movs	r3, #2
 8001704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_DIR_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	4820      	ldr	r0, [pc, #128]	; (8001790 <MX_GPIO_Init+0x16c>)
 800170e:	f002 facb 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 8001712:	f24f 2308 	movw	r3, #61960	; 0xf208
 8001716:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	481a      	ldr	r0, [pc, #104]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001728:	f002 fabe 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 800172c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	4811      	ldr	r0, [pc, #68]	; (8001788 <MX_GPIO_Init+0x164>)
 8001742:	f002 fab1 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 8001746:	2304      	movs	r3, #4
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <MX_GPIO_Init+0x170>)
 800175a:	f002 faa5 	bl	8003ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SM_DIR_Pin;
 800175e:	2320      	movs	r3, #32
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_DIR_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4619      	mov	r1, r3
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001776:	f002 fa97 	bl	8003ca8 <HAL_GPIO_Init>

}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	40011000 	.word	0x40011000
 800178c:	40010800 	.word	0x40010800
 8001790:	40010c00 	.word	0x40010c00
 8001794:	40011400 	.word	0x40011400

08001798 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_I2C2_Init+0x50>)
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <MX_I2C2_Init+0x54>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_I2C2_Init+0x58>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d6:	f002 fc2d 	bl	8004034 <HAL_I2C_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017e0:	f000 f950 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000017c 	.word	0x2000017c
 80017ec:	40005800 	.word	0x40005800
 80017f0:	000186a0 	.word	0x000186a0

080017f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_I2C_MspInit+0x74>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d124      	bne.n	800185e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_I2C_MspInit+0x78>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_I2C_MspInit+0x78>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_I2C_MspInit+0x78>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800182c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001832:	2312      	movs	r3, #18
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	4619      	mov	r1, r3
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <HAL_I2C_MspInit+0x7c>)
 8001842:	f002 fa31 	bl	8003ca8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_I2C_MspInit+0x78>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_I2C_MspInit+0x78>)
 800184c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_I2C_MspInit+0x78>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40005800 	.word	0x40005800
 800186c:	40021000 	.word	0x40021000
 8001870:	40010c00 	.word	0x40010c00

08001874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0a4      	sub	sp, #144	; 0x90
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187a:	f001 fa67 	bl	8002d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187e:	f000 f875 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001882:	f7ff fecf 	bl	8001624 <MX_GPIO_Init>
  MX_DMA_Init();
 8001886:	f7ff fb4b 	bl	8000f20 <MX_DMA_Init>
  MX_ADC1_Init();
 800188a:	f7ff f961 	bl	8000b50 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800188e:	f001 f94f 	bl	8002b30 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001892:	f001 f977 	bl	8002b84 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001896:	f7ff ff7f 	bl	8001798 <MX_I2C2_Init>
  MX_SPI1_Init();
 800189a:	f000 fbbf 	bl	800201c <MX_SPI1_Init>
  MX_TIM8_Init();
 800189e:	f000 fee9 	bl	8002674 <MX_TIM8_Init>
  MX_TIM4_Init();
 80018a2:	f000 fde3 	bl	800246c <MX_TIM4_Init>
  MX_TIM5_Init();
 80018a6:	f000 fe6f 	bl	8002588 <MX_TIM5_Init>
  MX_TIM2_Init();
 80018aa:	f000 fd1d 	bl	80022e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018ae:	f000 fd67 	bl	8002380 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80018b2:	4829      	ldr	r0, [pc, #164]	; (8001958 <main+0xe4>)
 80018b4:	f004 fa66 	bl	8005d84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80018b8:	2100      	movs	r1, #0
 80018ba:	4828      	ldr	r0, [pc, #160]	; (800195c <main+0xe8>)
 80018bc:	f004 fb1a 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80018c0:	2104      	movs	r1, #4
 80018c2:	4826      	ldr	r0, [pc, #152]	; (800195c <main+0xe8>)
 80018c4:	f004 fb16 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80018c8:	2108      	movs	r1, #8
 80018ca:	4824      	ldr	r0, [pc, #144]	; (800195c <main+0xe8>)
 80018cc:	f004 fb12 	bl	8005ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80018d0:	210c      	movs	r1, #12
 80018d2:	4822      	ldr	r0, [pc, #136]	; (800195c <main+0xe8>)
 80018d4:	f004 fb0e 	bl	8005ef4 <HAL_TIM_PWM_Start>
  setTimer(0, 10);
 80018d8:	210a      	movs	r1, #10
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 fb5e 	bl	8001f9c <setTimer>
  setTimer(1, 1000);
 80018e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018e4:	2001      	movs	r0, #1
 80018e6:	f000 fb59 	bl	8001f9c <setTimer>
  servo_init(SERVO1);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 faf8 	bl	8001ee0 <servo_init>
  gamepad_init();
 80018f0:	f7ff fb34 	bl	8000f5c <gamepad_init>
  display_init();
 80018f4:	f7ff fa4e 	bl	8000d94 <display_init>
  display_7seg(47);
 80018f8:	202f      	movs	r0, #47	; 0x2f
 80018fa:	f7ff fad7 	bl	8000eac <display_7seg>
  display_led(0x0f);
 80018fe:	200f      	movs	r0, #15
 8001900:	f7ff fafe 	bl	8000f00 <display_led>
  int len = 17;
 8001904:	2311      	movs	r3, #17
 8001906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int note[17] = { NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <main+0xec>)
 800190c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001910:	4611      	mov	r1, r2
 8001912:	2244      	movs	r2, #68	; 0x44
 8001914:	4618      	mov	r0, r3
 8001916:	f006 f99d 	bl	8007c54 <memcpy>
		  	  	  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5};
  int dur[17] = { 1000, 500, 500, 500, 200,
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <main+0xf0>)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4611      	mov	r1, r2
 8001920:	2244      	movs	r2, #68	; 0x44
 8001922:	4618      	mov	r0, r3
 8001924:	f006 f996 	bl	8007c54 <memcpy>
		  500, 500, 500, 500, 200,
		  500, 500, 500, 200,
		  500, 500, 500};

  tone_play(note, dur, len);
 8001928:	1d39      	adds	r1, r7, #4
 800192a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800192e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001932:	4618      	mov	r0, r3
 8001934:	f001 f8d4 	bl	8002ae0 <tone_play>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <main+0xf4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d1fb      	bne.n	8001938 <main+0xc4>
		  setTimer(0, 10);
 8001940:	210a      	movs	r1, #10
 8001942:	2000      	movs	r0, #0
 8001944:	f000 fb2a 	bl	8001f9c <setTimer>
		  ledBlink();
 8001948:	f000 f882 	bl	8001a50 <ledBlink>
		  gamepad_update();
 800194c:	f7ff fc3e 	bl	80011cc <gamepad_update>
		  gamepad_run_tele(2);
 8001950:	2002      	movs	r0, #2
 8001952:	f7ff fdb1 	bl	80014b8 <gamepad_run_tele>
	  if(timer_flag[0] == 1){
 8001956:	e7ef      	b.n	8001938 <main+0xc4>
 8001958:	200002d4 	.word	0x200002d4
 800195c:	200003f4 	.word	0x200003f4
 8001960:	08008348 	.word	0x08008348
 8001964:	0800838c 	.word	0x0800838c
 8001968:	20000228 	.word	0x20000228

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b096      	sub	sp, #88	; 0x58
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001976:	2228      	movs	r2, #40	; 0x28
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f006 f938 	bl	8007bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ae:	2301      	movs	r3, #1
 80019b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b2:	2302      	movs	r3, #2
 80019b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fa58 	bl	8004e7c <HAL_RCC_OscConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80019d2:	f000 f857 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d6:	230f      	movs	r3, #15
 80019d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fcc4 	bl	8005380 <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019fe:	f000 f841 	bl	8001a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a02:	2302      	movs	r3, #2
 8001a04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fe44 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a1a:	f000 f833 	bl	8001a84 <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3758      	adds	r7, #88	; 0x58
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a36:	d107      	bne.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0x22>
		timerRun(0);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 fac7 	bl	8001fcc <timerRun>
		timerRun(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f000 fac4 	bl	8001fcc <timerRun>
		display_run();
 8001a44:	f7ff f9b2 	bl	8000dac <display_run>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <ledBlink>:



int led_debug_count = 0;
void ledBlink(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	led_debug_count++;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <ledBlink+0x2c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <ledBlink+0x2c>)
 8001a5c:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <ledBlink+0x2c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d107      	bne.n	8001a76 <ledBlink+0x26>
		led_debug_count = 0;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <ledBlink+0x2c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <ledBlink+0x30>)
 8001a72:	f002 fac5 	bl	8004000 <HAL_GPIO_TogglePin>
	}
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200001d0 	.word	0x200001d0
 8001a80:	40011000 	.word	0x40011000

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>
	...

08001a90 <setSpeed>:
#define		UP			1
#define 	DOWN 		0

uint8_t speed_duty_cycle = 0;

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71bb      	strb	r3, [r7, #6]
	speed_duty_cycle = duty_cycle;
 8001aa0:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <setSpeed+0x70>)
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	7013      	strb	r3, [r2, #0]
	switch (dc){
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d822      	bhi.n	8001af4 <setSpeed+0x64>
 8001aae:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <setSpeed+0x24>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001ac5 	.word	0x08001ac5
 8001ab8:	08001ad1 	.word	0x08001ad1
 8001abc:	08001add 	.word	0x08001add
 8001ac0:	08001ae9 	.word	0x08001ae9
	case 1:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, speed_duty_cycle);
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <setSpeed+0x70>)
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <setSpeed+0x74>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001ace:	e011      	b.n	8001af4 <setSpeed+0x64>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, speed_duty_cycle);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <setSpeed+0x70>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <setSpeed+0x74>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001ada:	e00b      	b.n	8001af4 <setSpeed+0x64>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, speed_duty_cycle);
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <setSpeed+0x70>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <setSpeed+0x74>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001ae6:	e005      	b.n	8001af4 <setSpeed+0x64>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, speed_duty_cycle);
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <setSpeed+0x70>)
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <setSpeed+0x74>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001af2:	bf00      	nop
	}
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200001d4 	.word	0x200001d4
 8001b04:	200003f4 	.word	0x200003f4

08001b08 <dc1Move>:

void dc1Move(int duty_cycle){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1c:	480e      	ldr	r0, [pc, #56]	; (8001b58 <dc1Move+0x50>)
 8001b1e:	f002 fa57 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4619      	mov	r1, r3
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff ffb1 	bl	8001a90 <setSpeed>
	}
	if(duty_cycle < 0){
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da0d      	bge.n	8001b50 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <dc1Move+0x50>)
 8001b3c:	f002 fa48 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	425b      	negs	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff ffa0 	bl	8001a90 <setSpeed>
	}
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40011000 	.word	0x40011000

08001b5c <dc2Move>:

void dc2Move(int duty_cycle){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b70:	480e      	ldr	r0, [pc, #56]	; (8001bac <dc2Move+0x50>)
 8001b72:	f002 fa2d 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f7ff ff87 	bl	8001a90 <setSpeed>
	}
	if(duty_cycle < 0){
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	da0d      	bge.n	8001ba4 <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <dc2Move+0x50>)
 8001b90:	f002 fa1e 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	425b      	negs	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f7ff ff76 	bl	8001a90 <setSpeed>
	}
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40011000 	.word	0x40011000

08001bb0 <dc3Move>:

void dc3Move(int duty_cycle){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0a      	blt.n	8001bd4 <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	480e      	ldr	r0, [pc, #56]	; (8001bfc <dc3Move+0x4c>)
 8001bc4:	f002 fa04 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f7ff ff5e 	bl	8001a90 <setSpeed>
	}
	if(duty_cycle < 0){
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da0c      	bge.n	8001bf4 <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <dc3Move+0x4c>)
 8001be0:	f002 f9f6 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	425b      	negs	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f7ff ff4e 	bl	8001a90 <setSpeed>
	}
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40010c00 	.word	0x40010c00

08001c00 <dc4Move>:

void dc4Move(int duty_cycle){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0a      	blt.n	8001c24 <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2102      	movs	r1, #2
 8001c12:	480e      	ldr	r0, [pc, #56]	; (8001c4c <dc4Move+0x4c>)
 8001c14:	f002 f9dc 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	2004      	movs	r0, #4
 8001c20:	f7ff ff36 	bl	8001a90 <setSpeed>
	}
	if(duty_cycle < 0){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da0c      	bge.n	8001c44 <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <dc4Move+0x4c>)
 8001c30:	f002 f9ce 	bl	8003fd0 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	425b      	negs	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f7ff ff26 	bl	8001a90 <setSpeed>
	}
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40010800 	.word	0x40010800

08001c50 <stop>:


void stop(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	dc1Move(0);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff ff57 	bl	8001b08 <dc1Move>
	dc2Move(0);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff ff7e 	bl	8001b5c <dc2Move>
	dc3Move(0);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff ffa5 	bl	8001bb0 <dc3Move>
	dc4Move(0);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff ffca 	bl	8001c00 <dc4Move>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <forward>:

void forward(int speed){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff45 	bl	8001b08 <dc1Move>
	dc2Move(speed);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff6c 	bl	8001b5c <dc2Move>
	dc3Move(speed);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff93 	bl	8001bb0 <dc3Move>
	dc4Move(speed);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffb8 	bl	8001c00 <dc4Move>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <backwards>:

void backwards(int speed){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff2f 	bl	8001b08 <dc1Move>
	dc2Move(-speed);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	425b      	negs	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff54 	bl	8001b5c <dc2Move>
	dc3Move(-speed);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff79 	bl	8001bb0 <dc3Move>
	dc4Move(-speed);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff9c 	bl	8001c00 <dc4Move>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <frontLeft>:

void frontLeft(int speed){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	dc1Move(0); //stop
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff ff15 	bl	8001b08 <dc1Move>
	dc2Move(speed);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff3c 	bl	8001b5c <dc2Move>
	dc3Move(speed);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff63 	bl	8001bb0 <dc3Move>
	dc4Move(0); //stop
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff ff88 	bl	8001c00 <dc4Move>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <frontRight>:

void frontRight(int speed){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff01 	bl	8001b08 <dc1Move>
	dc2Move(0); //stop
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff ff28 	bl	8001b5c <dc2Move>
	dc3Move(0); //stop
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff ff4f 	bl	8001bb0 <dc3Move>
	dc4Move(speed);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff74 	bl	8001c00 <dc4Move>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <backRight>:
void backRight(int speed){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	dc1Move(0); //stop
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff feed 	bl	8001b08 <dc1Move>
	dc2Move(-speed);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	425b      	negs	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff12 	bl	8001b5c <dc2Move>
	dc3Move(-speed);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	425b      	negs	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff37 	bl	8001bb0 <dc3Move>
	dc4Move(0); //stop
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff ff5c 	bl	8001c00 <dc4Move>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <backLeft>:

void backLeft(int speed){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	425b      	negs	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fed3 	bl	8001b08 <dc1Move>
	dc2Move(0); //stop
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff fefa 	bl	8001b5c <dc2Move>
	dc3Move(0); //stop
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ff21 	bl	8001bb0 <dc3Move>
	dc4Move(-speed);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	425b      	negs	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff44 	bl	8001c00 <dc4Move>

}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <right>:

void right(int speed){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff febd 	bl	8001b08 <dc1Move>
	dc2Move(-speed);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	425b      	negs	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fee2 	bl	8001b5c <dc2Move>
	dc3Move(-speed);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff07 	bl	8001bb0 <dc3Move>
	dc4Move(speed);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff2c 	bl	8001c00 <dc4Move>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <left>:

void left(int speed){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	425b      	negs	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fea3 	bl	8001b08 <dc1Move>
	dc2Move(speed);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff feca 	bl	8001b5c <dc2Move>
	dc3Move(speed);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fef1 	bl	8001bb0 <dc3Move>
	dc4Move(-speed);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff14 	bl	8001c00 <dc4Move>
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <rotateLeft>:

void rotateLeft(int speed){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	425b      	negs	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe8b 	bl	8001b08 <dc1Move>
	dc2Move(-speed);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	425b      	negs	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff feb0 	bl	8001b5c <dc2Move>
	dc3Move(speed);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fed7 	bl	8001bb0 <dc3Move>
	dc4Move(speed);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fefc 	bl	8001c00 <dc4Move>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <rotateRight>:

void rotateRight(int speed){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fe75 	bl	8001b08 <dc1Move>
	dc2Move(speed);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fe9c 	bl	8001b5c <dc2Move>
	dc3Move(-speed);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	425b      	negs	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fec1 	bl	8001bb0 <dc3Move>
	dc4Move(-speed);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	425b      	negs	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fee4 	bl	8001c00 <dc4Move>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <runDir>:
	else
		count_test = 10;

}

void runDir(int dir, int speed){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	switch (dir) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	d83e      	bhi.n	8001ed0 <runDir+0x90>
 8001e52:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <runDir+0x18>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001ea1 	.word	0x08001ea1
 8001e5c:	08001ec1 	.word	0x08001ec1
 8001e60:	08001e81 	.word	0x08001e81
 8001e64:	08001eb9 	.word	0x08001eb9
 8001e68:	08001ea9 	.word	0x08001ea9
 8001e6c:	08001eb1 	.word	0x08001eb1
 8001e70:	08001e91 	.word	0x08001e91
 8001e74:	08001e89 	.word	0x08001e89
 8001e78:	08001ec9 	.word	0x08001ec9
 8001e7c:	08001e99 	.word	0x08001e99
		case ROBOT_DIR_FW:
			forward(speed);
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	f7ff fef5 	bl	8001c70 <forward>
			break;
 8001e86:	e026      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_SR:
			right(speed);
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f7ff ff79 	bl	8001d80 <right>
			break;
 8001e8e:	e022      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_SL:
			left(speed);
 8001e90:	6838      	ldr	r0, [r7, #0]
 8001e92:	f7ff ff8d 	bl	8001db0 <left>
			break;
 8001e96:	e01e      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_L:
			rotateLeft(speed);
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f7ff ffa1 	bl	8001de0 <rotateLeft>
			break;
 8001e9e:	e01a      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_R:
			rotateRight(speed);
 8001ea0:	6838      	ldr	r0, [r7, #0]
 8001ea2:	f7ff ffb5 	bl	8001e10 <rotateRight>
			break;
 8001ea6:	e016      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_LB:
			backLeft(speed);
 8001ea8:	6838      	ldr	r0, [r7, #0]
 8001eaa:	f7ff ff51 	bl	8001d50 <backLeft>
			break;
 8001eae:	e012      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_RB:
			backRight(speed);
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f7ff ff35 	bl	8001d20 <backRight>
			break;
 8001eb6:	e00e      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_LF:
			frontLeft(speed);
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f7ff ff09 	bl	8001cd0 <frontLeft>
			break;
 8001ebe:	e00a      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_RF:
			frontRight(speed);
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f7ff ff19 	bl	8001cf8 <frontRight>
			break;
 8001ec6:	e006      	b.n	8001ed6 <runDir+0x96>
		case ROBOT_DIR_BW:
			backwards(speed);
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f7ff fee5 	bl	8001c98 <backwards>
			break;
 8001ece:	e002      	b.n	8001ed6 <runDir+0x96>
		default:
			stop();
 8001ed0:	f7ff febe 	bl	8001c50 <stop>
			break;
 8001ed4:	bf00      	nop
	}
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop

08001ee0 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <servo_init+0x20>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4804      	ldr	r0, [pc, #16]	; (8001f04 <servo_init+0x24>)
 8001ef4:	f003 fffe 	bl	8005ef4 <HAL_TIM_PWM_Start>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000014 	.word	0x20000014
 8001f04:	20000364 	.word	0x20000364

08001f08 <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db35      	blt.n	8001f84 <servo_set_angle+0x7c>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2bb4      	cmp	r3, #180	; 0xb4
 8001f1c:	dc32      	bgt.n	8001f84 <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2264      	movs	r2, #100	; 0x64
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a1a      	ldr	r2, [pc, #104]	; (8001f90 <servo_set_angle+0x88>)
 8001f28:	fb82 1203 	smull	r1, r2, r2, r3
 8001f2c:	441a      	add	r2, r3
 8001f2e:	11d2      	asrs	r2, r2, #7
 8001f30:	17db      	asrs	r3, r3, #31
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	3319      	adds	r3, #25
 8001f36:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <servo_set_angle+0x8c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d104      	bne.n	8001f4e <servo_set_angle+0x46>
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <servo_set_angle+0x90>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4c:	e01b      	b.n	8001f86 <servo_set_angle+0x7e>
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <servo_set_angle+0x8c>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d104      	bne.n	8001f64 <servo_set_angle+0x5c>
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <servo_set_angle+0x90>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6393      	str	r3, [r2, #56]	; 0x38
 8001f62:	e010      	b.n	8001f86 <servo_set_angle+0x7e>
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <servo_set_angle+0x8c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d104      	bne.n	8001f7a <servo_set_angle+0x72>
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <servo_set_angle+0x90>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001f78:	e005      	b.n	8001f86 <servo_set_angle+0x7e>
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <servo_set_angle+0x90>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	e000      	b.n	8001f86 <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 8001f84:	bf00      	nop
}
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	b60b60b7 	.word	0xb60b60b7
 8001f94:	20000014 	.word	0x20000014
 8001f98:	20000364 	.word	0x20000364

08001f9c <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8001fa6:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <setTimer+0x28>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <setTimer+0x2c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	200001d8 	.word	0x200001d8
 8001fc8:	20000228 	.word	0x20000228

08001fcc <timerRun>:

void timerRun(int index){
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <timerRun+0x48>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	dd13      	ble.n	8002008 <timerRun+0x3c>
		timer_counter[index]--;
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <timerRun+0x48>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	1e5a      	subs	r2, r3, #1
 8001fea:	490a      	ldr	r1, [pc, #40]	; (8002014 <timerRun+0x48>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <timerRun+0x48>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	dc04      	bgt.n	8002008 <timerRun+0x3c>
			timer_flag[index] = 1;
 8001ffe:	4a06      	ldr	r2, [pc, #24]	; (8002018 <timerRun+0x4c>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2101      	movs	r1, #1
 8002004:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	200001d8 	.word	0x200001d8
 8002018:	20000228 	.word	0x20000228

0800201c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_SPI1_Init+0x64>)
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <MX_SPI1_Init+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_SPI1_Init+0x64>)
 8002028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800202c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_SPI1_Init+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_SPI1_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_SPI1_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_SPI1_Init+0x64>)
 8002048:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800204c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_SPI1_Init+0x64>)
 8002050:	2208      	movs	r2, #8
 8002052:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_SPI1_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_SPI1_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_SPI1_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_SPI1_Init+0x64>)
 8002068:	220a      	movs	r2, #10
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_SPI1_Init+0x64>)
 800206e:	f003 fbcb 	bl	8005808 <HAL_SPI_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002078:	f7ff fd04 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000278 	.word	0x20000278
 8002084:	40013000 	.word	0x40013000

08002088 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_SPI_MspInit+0x88>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d12f      	bne.n	8002108 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_SPI_MspInit+0x8c>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_SPI_MspInit+0x8c>)
 80020ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_SPI_MspInit+0x8c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_SPI_MspInit+0x8c>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <HAL_SPI_MspInit+0x8c>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_SPI_MspInit+0x8c>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80020d8:	23b0      	movs	r3, #176	; 0xb0
 80020da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4619      	mov	r1, r3
 80020ea:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_SPI_MspInit+0x90>)
 80020ec:	f001 fddc 	bl	8003ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f0:	2340      	movs	r3, #64	; 0x40
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <HAL_SPI_MspInit+0x90>)
 8002104:	f001 fdd0 	bl	8003ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40013000 	.word	0x40013000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010800 	.word	0x40010800

0800211c <moveSM>:
#define DUTY	50
#define SPR		200

int count_spr = 0;

void moveSM(int cycle){
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	if(cycle >= 0){
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0a      	blt.n	8002140 <moveSM+0x24>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	2120      	movs	r1, #32
 800212e:	4812      	ldr	r0, [pc, #72]	; (8002178 <moveSM+0x5c>)
 8002130:	f001 ff4e 	bl	8003fd0 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	22c8      	movs	r2, #200	; 0xc8
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	4a0f      	ldr	r2, [pc, #60]	; (800217c <moveSM+0x60>)
 800213e:	6013      	str	r3, [r2, #0]
	}
	if(cycle < 0){
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da0b      	bge.n	800215e <moveSM+0x42>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	2120      	movs	r1, #32
 800214a:	480b      	ldr	r0, [pc, #44]	; (8002178 <moveSM+0x5c>)
 800214c:	f001 ff40 	bl	8003fd0 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle * -1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <moveSM+0x60>)
 800215c:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY);
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <moveSM+0x64>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2232      	movs	r2, #50	; 0x32
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002166:	2100      	movs	r1, #0
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <moveSM+0x64>)
 800216a:	f003 ffed 	bl	8006148 <HAL_TIM_PWM_Start_IT>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40010c00 	.word	0x40010c00
 800217c:	200002d0 	.word	0x200002d0
 8002180:	2000031c 	.word	0x2000031c

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10c      	bne.n	80021b0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		count_spr--;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3b01      	subs	r3, #1
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800219e:	6013      	str	r3, [r2, #0]
		if(count_spr <= 0)
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	dc03      	bgt.n	80021b0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80021a8:	2100      	movs	r1, #0
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80021ac:	f004 f8d4 	bl	8006358 <HAL_TIM_PWM_Stop_IT>
	}
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40000400 	.word	0x40000400
 80021bc:	200002d0 	.word	0x200002d0
 80021c0:	2000031c 	.word	0x2000031c

080021c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_MspInit+0x5c>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_MspInit+0x5c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6193      	str	r3, [r2, #24]
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_MspInit+0x5c>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_MspInit+0x5c>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_MspInit+0x5c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_MspInit+0x5c>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_MspInit+0x60>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_MspInit+0x60>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226e:	f000 fdb3 	bl	8002dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA1_Channel1_IRQHandler+0x10>)
 800227e:	f001 fad7 	bl	8003830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200000dc 	.word	0x200000dc

0800228c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <TIM2_IRQHandler+0x10>)
 8002292:	f004 f91f 	bl	80064d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002d4 	.word	0x200002d4

080022a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM3_IRQHandler+0x10>)
 80022a6:	f004 f915 	bl	80064d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000031c 	.word	0x2000031c

080022b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <USART1_IRQHandler+0x10>)
 80022ba:	f004 ffb7 	bl	800722c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000043c 	.word	0x2000043c

080022c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <USART2_IRQHandler+0x10>)
 80022ce:	f004 ffad 	bl	800722c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000484 	.word	0x20000484

080022dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	463b      	mov	r3, r7
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <MX_TIM2_Init+0x94>)
 8002306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800230a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <MX_TIM2_Init+0x94>)
 800230e:	2247      	movs	r2, #71	; 0x47
 8002310:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <MX_TIM2_Init+0x94>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_TIM2_Init+0x94>)
 800231a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800231e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <MX_TIM2_Init+0x94>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_TIM2_Init+0x94>)
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800232c:	4813      	ldr	r0, [pc, #76]	; (800237c <MX_TIM2_Init+0x94>)
 800232e:	f003 fcd9 	bl	8005ce4 <HAL_TIM_Base_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002338:	f7ff fba4 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4619      	mov	r1, r3
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <MX_TIM2_Init+0x94>)
 800234a:	f004 fa8d 	bl	8006868 <HAL_TIM_ConfigClockSource>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002354:	f7ff fb96 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002360:	463b      	mov	r3, r7
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_TIM2_Init+0x94>)
 8002366:	f004 fe41 	bl	8006fec <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002370:	f7ff fb88 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200002d4 	.word	0x200002d4

08002380 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08e      	sub	sp, #56	; 0x38
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	f107 0320 	add.w	r3, r7, #32
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
 80023ac:	615a      	str	r2, [r3, #20]
 80023ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023b2:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <MX_TIM3_Init+0xe8>)
 80023b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023b8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80023bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023c6:	2263      	movs	r2, #99	; 0x63
 80023c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023d6:	4823      	ldr	r0, [pc, #140]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023d8:	f003 fc84 	bl	8005ce4 <HAL_TIM_Base_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023e2:	f7ff fb4f 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f0:	4619      	mov	r1, r3
 80023f2:	481c      	ldr	r0, [pc, #112]	; (8002464 <MX_TIM3_Init+0xe4>)
 80023f4:	f004 fa38 	bl	8006868 <HAL_TIM_ConfigClockSource>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023fe:	f7ff fb41 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002402:	4818      	ldr	r0, [pc, #96]	; (8002464 <MX_TIM3_Init+0xe4>)
 8002404:	f003 fd1e 	bl	8005e44 <HAL_TIM_PWM_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800240e:	f7ff fb39 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800241a:	f107 0320 	add.w	r3, r7, #32
 800241e:	4619      	mov	r1, r3
 8002420:	4810      	ldr	r0, [pc, #64]	; (8002464 <MX_TIM3_Init+0xe4>)
 8002422:	f004 fde3 	bl	8006fec <HAL_TIMEx_MasterConfigSynchronization>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800242c:	f7ff fb2a 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002430:	2360      	movs	r3, #96	; 0x60
 8002432:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	2200      	movs	r2, #0
 8002444:	4619      	mov	r1, r3
 8002446:	4807      	ldr	r0, [pc, #28]	; (8002464 <MX_TIM3_Init+0xe4>)
 8002448:	f004 f94c 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002452:	f7ff fb17 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002456:	4803      	ldr	r0, [pc, #12]	; (8002464 <MX_TIM3_Init+0xe4>)
 8002458:	f000 fa4c 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 800245c:	bf00      	nop
 800245e:	3738      	adds	r7, #56	; 0x38
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000031c 	.word	0x2000031c
 8002468:	40000400 	.word	0x40000400

0800246c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 0320 	add.w	r3, r7, #32
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
 8002498:	615a      	str	r2, [r3, #20]
 800249a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <MX_TIM4_Init+0x114>)
 800249e:	4a39      	ldr	r2, [pc, #228]	; (8002584 <MX_TIM4_Init+0x118>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 80024a2:	4b37      	ldr	r3, [pc, #220]	; (8002580 <MX_TIM4_Init+0x114>)
 80024a4:	f240 529f 	movw	r2, #1439	; 0x59f
 80024a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <MX_TIM4_Init+0x114>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <MX_TIM4_Init+0x114>)
 80024b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <MX_TIM4_Init+0x114>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <MX_TIM4_Init+0x114>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024c4:	482e      	ldr	r0, [pc, #184]	; (8002580 <MX_TIM4_Init+0x114>)
 80024c6:	f003 fc0d 	bl	8005ce4 <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80024d0:	f7ff fad8 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024de:	4619      	mov	r1, r3
 80024e0:	4827      	ldr	r0, [pc, #156]	; (8002580 <MX_TIM4_Init+0x114>)
 80024e2:	f004 f9c1 	bl	8006868 <HAL_TIM_ConfigClockSource>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80024ec:	f7ff faca 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024f0:	4823      	ldr	r0, [pc, #140]	; (8002580 <MX_TIM4_Init+0x114>)
 80024f2:	f003 fca7 	bl	8005e44 <HAL_TIM_PWM_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80024fc:	f7ff fac2 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	4619      	mov	r1, r3
 800250e:	481c      	ldr	r0, [pc, #112]	; (8002580 <MX_TIM4_Init+0x114>)
 8002510:	f004 fd6c 	bl	8006fec <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800251a:	f7ff fab3 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251e:	2360      	movs	r3, #96	; 0x60
 8002520:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8002522:	2319      	movs	r3, #25
 8002524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2200      	movs	r2, #0
 8002532:	4619      	mov	r1, r3
 8002534:	4812      	ldr	r0, [pc, #72]	; (8002580 <MX_TIM4_Init+0x114>)
 8002536:	f004 f8d5 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002540:	f7ff faa0 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2204      	movs	r2, #4
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <MX_TIM4_Init+0x114>)
 800254c:	f004 f8ca 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002556:	f7ff fa95 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2208      	movs	r2, #8
 800255e:	4619      	mov	r1, r3
 8002560:	4807      	ldr	r0, [pc, #28]	; (8002580 <MX_TIM4_Init+0x114>)
 8002562:	f004 f8bf 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800256c:	f7ff fa8a 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002570:	4803      	ldr	r0, [pc, #12]	; (8002580 <MX_TIM4_Init+0x114>)
 8002572:	f000 f9bf 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 8002576:	bf00      	nop
 8002578:	3738      	adds	r7, #56	; 0x38
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000364 	.word	0x20000364
 8002584:	40000800 	.word	0x40000800

08002588 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259c:	f107 0320 	add.w	r3, r7, #32
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
 80025b4:	615a      	str	r2, [r3, #20]
 80025b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <MX_TIM5_Init+0xe4>)
 80025ba:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <MX_TIM5_Init+0xe8>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <MX_TIM5_Init+0xe4>)
 80025c0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80025c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <MX_TIM5_Init+0xe4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <MX_TIM5_Init+0xe4>)
 80025ce:	2263      	movs	r2, #99	; 0x63
 80025d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <MX_TIM5_Init+0xe4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <MX_TIM5_Init+0xe4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025de:	4823      	ldr	r0, [pc, #140]	; (800266c <MX_TIM5_Init+0xe4>)
 80025e0:	f003 fb80 	bl	8005ce4 <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80025ea:	f7ff fa4b 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f8:	4619      	mov	r1, r3
 80025fa:	481c      	ldr	r0, [pc, #112]	; (800266c <MX_TIM5_Init+0xe4>)
 80025fc:	f004 f934 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002606:	f7ff fa3d 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800260a:	4818      	ldr	r0, [pc, #96]	; (800266c <MX_TIM5_Init+0xe4>)
 800260c:	f003 fc1a 	bl	8005e44 <HAL_TIM_PWM_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002616:	f7ff fa35 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002622:	f107 0320 	add.w	r3, r7, #32
 8002626:	4619      	mov	r1, r3
 8002628:	4810      	ldr	r0, [pc, #64]	; (800266c <MX_TIM5_Init+0xe4>)
 800262a:	f004 fcdf 	bl	8006fec <HAL_TIMEx_MasterConfigSynchronization>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002634:	f7ff fa26 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002638:	2360      	movs	r3, #96	; 0x60
 800263a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <MX_TIM5_Init+0xe4>)
 8002650:	f004 f848 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800265a:	f7ff fa13 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <MX_TIM5_Init+0xe4>)
 8002660:	f000 f948 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 8002664:	bf00      	nop
 8002666:	3738      	adds	r7, #56	; 0x38
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200003ac 	.word	0x200003ac
 8002670:	40000c00 	.word	0x40000c00

08002674 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b096      	sub	sp, #88	; 0x58
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2220      	movs	r2, #32
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f005 fa9f 	bl	8007bf0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026b2:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <MX_TIM8_Init+0x184>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 80026b8:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026ba:	f240 1267 	movw	r2, #359	; 0x167
 80026be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80026c6:	4b4b      	ldr	r3, [pc, #300]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026c8:	2263      	movs	r2, #99	; 0x63
 80026ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026d2:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026de:	4845      	ldr	r0, [pc, #276]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026e0:	f003 fb00 	bl	8005ce4 <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80026ea:	f7ff f9cb 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f8:	4619      	mov	r1, r3
 80026fa:	483e      	ldr	r0, [pc, #248]	; (80027f4 <MX_TIM8_Init+0x180>)
 80026fc:	f004 f8b4 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002706:	f7ff f9bd 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800270a:	483a      	ldr	r0, [pc, #232]	; (80027f4 <MX_TIM8_Init+0x180>)
 800270c:	f003 fb9a 	bl	8005e44 <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002716:	f7ff f9b5 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002726:	4619      	mov	r1, r3
 8002728:	4832      	ldr	r0, [pc, #200]	; (80027f4 <MX_TIM8_Init+0x180>)
 800272a:	f004 fc5f 	bl	8006fec <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002734:	f7ff f9a6 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002738:	2360      	movs	r3, #96	; 0x60
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002740:	2300      	movs	r3, #0
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002744:	2300      	movs	r3, #0
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002758:	2200      	movs	r2, #0
 800275a:	4619      	mov	r1, r3
 800275c:	4825      	ldr	r0, [pc, #148]	; (80027f4 <MX_TIM8_Init+0x180>)
 800275e:	f003 ffc1 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002768:	f7ff f98c 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	2204      	movs	r2, #4
 8002772:	4619      	mov	r1, r3
 8002774:	481f      	ldr	r0, [pc, #124]	; (80027f4 <MX_TIM8_Init+0x180>)
 8002776:	f003 ffb5 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002780:	f7ff f980 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	2208      	movs	r2, #8
 800278a:	4619      	mov	r1, r3
 800278c:	4819      	ldr	r0, [pc, #100]	; (80027f4 <MX_TIM8_Init+0x180>)
 800278e:	f003 ffa9 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002798:	f7ff f974 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	220c      	movs	r2, #12
 80027a2:	4619      	mov	r1, r3
 80027a4:	4813      	ldr	r0, [pc, #76]	; (80027f4 <MX_TIM8_Init+0x180>)
 80027a6:	f003 ff9d 	bl	80066e4 <HAL_TIM_PWM_ConfigChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80027b0:	f7ff f968 	bl	8001a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <MX_TIM8_Init+0x180>)
 80027d8:	f004 fc74 	bl	80070c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80027e2:	f7ff f94f 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80027e6:	4803      	ldr	r0, [pc, #12]	; (80027f4 <MX_TIM8_Init+0x180>)
 80027e8:	f000 f884 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 80027ec:	bf00      	nop
 80027ee:	3758      	adds	r7, #88	; 0x58
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200003f4 	.word	0x200003f4
 80027f8:	40013400 	.word	0x40013400

080027fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d114      	bne.n	8002838 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280e:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	61d3      	str	r3, [r2, #28]
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2101      	movs	r1, #1
 800282a:	201c      	movs	r0, #28
 800282c:	f000 fe0f 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002830:	201c      	movs	r0, #28
 8002832:	f000 fe28 	bl	8003486 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002836:	e04e      	b.n	80028d6 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_TIM_Base_MspInit+0xe8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d114      	bne.n	800286c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	201d      	movs	r0, #29
 8002860:	f000 fdf5 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002864:	201d      	movs	r0, #29
 8002866:	f000 fe0e 	bl	8003486 <HAL_NVIC_EnableIRQ>
}
 800286a:	e034      	b.n	80028d6 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_TIM_Base_MspInit+0xec>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10c      	bne.n	8002890 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	61d3      	str	r3, [r2, #28]
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
}
 800288e:	e022      	b.n	80028d6 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM5)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a15      	ldr	r2, [pc, #84]	; (80028ec <HAL_TIM_Base_MspInit+0xf0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10c      	bne.n	80028b4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	61d3      	str	r3, [r2, #28]
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
}
 80028b2:	e010      	b.n	80028d6 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM8)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_TIM_Base_MspInit+0xf4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10b      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 80028c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028c8:	6193      	str	r3, [r2, #24]
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_TIM_Base_MspInit+0xe4>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	bf00      	nop
 80028d8:	3720      	adds	r7, #32
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800
 80028ec:	40000c00 	.word	0x40000c00
 80028f0:	40013400 	.word	0x40013400

080028f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a46      	ldr	r2, [pc, #280]	; (8002a28 <HAL_TIM_MspPostInit+0x134>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d12a      	bne.n	800296a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002914:	4b45      	ldr	r3, [pc, #276]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b42      	ldr	r3, [pc, #264]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 800292c:	2310      	movs	r3, #16
 800292e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	4619      	mov	r1, r3
 800293e:	483c      	ldr	r0, [pc, #240]	; (8002a30 <HAL_TIM_MspPostInit+0x13c>)
 8002940:	f001 f9b2 	bl	8003ca8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002944:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_TIM_MspPostInit+0x140>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002962:	4a34      	ldr	r2, [pc, #208]	; (8002a34 <HAL_TIM_MspPostInit+0x140>)
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002968:	e05a      	b.n	8002a20 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a32      	ldr	r2, [pc, #200]	; (8002a38 <HAL_TIM_MspPostInit+0x144>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d119      	bne.n	80029a8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	6193      	str	r3, [r2, #24]
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 800298c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2302      	movs	r3, #2
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4823      	ldr	r0, [pc, #140]	; (8002a30 <HAL_TIM_MspPostInit+0x13c>)
 80029a2:	f001 f981 	bl	8003ca8 <HAL_GPIO_Init>
}
 80029a6:	e03b      	b.n	8002a20 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_TIM_MspPostInit+0x148>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d118      	bne.n	80029e4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6193      	str	r3, [r2, #24]
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2302      	movs	r3, #2
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	4818      	ldr	r0, [pc, #96]	; (8002a40 <HAL_TIM_MspPostInit+0x14c>)
 80029de:	f001 f963 	bl	8003ca8 <HAL_GPIO_Init>
}
 80029e2:	e01d      	b.n	8002a20 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <HAL_TIM_MspPostInit+0x150>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d118      	bne.n	8002a20 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6193      	str	r3, [r2, #24]
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_TIM_MspPostInit+0x138>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 8002a06:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2302      	movs	r3, #2
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480b      	ldr	r0, [pc, #44]	; (8002a48 <HAL_TIM_MspPostInit+0x154>)
 8002a1c:	f001 f944 	bl	8003ca8 <HAL_GPIO_Init>
}
 8002a20:	bf00      	nop
 8002a22:	3730      	adds	r7, #48	; 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010c00 	.word	0x40010c00
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40000800 	.word	0x40000800
 8002a3c:	40000c00 	.word	0x40000c00
 8002a40:	40010800 	.word	0x40010800
 8002a44:	40013400 	.word	0x40013400
 8002a48:	40011000 	.word	0x40011000

08002a4c <buzzer_start_freq>:
 *      Author: phamv
 */

#include "tone.h"

void buzzer_start_freq(uint32_t frequency){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	if(frequency == 0) return;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d030      	beq.n	8002abc <buzzer_start_freq+0x70>
	uint32_t timer_clock = 72000000;  // Example for APB1 timer
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <buzzer_start_freq+0x78>)
 8002a5c:	60fb      	str	r3, [r7, #12]
	uint32_t prescaler = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
	uint32_t period = (timer_clock / frequency) - 1;
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	613b      	str	r3, [r7, #16]

	// Adjust prescaler if period is too large for 16-bit timer
	while (period > 65535) {
 8002a6e:	e00c      	b.n	8002a8a <buzzer_start_freq+0x3e>
		prescaler++;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
		period = (timer_clock / (prescaler + 1) / frequency) - 1;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	613b      	str	r3, [r7, #16]
	while (period > 65535) {
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d2ee      	bcs.n	8002a70 <buzzer_start_freq+0x24>
	}

	__HAL_TIM_SET_PRESCALER(&htim5, prescaler);
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <buzzer_start_freq+0x7c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim5, period);
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <buzzer_start_freq+0x7c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <buzzer_start_freq+0x7c>)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,period/2);
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <buzzer_start_freq+0x7c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	0852      	lsrs	r2, r2, #1
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); // Re-start PWM to apply changes
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4804      	ldr	r0, [pc, #16]	; (8002ac8 <buzzer_start_freq+0x7c>)
 8002ab6:	f003 fa1d 	bl	8005ef4 <HAL_TIM_PWM_Start>
 8002aba:	e000      	b.n	8002abe <buzzer_start_freq+0x72>
	if(frequency == 0) return;
 8002abc:	bf00      	nop
}
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	044aa200 	.word	0x044aa200
 8002ac8:	200003ac 	.word	0x200003ac

08002acc <buzzer_stop>:

void buzzer_stop(){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4802      	ldr	r0, [pc, #8]	; (8002adc <buzzer_stop+0x10>)
 8002ad4:	f003 fac8 	bl	8006068 <HAL_TIM_PWM_Stop>
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200003ac 	.word	0x200003ac

08002ae0 <tone_play>:

//blocking function
void tone_play(int* note, int* dur, int len){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e014      	b.n	8002b1c <tone_play+0x3c>
		buzzer_start_freq(note[i]);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ffa5 	bl	8002a4c <buzzer_start_freq>
		HAL_Delay(dur[i]);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	4413      	add	r3, r2
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 f97f 	bl	8002e10 <HAL_Delay>
		buzzer_stop();
 8002b12:	f7ff ffdb 	bl	8002acc <buzzer_stop>
	for(int i = 0; i < len; i++){
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	dbe6      	blt.n	8002af2 <tone_play+0x12>
	}
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <MX_USART1_UART_Init+0x50>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b68:	f004 fb0f 	bl	800718a <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b72:	f7fe ff87 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000043c 	.word	0x2000043c
 8002b80:	40013800 	.word	0x40013800

08002b84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <MX_USART2_UART_Init+0x50>)
 8002b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002baa:	220c      	movs	r2, #12
 8002bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bba:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <MX_USART2_UART_Init+0x4c>)
 8002bbc:	f004 fae5 	bl	800718a <HAL_UART_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bc6:	f7fe ff5d 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000484 	.word	0x20000484
 8002bd4:	40004400 	.word	0x40004400

08002bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0318 	add.w	r3, r7, #24
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3f      	ldr	r2, [pc, #252]	; (8002cf0 <HAL_UART_MspInit+0x118>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d13a      	bne.n	8002c6e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	6193      	str	r3, [r2, #24]
 8002c1c:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0318 	add.w	r3, r7, #24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	482e      	ldr	r0, [pc, #184]	; (8002cf8 <HAL_UART_MspInit+0x120>)
 8002c3e:	f001 f833 	bl	8003ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f107 0318 	add.w	r3, r7, #24
 8002c54:	4619      	mov	r1, r3
 8002c56:	4828      	ldr	r0, [pc, #160]	; (8002cf8 <HAL_UART_MspInit+0x120>)
 8002c58:	f001 f826 	bl	8003ca8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	2025      	movs	r0, #37	; 0x25
 8002c62:	f000 fbf4 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c66:	2025      	movs	r0, #37	; 0x25
 8002c68:	f000 fc0d 	bl	8003486 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c6c:	e03c      	b.n	8002ce8 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <HAL_UART_MspInit+0x124>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d137      	bne.n	8002ce8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c78:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c82:	61d3      	str	r3, [r2, #28]
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_UART_MspInit+0x11c>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 0318 	add.w	r3, r7, #24
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480f      	ldr	r0, [pc, #60]	; (8002cf8 <HAL_UART_MspInit+0x120>)
 8002cbc:	f000 fff4 	bl	8003ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	f107 0318 	add.w	r3, r7, #24
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <HAL_UART_MspInit+0x120>)
 8002cd4:	f000 ffe8 	bl	8003ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2026      	movs	r0, #38	; 0x26
 8002cde:	f000 fbb6 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ce2:	2026      	movs	r0, #38	; 0x26
 8002ce4:	f000 fbcf 	bl	8003486 <HAL_NVIC_EnableIRQ>
}
 8002ce8:	bf00      	nop
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	40004400 	.word	0x40004400

08002d00 <Reset_Handler>:
 8002d00:	f7ff faec 	bl	80022dc <SystemInit>
 8002d04:	480b      	ldr	r0, [pc, #44]	; (8002d34 <LoopFillZerobss+0xe>)
 8002d06:	490c      	ldr	r1, [pc, #48]	; (8002d38 <LoopFillZerobss+0x12>)
 8002d08:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <LoopFillZerobss+0x16>)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:
 8002d0e:	58d4      	ldr	r4, [r2, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:
 8002d14:	18c4      	adds	r4, r0, r3
 8002d16:	428c      	cmp	r4, r1
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <LoopFillZerobss+0x1a>)
 8002d1c:	4c09      	ldr	r4, [pc, #36]	; (8002d44 <LoopFillZerobss+0x1e>)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:
 8002d26:	42a2      	cmp	r2, r4
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>
 8002d2a:	f004 ff6f 	bl	8007c0c <__libc_init_array>
 8002d2e:	f7fe fda1 	bl	8001874 <main>
 8002d32:	4770      	bx	lr
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000090 	.word	0x20000090
 8002d3c:	08008478 	.word	0x08008478
 8002d40:	20000090 	.word	0x20000090
 8002d44:	20000608 	.word	0x20000608

08002d48 <ADC1_2_IRQHandler>:
 8002d48:	e7fe      	b.n	8002d48 <ADC1_2_IRQHandler>
	...

08002d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_Init+0x28>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_Init+0x28>)
 8002d56:	f043 0310 	orr.w	r3, r3, #16
 8002d5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d5c:	2003      	movs	r0, #3
 8002d5e:	f000 fb6b 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d62:	200f      	movs	r0, #15
 8002d64:	f000 f808 	bl	8002d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d68:	f7ff fa2c 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40022000 	.word	0x40022000

08002d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_InitTick+0x54>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_InitTick+0x58>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fb83 	bl	80034a2 <HAL_SYSTICK_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00e      	b.n	8002dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b0f      	cmp	r3, #15
 8002daa:	d80a      	bhi.n	8002dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dac:	2200      	movs	r2, #0
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f000 fb4b 	bl	800344e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db8:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <HAL_InitTick+0x5c>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000020 	.word	0x20000020
 8002dd0:	20000028 	.word	0x20000028
 8002dd4:	20000024 	.word	0x20000024

08002dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_IncTick+0x1c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_IncTick+0x20>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	4a03      	ldr	r2, [pc, #12]	; (8002df8 <HAL_IncTick+0x20>)
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	20000028 	.word	0x20000028
 8002df8:	200004cc 	.word	0x200004cc

08002dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002e00:	4b02      	ldr	r3, [pc, #8]	; (8002e0c <HAL_GetTick+0x10>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	200004cc 	.word	0x200004cc

08002e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff fff0 	bl	8002dfc <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d005      	beq.n	8002e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_Delay+0x44>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e36:	bf00      	nop
 8002e38:	f7ff ffe0 	bl	8002dfc <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d8f7      	bhi.n	8002e38 <HAL_Delay+0x28>
  {
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000028 	.word	0x20000028

08002e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0ce      	b.n	8003018 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fefc 	bl	8000c94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f9bd 	bl	800321c <ADC_ConversionStop_Disable>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 80a9 	bne.w	8003006 <HAL_ADC_Init+0x1ae>
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80a5 	bne.w	8003006 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec4:	f023 0302 	bic.w	r3, r3, #2
 8002ec8:	f043 0202 	orr.w	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4951      	ldr	r1, [pc, #324]	; (8003020 <HAL_ADC_Init+0x1c8>)
 8002eda:	428b      	cmp	r3, r1
 8002edc:	d10a      	bne.n	8002ef4 <HAL_ADC_Init+0x9c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ee6:	d002      	beq.n	8002eee <HAL_ADC_Init+0x96>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	e004      	b.n	8002ef8 <HAL_ADC_Init+0xa0>
 8002eee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ef2:	e001      	b.n	8002ef8 <HAL_ADC_Init+0xa0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ef8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7b1b      	ldrb	r3, [r3, #12]
 8002efe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d003      	beq.n	8002f1a <HAL_ADC_Init+0xc2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_ADC_Init+0xc8>
 8002f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f1e:	e000      	b.n	8002f22 <HAL_ADC_Init+0xca>
 8002f20:	2300      	movs	r3, #0
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7d1b      	ldrb	r3, [r3, #20]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d119      	bne.n	8002f64 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7b1b      	ldrb	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	035a      	lsls	r2, r3, #13
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e00b      	b.n	8002f64 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_ADC_Init+0x1cc>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d003      	beq.n	8002f9e <HAL_ADC_Init+0x146>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d104      	bne.n	8002fa8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	051b      	lsls	r3, r3, #20
 8002fa6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_ADC_Init+0x1d0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fe2:	e018      	b.n	8003016 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	f023 0312 	bic.w	r3, r3, #18
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003004:	e007      	b.n	8003016 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f043 0210 	orr.w	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40013c00 	.word	0x40013c00
 8003024:	ffe1f7fd 	.word	0xffe1f7fd
 8003028:	ff1f0efe 	.word	0xff1f0efe

0800302c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x20>
 8003048:	2302      	movs	r3, #2
 800304a:	e0dc      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1da>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b06      	cmp	r3, #6
 800305a:	d81c      	bhi.n	8003096 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b05      	subs	r3, #5
 800306e:	221f      	movs	r2, #31
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	4019      	ands	r1, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3b05      	subs	r3, #5
 8003088:	fa00 f203 	lsl.w	r2, r0, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	635a      	str	r2, [r3, #52]	; 0x34
 8003094:	e03c      	b.n	8003110 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d81c      	bhi.n	80030d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b23      	subs	r3, #35	; 0x23
 80030b0:	221f      	movs	r2, #31
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	4019      	ands	r1, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	3b23      	subs	r3, #35	; 0x23
 80030ca:	fa00 f203 	lsl.w	r2, r0, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
 80030d6:	e01b      	b.n	8003110 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	3b41      	subs	r3, #65	; 0x41
 80030ea:	221f      	movs	r2, #31
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	4019      	ands	r1, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	3b41      	subs	r3, #65	; 0x41
 8003104:	fa00 f203 	lsl.w	r2, r0, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b09      	cmp	r3, #9
 8003116:	d91c      	bls.n	8003152 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68d9      	ldr	r1, [r3, #12]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	3b1e      	subs	r3, #30
 800312a:	2207      	movs	r2, #7
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	4019      	ands	r1, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6898      	ldr	r0, [r3, #8]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	3b1e      	subs	r3, #30
 8003144:	fa00 f203 	lsl.w	r2, r0, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e019      	b.n	8003186 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6919      	ldr	r1, [r3, #16]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	2207      	movs	r2, #7
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	4019      	ands	r1, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6898      	ldr	r0, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	fa00 f203 	lsl.w	r2, r0, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b10      	cmp	r3, #16
 800318c:	d003      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003192:	2b11      	cmp	r3, #17
 8003194:	d132      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <HAL_ADC_ConfigChannel+0x1e4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d125      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d126      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d11a      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_ADC_ConfigChannel+0x1e8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a13      	ldr	r2, [pc, #76]	; (8003218 <HAL_ADC_ConfigChannel+0x1ec>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	0c9a      	lsrs	r2, r3, #18
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f9      	bne.n	80031de <HAL_ADC_ConfigChannel+0x1b2>
 80031ea:	e007      	b.n	80031fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40012400 	.word	0x40012400
 8003214:	20000020 	.word	0x20000020
 8003218:	431bde83 	.word	0x431bde83

0800321c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d12e      	bne.n	8003294 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003246:	f7ff fdd9 	bl	8002dfc <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800324c:	e01b      	b.n	8003286 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800324e:	f7ff fdd5 	bl	8002dfc <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d914      	bls.n	8003286 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10d      	bne.n	8003286 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e007      	b.n	8003296 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d0dc      	beq.n	800324e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032bc:	4013      	ands	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	60d3      	str	r3, [r2, #12]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <__NVIC_GetPriorityGrouping+0x18>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	f003 0307 	and.w	r3, r3, #7
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db0b      	blt.n	800332e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4906      	ldr	r1, [pc, #24]	; (8003338 <__NVIC_EnableIRQ+0x34>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	db0a      	blt.n	8003366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	490c      	ldr	r1, [pc, #48]	; (8003388 <__NVIC_SetPriority+0x4c>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	440b      	add	r3, r1
 8003360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003364:	e00a      	b.n	800337c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4908      	ldr	r1, [pc, #32]	; (800338c <__NVIC_SetPriority+0x50>)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	3b04      	subs	r3, #4
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	440b      	add	r3, r1
 800337a:	761a      	strb	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f1c3 0307 	rsb	r3, r3, #7
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	bf28      	it	cs
 80033ae:	2304      	movcs	r3, #4
 80033b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d902      	bls.n	80033c0 <NVIC_EncodePriority+0x30>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3b03      	subs	r3, #3
 80033be:	e000      	b.n	80033c2 <NVIC_EncodePriority+0x32>
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	401a      	ands	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43d9      	mvns	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	4313      	orrs	r3, r2
         );
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003404:	d301      	bcc.n	800340a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <SysTick_Config+0x40>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003412:	210f      	movs	r1, #15
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f7ff ff90 	bl	800333c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <SysTick_Config+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <SysTick_Config+0x40>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010

08003438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff2d 	bl	80032a0 <__NVIC_SetPriorityGrouping>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003460:	f7ff ff42 	bl	80032e8 <__NVIC_GetPriorityGrouping>
 8003464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	6978      	ldr	r0, [r7, #20]
 800346c:	f7ff ff90 	bl	8003390 <NVIC_EncodePriority>
 8003470:	4602      	mov	r2, r0
 8003472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff5f 	bl	800333c <__NVIC_SetPriority>
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff35 	bl	8003304 <__NVIC_EnableIRQ>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ffa2 	bl	80033f4 <SysTick_Config>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e059      	b.n	8003586 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b2d      	ldr	r3, [pc, #180]	; (8003590 <HAL_DMA_Init+0xd4>)
 80034da:	429a      	cmp	r2, r3
 80034dc:	d80f      	bhi.n	80034fe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_DMA_Init+0xd8>)
 80034e6:	4413      	add	r3, r2
 80034e8:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <HAL_DMA_Init+0xdc>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	009a      	lsls	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_DMA_Init+0xe0>)
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80034fc:	e00e      	b.n	800351c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_DMA_Init+0xe4>)
 8003506:	4413      	add	r3, r2
 8003508:	4a23      	ldr	r2, [pc, #140]	; (8003598 <HAL_DMA_Init+0xdc>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	009a      	lsls	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <HAL_DMA_Init+0xe8>)
 800351a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003532:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003536:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40020407 	.word	0x40020407
 8003594:	bffdfff8 	.word	0xbffdfff8
 8003598:	cccccccd 	.word	0xcccccccd
 800359c:	40020000 	.word	0x40020000
 80035a0:	bffdfbf8 	.word	0xbffdfbf8
 80035a4:	40020400 	.word	0x40020400

080035a8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d008      	beq.n	80035d2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2204      	movs	r2, #4
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e020      	b.n	8003614 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 020e 	bic.w	r2, r2, #14
 80035e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003600:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
	...

08003620 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d005      	beq.n	8003644 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	e0d6      	b.n	80037f2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 020e 	bic.w	r2, r2, #14
 8003652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_DMA_Abort_IT+0x1dc>)
 800366c:	429a      	cmp	r2, r3
 800366e:	d958      	bls.n	8003722 <HAL_DMA_Abort_IT+0x102>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a62      	ldr	r2, [pc, #392]	; (8003800 <HAL_DMA_Abort_IT+0x1e0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d04f      	beq.n	800371a <HAL_DMA_Abort_IT+0xfa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a61      	ldr	r2, [pc, #388]	; (8003804 <HAL_DMA_Abort_IT+0x1e4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d048      	beq.n	8003716 <HAL_DMA_Abort_IT+0xf6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5f      	ldr	r2, [pc, #380]	; (8003808 <HAL_DMA_Abort_IT+0x1e8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d040      	beq.n	8003710 <HAL_DMA_Abort_IT+0xf0>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5e      	ldr	r2, [pc, #376]	; (800380c <HAL_DMA_Abort_IT+0x1ec>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d038      	beq.n	800370a <HAL_DMA_Abort_IT+0xea>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5c      	ldr	r2, [pc, #368]	; (8003810 <HAL_DMA_Abort_IT+0x1f0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d030      	beq.n	8003704 <HAL_DMA_Abort_IT+0xe4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5b      	ldr	r2, [pc, #364]	; (8003814 <HAL_DMA_Abort_IT+0x1f4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d028      	beq.n	80036fe <HAL_DMA_Abort_IT+0xde>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_DMA_Abort_IT+0x1dc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d020      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xd8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a57      	ldr	r2, [pc, #348]	; (8003818 <HAL_DMA_Abort_IT+0x1f8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d019      	beq.n	80036f4 <HAL_DMA_Abort_IT+0xd4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a55      	ldr	r2, [pc, #340]	; (800381c <HAL_DMA_Abort_IT+0x1fc>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d012      	beq.n	80036f0 <HAL_DMA_Abort_IT+0xd0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a54      	ldr	r2, [pc, #336]	; (8003820 <HAL_DMA_Abort_IT+0x200>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00a      	beq.n	80036ea <HAL_DMA_Abort_IT+0xca>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a52      	ldr	r2, [pc, #328]	; (8003824 <HAL_DMA_Abort_IT+0x204>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d102      	bne.n	80036e4 <HAL_DMA_Abort_IT+0xc4>
 80036de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e2:	e01b      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 80036e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e8:	e018      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 80036ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ee:	e015      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 80036f0:	2310      	movs	r3, #16
 80036f2:	e013      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e011      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 80036f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036fc:	e00e      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 80036fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003702:	e00b      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 8003704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003708:	e008      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 800370a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370e:	e005      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 8003710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003714:	e002      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 8003716:	2310      	movs	r3, #16
 8003718:	e000      	b.n	800371c <HAL_DMA_Abort_IT+0xfc>
 800371a:	2301      	movs	r3, #1
 800371c:	4a42      	ldr	r2, [pc, #264]	; (8003828 <HAL_DMA_Abort_IT+0x208>)
 800371e:	6053      	str	r3, [r2, #4]
 8003720:	e057      	b.n	80037d2 <HAL_DMA_Abort_IT+0x1b2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a36      	ldr	r2, [pc, #216]	; (8003800 <HAL_DMA_Abort_IT+0x1e0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04f      	beq.n	80037cc <HAL_DMA_Abort_IT+0x1ac>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a34      	ldr	r2, [pc, #208]	; (8003804 <HAL_DMA_Abort_IT+0x1e4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d048      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x1a8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a33      	ldr	r2, [pc, #204]	; (8003808 <HAL_DMA_Abort_IT+0x1e8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_Abort_IT+0x1a2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a31      	ldr	r2, [pc, #196]	; (800380c <HAL_DMA_Abort_IT+0x1ec>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d038      	beq.n	80037bc <HAL_DMA_Abort_IT+0x19c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a30      	ldr	r2, [pc, #192]	; (8003810 <HAL_DMA_Abort_IT+0x1f0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d030      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x196>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HAL_DMA_Abort_IT+0x1f4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d028      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x190>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_DMA_Abort_IT+0x1dc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d020      	beq.n	80037aa <HAL_DMA_Abort_IT+0x18a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_DMA_Abort_IT+0x1f8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x186>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a29      	ldr	r2, [pc, #164]	; (800381c <HAL_DMA_Abort_IT+0x1fc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_Abort_IT+0x182>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_DMA_Abort_IT+0x200>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00a      	beq.n	800379c <HAL_DMA_Abort_IT+0x17c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_DMA_Abort_IT+0x204>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d102      	bne.n	8003796 <HAL_DMA_Abort_IT+0x176>
 8003790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003794:	e01b      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 8003796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800379a:	e018      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 800379c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a0:	e015      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037a2:	2310      	movs	r3, #16
 80037a4:	e013      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e011      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ae:	e00e      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037b4:	e00b      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ba:	e008      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c0:	e005      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c6:	e002      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037c8:	2310      	movs	r3, #16
 80037ca:	e000      	b.n	80037ce <HAL_DMA_Abort_IT+0x1ae>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_DMA_Abort_IT+0x20c>)
 80037d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
    } 
  }
  return status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40020080 	.word	0x40020080
 8003800:	40020008 	.word	0x40020008
 8003804:	4002001c 	.word	0x4002001c
 8003808:	40020030 	.word	0x40020030
 800380c:	40020044 	.word	0x40020044
 8003810:	40020058 	.word	0x40020058
 8003814:	4002006c 	.word	0x4002006c
 8003818:	40020408 	.word	0x40020408
 800381c:	4002041c 	.word	0x4002041c
 8003820:	40020430 	.word	0x40020430
 8003824:	40020444 	.word	0x40020444
 8003828:	40020400 	.word	0x40020400
 800382c:	40020000 	.word	0x40020000

08003830 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	2204      	movs	r2, #4
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80f1 	beq.w	8003a3c <HAL_DMA_IRQHandler+0x20c>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80eb 	beq.w	8003a3c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0204 	bic.w	r2, r2, #4
 8003882:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b5f      	ldr	r3, [pc, #380]	; (8003a08 <HAL_DMA_IRQHandler+0x1d8>)
 800388c:	429a      	cmp	r2, r3
 800388e:	d958      	bls.n	8003942 <HAL_DMA_IRQHandler+0x112>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5d      	ldr	r2, [pc, #372]	; (8003a0c <HAL_DMA_IRQHandler+0x1dc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04f      	beq.n	800393a <HAL_DMA_IRQHandler+0x10a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <HAL_DMA_IRQHandler+0x1e0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d048      	beq.n	8003936 <HAL_DMA_IRQHandler+0x106>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a5a      	ldr	r2, [pc, #360]	; (8003a14 <HAL_DMA_IRQHandler+0x1e4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d040      	beq.n	8003930 <HAL_DMA_IRQHandler+0x100>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a59      	ldr	r2, [pc, #356]	; (8003a18 <HAL_DMA_IRQHandler+0x1e8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d038      	beq.n	800392a <HAL_DMA_IRQHandler+0xfa>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_DMA_IRQHandler+0x1ec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d030      	beq.n	8003924 <HAL_DMA_IRQHandler+0xf4>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a56      	ldr	r2, [pc, #344]	; (8003a20 <HAL_DMA_IRQHandler+0x1f0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d028      	beq.n	800391e <HAL_DMA_IRQHandler+0xee>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a4d      	ldr	r2, [pc, #308]	; (8003a08 <HAL_DMA_IRQHandler+0x1d8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d020      	beq.n	8003918 <HAL_DMA_IRQHandler+0xe8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_DMA_IRQHandler+0x1f4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d019      	beq.n	8003914 <HAL_DMA_IRQHandler+0xe4>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a50      	ldr	r2, [pc, #320]	; (8003a28 <HAL_DMA_IRQHandler+0x1f8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d012      	beq.n	8003910 <HAL_DMA_IRQHandler+0xe0>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4f      	ldr	r2, [pc, #316]	; (8003a2c <HAL_DMA_IRQHandler+0x1fc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00a      	beq.n	800390a <HAL_DMA_IRQHandler+0xda>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a4d      	ldr	r2, [pc, #308]	; (8003a30 <HAL_DMA_IRQHandler+0x200>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d102      	bne.n	8003904 <HAL_DMA_IRQHandler+0xd4>
 80038fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003902:	e01b      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 8003904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003908:	e018      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 800390a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800390e:	e015      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 8003910:	2340      	movs	r3, #64	; 0x40
 8003912:	e013      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 8003914:	2304      	movs	r3, #4
 8003916:	e011      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 8003918:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800391c:	e00e      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 800391e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003922:	e00b      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 8003924:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003928:	e008      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 800392a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800392e:	e005      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 8003930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003934:	e002      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 8003936:	2340      	movs	r3, #64	; 0x40
 8003938:	e000      	b.n	800393c <HAL_DMA_IRQHandler+0x10c>
 800393a:	2304      	movs	r3, #4
 800393c:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <HAL_DMA_IRQHandler+0x204>)
 800393e:	6053      	str	r3, [r2, #4]
 8003940:	e057      	b.n	80039f2 <HAL_DMA_IRQHandler+0x1c2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <HAL_DMA_IRQHandler+0x1dc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d04f      	beq.n	80039ec <HAL_DMA_IRQHandler+0x1bc>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <HAL_DMA_IRQHandler+0x1e0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d048      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x1b8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2e      	ldr	r2, [pc, #184]	; (8003a14 <HAL_DMA_IRQHandler+0x1e4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d040      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x1b2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2c      	ldr	r2, [pc, #176]	; (8003a18 <HAL_DMA_IRQHandler+0x1e8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d038      	beq.n	80039dc <HAL_DMA_IRQHandler+0x1ac>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2b      	ldr	r2, [pc, #172]	; (8003a1c <HAL_DMA_IRQHandler+0x1ec>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d030      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x1a6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <HAL_DMA_IRQHandler+0x1f0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d028      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x1a0>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_DMA_IRQHandler+0x1d8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d020      	beq.n	80039ca <HAL_DMA_IRQHandler+0x19a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <HAL_DMA_IRQHandler+0x1f4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d019      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x196>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <HAL_DMA_IRQHandler+0x1f8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d012      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x192>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_DMA_IRQHandler+0x1fc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00a      	beq.n	80039bc <HAL_DMA_IRQHandler+0x18c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <HAL_DMA_IRQHandler+0x200>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d102      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x186>
 80039b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039b4:	e01b      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039ba:	e018      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c0:	e015      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039c2:	2340      	movs	r3, #64	; 0x40
 80039c4:	e013      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039c6:	2304      	movs	r3, #4
 80039c8:	e011      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039ce:	e00e      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039d4:	e00b      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039da:	e008      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039e0:	e005      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e6:	e002      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039e8:	2340      	movs	r3, #64	; 0x40
 80039ea:	e000      	b.n	80039ee <HAL_DMA_IRQHandler+0x1be>
 80039ec:	2304      	movs	r3, #4
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <HAL_DMA_IRQHandler+0x208>)
 80039f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8136 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a04:	e130      	b.n	8003c68 <HAL_DMA_IRQHandler+0x438>
 8003a06:	bf00      	nop
 8003a08:	40020080 	.word	0x40020080
 8003a0c:	40020008 	.word	0x40020008
 8003a10:	4002001c 	.word	0x4002001c
 8003a14:	40020030 	.word	0x40020030
 8003a18:	40020044 	.word	0x40020044
 8003a1c:	40020058 	.word	0x40020058
 8003a20:	4002006c 	.word	0x4002006c
 8003a24:	40020408 	.word	0x40020408
 8003a28:	4002041c 	.word	0x4002041c
 8003a2c:	40020430 	.word	0x40020430
 8003a30:	40020444 	.word	0x40020444
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2202      	movs	r2, #2
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80dd 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x3d8>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80d7 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020a 	bic.w	r2, r2, #10
 8003a76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b7b      	ldr	r3, [pc, #492]	; (8003c74 <HAL_DMA_IRQHandler+0x444>)
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d958      	bls.n	8003b3e <HAL_DMA_IRQHandler+0x30e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a79      	ldr	r2, [pc, #484]	; (8003c78 <HAL_DMA_IRQHandler+0x448>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04f      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x306>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a78      	ldr	r2, [pc, #480]	; (8003c7c <HAL_DMA_IRQHandler+0x44c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d048      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x302>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a76      	ldr	r2, [pc, #472]	; (8003c80 <HAL_DMA_IRQHandler+0x450>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x2fc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a75      	ldr	r2, [pc, #468]	; (8003c84 <HAL_DMA_IRQHandler+0x454>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d038      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x2f6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a73      	ldr	r2, [pc, #460]	; (8003c88 <HAL_DMA_IRQHandler+0x458>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d030      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x2f0>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a72      	ldr	r2, [pc, #456]	; (8003c8c <HAL_DMA_IRQHandler+0x45c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d028      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ea>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a69      	ldr	r2, [pc, #420]	; (8003c74 <HAL_DMA_IRQHandler+0x444>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d020      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x2e4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6e      	ldr	r2, [pc, #440]	; (8003c90 <HAL_DMA_IRQHandler+0x460>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d019      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x2e0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6c      	ldr	r2, [pc, #432]	; (8003c94 <HAL_DMA_IRQHandler+0x464>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d012      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x2dc>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6b      	ldr	r2, [pc, #428]	; (8003c98 <HAL_DMA_IRQHandler+0x468>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00a      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2d6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a69      	ldr	r2, [pc, #420]	; (8003c9c <HAL_DMA_IRQHandler+0x46c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d102      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x2d0>
 8003afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003afe:	e01b      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b04:	e018      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0a:	e015      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	e013      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e011      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b18:	e00e      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b1e:	e00b      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b24:	e008      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b2a:	e005      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b30:	e002      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b32:	2320      	movs	r3, #32
 8003b34:	e000      	b.n	8003b38 <HAL_DMA_IRQHandler+0x308>
 8003b36:	2302      	movs	r3, #2
 8003b38:	4a59      	ldr	r2, [pc, #356]	; (8003ca0 <HAL_DMA_IRQHandler+0x470>)
 8003b3a:	6053      	str	r3, [r2, #4]
 8003b3c:	e057      	b.n	8003bee <HAL_DMA_IRQHandler+0x3be>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a4d      	ldr	r2, [pc, #308]	; (8003c78 <HAL_DMA_IRQHandler+0x448>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d04f      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x3b8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a4b      	ldr	r2, [pc, #300]	; (8003c7c <HAL_DMA_IRQHandler+0x44c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d048      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x3b4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_DMA_IRQHandler+0x450>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d040      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3ae>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a48      	ldr	r2, [pc, #288]	; (8003c84 <HAL_DMA_IRQHandler+0x454>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d038      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x3a8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a47      	ldr	r2, [pc, #284]	; (8003c88 <HAL_DMA_IRQHandler+0x458>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d030      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x3a2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a45      	ldr	r2, [pc, #276]	; (8003c8c <HAL_DMA_IRQHandler+0x45c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d028      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x39c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a3d      	ldr	r2, [pc, #244]	; (8003c74 <HAL_DMA_IRQHandler+0x444>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d020      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x396>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a41      	ldr	r2, [pc, #260]	; (8003c90 <HAL_DMA_IRQHandler+0x460>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d019      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x392>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a40      	ldr	r2, [pc, #256]	; (8003c94 <HAL_DMA_IRQHandler+0x464>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d012      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x38e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a3e      	ldr	r2, [pc, #248]	; (8003c98 <HAL_DMA_IRQHandler+0x468>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x388>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3d      	ldr	r2, [pc, #244]	; (8003c9c <HAL_DMA_IRQHandler+0x46c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d102      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x382>
 8003bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb0:	e01b      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb6:	e018      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bbc:	e015      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	e013      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e011      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bca:	e00e      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bd0:	e00b      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd6:	e008      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bdc:	e005      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003be2:	e002      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003be4:	2320      	movs	r3, #32
 8003be6:	e000      	b.n	8003bea <HAL_DMA_IRQHandler+0x3ba>
 8003be8:	2302      	movs	r3, #2
 8003bea:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_DMA_IRQHandler+0x474>)
 8003bec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d034      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c06:	e02f      	b.n	8003c68 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d028      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x43a>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d023      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 020e 	bic.w	r2, r2, #14
 8003c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
    }
  }
  return;
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
}
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40020080 	.word	0x40020080
 8003c78:	40020008 	.word	0x40020008
 8003c7c:	4002001c 	.word	0x4002001c
 8003c80:	40020030 	.word	0x40020030
 8003c84:	40020044 	.word	0x40020044
 8003c88:	40020058 	.word	0x40020058
 8003c8c:	4002006c 	.word	0x4002006c
 8003c90:	40020408 	.word	0x40020408
 8003c94:	4002041c 	.word	0x4002041c
 8003c98:	40020430 	.word	0x40020430
 8003c9c:	40020444 	.word	0x40020444
 8003ca0:	40020400 	.word	0x40020400
 8003ca4:	40020000 	.word	0x40020000

08003ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b08b      	sub	sp, #44	; 0x2c
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cba:	e179      	b.n	8003fb0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	f040 8168 	bne.w	8003faa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a96      	ldr	r2, [pc, #600]	; (8003f38 <HAL_GPIO_Init+0x290>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d05e      	beq.n	8003da2 <HAL_GPIO_Init+0xfa>
 8003ce4:	4a94      	ldr	r2, [pc, #592]	; (8003f38 <HAL_GPIO_Init+0x290>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d875      	bhi.n	8003dd6 <HAL_GPIO_Init+0x12e>
 8003cea:	4a94      	ldr	r2, [pc, #592]	; (8003f3c <HAL_GPIO_Init+0x294>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d058      	beq.n	8003da2 <HAL_GPIO_Init+0xfa>
 8003cf0:	4a92      	ldr	r2, [pc, #584]	; (8003f3c <HAL_GPIO_Init+0x294>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d86f      	bhi.n	8003dd6 <HAL_GPIO_Init+0x12e>
 8003cf6:	4a92      	ldr	r2, [pc, #584]	; (8003f40 <HAL_GPIO_Init+0x298>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d052      	beq.n	8003da2 <HAL_GPIO_Init+0xfa>
 8003cfc:	4a90      	ldr	r2, [pc, #576]	; (8003f40 <HAL_GPIO_Init+0x298>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d869      	bhi.n	8003dd6 <HAL_GPIO_Init+0x12e>
 8003d02:	4a90      	ldr	r2, [pc, #576]	; (8003f44 <HAL_GPIO_Init+0x29c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d04c      	beq.n	8003da2 <HAL_GPIO_Init+0xfa>
 8003d08:	4a8e      	ldr	r2, [pc, #568]	; (8003f44 <HAL_GPIO_Init+0x29c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d863      	bhi.n	8003dd6 <HAL_GPIO_Init+0x12e>
 8003d0e:	4a8e      	ldr	r2, [pc, #568]	; (8003f48 <HAL_GPIO_Init+0x2a0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d046      	beq.n	8003da2 <HAL_GPIO_Init+0xfa>
 8003d14:	4a8c      	ldr	r2, [pc, #560]	; (8003f48 <HAL_GPIO_Init+0x2a0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d85d      	bhi.n	8003dd6 <HAL_GPIO_Init+0x12e>
 8003d1a:	2b12      	cmp	r3, #18
 8003d1c:	d82a      	bhi.n	8003d74 <HAL_GPIO_Init+0xcc>
 8003d1e:	2b12      	cmp	r3, #18
 8003d20:	d859      	bhi.n	8003dd6 <HAL_GPIO_Init+0x12e>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <HAL_GPIO_Init+0x80>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003da3 	.word	0x08003da3
 8003d2c:	08003d7d 	.word	0x08003d7d
 8003d30:	08003d8f 	.word	0x08003d8f
 8003d34:	08003dd1 	.word	0x08003dd1
 8003d38:	08003dd7 	.word	0x08003dd7
 8003d3c:	08003dd7 	.word	0x08003dd7
 8003d40:	08003dd7 	.word	0x08003dd7
 8003d44:	08003dd7 	.word	0x08003dd7
 8003d48:	08003dd7 	.word	0x08003dd7
 8003d4c:	08003dd7 	.word	0x08003dd7
 8003d50:	08003dd7 	.word	0x08003dd7
 8003d54:	08003dd7 	.word	0x08003dd7
 8003d58:	08003dd7 	.word	0x08003dd7
 8003d5c:	08003dd7 	.word	0x08003dd7
 8003d60:	08003dd7 	.word	0x08003dd7
 8003d64:	08003dd7 	.word	0x08003dd7
 8003d68:	08003dd7 	.word	0x08003dd7
 8003d6c:	08003d85 	.word	0x08003d85
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <HAL_GPIO_Init+0x2a4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d7a:	e02c      	b.n	8003dd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	623b      	str	r3, [r7, #32]
          break;
 8003d82:	e029      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	623b      	str	r3, [r7, #32]
          break;
 8003d8c:	e024      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	3308      	adds	r3, #8
 8003d94:	623b      	str	r3, [r7, #32]
          break;
 8003d96:	e01f      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	623b      	str	r3, [r7, #32]
          break;
 8003da0:	e01a      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003daa:	2304      	movs	r3, #4
 8003dac:	623b      	str	r3, [r7, #32]
          break;
 8003dae:	e013      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db8:	2308      	movs	r3, #8
 8003dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	611a      	str	r2, [r3, #16]
          break;
 8003dc2:	e009      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	615a      	str	r2, [r3, #20]
          break;
 8003dce:	e003      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
          break;
 8003dd4:	e000      	b.n	8003dd8 <HAL_GPIO_Init+0x130>
          break;
 8003dd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2bff      	cmp	r3, #255	; 0xff
 8003ddc:	d801      	bhi.n	8003de2 <HAL_GPIO_Init+0x13a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	e001      	b.n	8003de6 <HAL_GPIO_Init+0x13e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2bff      	cmp	r3, #255	; 0xff
 8003dec:	d802      	bhi.n	8003df4 <HAL_GPIO_Init+0x14c>
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	e002      	b.n	8003dfa <HAL_GPIO_Init+0x152>
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	3b08      	subs	r3, #8
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	210f      	movs	r1, #15
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	6a39      	ldr	r1, [r7, #32]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	fa01 f303 	lsl.w	r3, r1, r3
 8003e14:	431a      	orrs	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80c1 	beq.w	8003faa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_GPIO_Init+0x2a8>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	4a48      	ldr	r2, [pc, #288]	; (8003f50 <HAL_GPIO_Init+0x2a8>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6193      	str	r3, [r2, #24]
 8003e34:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <HAL_GPIO_Init+0x2a8>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e40:	4a44      	ldr	r2, [pc, #272]	; (8003f54 <HAL_GPIO_Init+0x2ac>)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	3302      	adds	r3, #2
 8003e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	220f      	movs	r2, #15
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4013      	ands	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <HAL_GPIO_Init+0x2b0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01f      	beq.n	8003eac <HAL_GPIO_Init+0x204>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3b      	ldr	r2, [pc, #236]	; (8003f5c <HAL_GPIO_Init+0x2b4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d019      	beq.n	8003ea8 <HAL_GPIO_Init+0x200>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3a      	ldr	r2, [pc, #232]	; (8003f60 <HAL_GPIO_Init+0x2b8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_GPIO_Init+0x1fc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a39      	ldr	r2, [pc, #228]	; (8003f64 <HAL_GPIO_Init+0x2bc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00d      	beq.n	8003ea0 <HAL_GPIO_Init+0x1f8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <HAL_GPIO_Init+0x2c0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <HAL_GPIO_Init+0x1f4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a37      	ldr	r2, [pc, #220]	; (8003f6c <HAL_GPIO_Init+0x2c4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d101      	bne.n	8003e98 <HAL_GPIO_Init+0x1f0>
 8003e94:	2305      	movs	r3, #5
 8003e96:	e00a      	b.n	8003eae <HAL_GPIO_Init+0x206>
 8003e98:	2306      	movs	r3, #6
 8003e9a:	e008      	b.n	8003eae <HAL_GPIO_Init+0x206>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	e006      	b.n	8003eae <HAL_GPIO_Init+0x206>
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e004      	b.n	8003eae <HAL_GPIO_Init+0x206>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e002      	b.n	8003eae <HAL_GPIO_Init+0x206>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_GPIO_Init+0x206>
 8003eac:	2300      	movs	r3, #0
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	f002 0203 	and.w	r2, r2, #3
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	4093      	lsls	r3, r2
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ebe:	4925      	ldr	r1, [pc, #148]	; (8003f54 <HAL_GPIO_Init+0x2ac>)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4924      	ldr	r1, [pc, #144]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]
 8003ee4:	e006      	b.n	8003ef4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	4920      	ldr	r1, [pc, #128]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	491a      	ldr	r1, [pc, #104]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60cb      	str	r3, [r1, #12]
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f0e:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d025      	beq.n	8003f74 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4910      	ldr	r1, [pc, #64]	; (8003f70 <HAL_GPIO_Init+0x2c8>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
 8003f34:	e025      	b.n	8003f82 <HAL_GPIO_Init+0x2da>
 8003f36:	bf00      	nop
 8003f38:	10320000 	.word	0x10320000
 8003f3c:	10310000 	.word	0x10310000
 8003f40:	10220000 	.word	0x10220000
 8003f44:	10210000 	.word	0x10210000
 8003f48:	10120000 	.word	0x10120000
 8003f4c:	10110000 	.word	0x10110000
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40010800 	.word	0x40010800
 8003f5c:	40010c00 	.word	0x40010c00
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40011400 	.word	0x40011400
 8003f68:	40011800 	.word	0x40011800
 8003f6c:	40011c00 	.word	0x40011c00
 8003f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4913      	ldr	r1, [pc, #76]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	490e      	ldr	r1, [pc, #56]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]
 8003f9a:	e006      	b.n	8003faa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	4909      	ldr	r1, [pc, #36]	; (8003fcc <HAL_GPIO_Init+0x324>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	3301      	adds	r3, #1
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f47f ae7e 	bne.w	8003cbc <HAL_GPIO_Init+0x14>
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	372c      	adds	r7, #44	; 0x2c
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	40010400 	.word	0x40010400

08003fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fe0:	787b      	ldrb	r3, [r7, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fec:	e003      	b.n	8003ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4013      	ands	r3, r2
 8004018:	041a      	lsls	r2, r3, #16
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43d9      	mvns	r1, r3
 800401e:	887b      	ldrh	r3, [r7, #2]
 8004020:	400b      	ands	r3, r1
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	611a      	str	r2, [r3, #16]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
	...

08004034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e12b      	b.n	800429e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fbca 	bl	80017f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004098:	f001 faba 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4a81      	ldr	r2, [pc, #516]	; (80042a8 <HAL_I2C_Init+0x274>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d807      	bhi.n	80040b8 <HAL_I2C_Init+0x84>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a80      	ldr	r2, [pc, #512]	; (80042ac <HAL_I2C_Init+0x278>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e006      	b.n	80040c6 <HAL_I2C_Init+0x92>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a7d      	ldr	r2, [pc, #500]	; (80042b0 <HAL_I2C_Init+0x27c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	bf94      	ite	ls
 80040c0:	2301      	movls	r3, #1
 80040c2:	2300      	movhi	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0e7      	b.n	800429e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a78      	ldr	r2, [pc, #480]	; (80042b4 <HAL_I2C_Init+0x280>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0c9b      	lsrs	r3, r3, #18
 80040d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a6a      	ldr	r2, [pc, #424]	; (80042a8 <HAL_I2C_Init+0x274>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d802      	bhi.n	8004108 <HAL_I2C_Init+0xd4>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3301      	adds	r3, #1
 8004106:	e009      	b.n	800411c <HAL_I2C_Init+0xe8>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	4a69      	ldr	r2, [pc, #420]	; (80042b8 <HAL_I2C_Init+0x284>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	3301      	adds	r3, #1
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800412e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	495c      	ldr	r1, [pc, #368]	; (80042a8 <HAL_I2C_Init+0x274>)
 8004138:	428b      	cmp	r3, r1
 800413a:	d819      	bhi.n	8004170 <HAL_I2C_Init+0x13c>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e59      	subs	r1, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fbb1 f3f3 	udiv	r3, r1, r3
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004150:	400b      	ands	r3, r1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_I2C_Init+0x138>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1e59      	subs	r1, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fbb1 f3f3 	udiv	r3, r1, r3
 8004164:	3301      	adds	r3, #1
 8004166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416a:	e051      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 800416c:	2304      	movs	r3, #4
 800416e:	e04f      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d111      	bne.n	800419c <HAL_I2C_Init+0x168>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	440b      	add	r3, r1
 8004186:	fbb0 f3f3 	udiv	r3, r0, r3
 800418a:	3301      	adds	r3, #1
 800418c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e012      	b.n	80041c2 <HAL_I2C_Init+0x18e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e58      	subs	r0, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	0099      	lsls	r1, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Init+0x196>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e022      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10e      	bne.n	80041f0 <HAL_I2C_Init+0x1bc>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e58      	subs	r0, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	440b      	add	r3, r1
 80041e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ee:	e00f      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e58      	subs	r0, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	0099      	lsls	r1, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	fbb0 f3f3 	udiv	r3, r0, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	6809      	ldr	r1, [r1, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800423e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6911      	ldr	r1, [r2, #16]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68d2      	ldr	r2, [r2, #12]
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	430b      	orrs	r3, r1
 8004252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	000186a0 	.word	0x000186a0
 80042ac:	001e847f 	.word	0x001e847f
 80042b0:	003d08ff 	.word	0x003d08ff
 80042b4:	431bde83 	.word	0x431bde83
 80042b8:	10624dd3 	.word	0x10624dd3

080042bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	460b      	mov	r3, r1
 80042ca:	817b      	strh	r3, [r7, #10]
 80042cc:	4613      	mov	r3, r2
 80042ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042d4:	f7fe fd92 	bl	8002dfc <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	f040 824b 	bne.w	800477e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2319      	movs	r3, #25
 80042ee:	2201      	movs	r2, #1
 80042f0:	497f      	ldr	r1, [pc, #508]	; (80044f0 <HAL_I2C_Master_Receive+0x234>)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fc4a 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
 8004300:	e23e      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_I2C_Master_Receive+0x54>
 800430c:	2302      	movs	r3, #2
 800430e:	e237      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d007      	beq.n	8004336 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004344:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2222      	movs	r2, #34	; 0x22
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2210      	movs	r2, #16
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	893a      	ldrh	r2, [r7, #8]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a5f      	ldr	r2, [pc, #380]	; (80044f4 <HAL_I2C_Master_Receive+0x238>)
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004378:	8979      	ldrh	r1, [r7, #10]
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fb36 	bl	80049f0 <I2C_MasterRequestRead>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e1f8      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e1cc      	b.n	8004758 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d11e      	bne.n	8004404 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043d6:	b672      	cpsid	i
}
 80043d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004400:	b662      	cpsie	i
}
 8004402:	e035      	b.n	8004470 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	2b02      	cmp	r3, #2
 800440a:	d11e      	bne.n	800444a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800441c:	b672      	cpsid	i
}
 800441e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004446:	b662      	cpsie	i
}
 8004448:	e012      	b.n	8004470 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004470:	e172      	b.n	8004758 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	2b03      	cmp	r3, #3
 8004478:	f200 811f 	bhi.w	80046ba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	2b01      	cmp	r3, #1
 8004482:	d123      	bne.n	80044cc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fc99 	bl	8004dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e173      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ca:	e145      	b.n	8004758 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d152      	bne.n	800457a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2200      	movs	r2, #0
 80044dc:	4906      	ldr	r1, [pc, #24]	; (80044f8 <HAL_I2C_Master_Receive+0x23c>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fb54 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e148      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
 80044ee:	bf00      	nop
 80044f0:	00100002 	.word	0x00100002
 80044f4:	ffff0000 	.word	0xffff0000
 80044f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80044fc:	b672      	cpsid	i
}
 80044fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004542:	b662      	cpsie	i
}
 8004544:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004578:	e0ee      	b.n	8004758 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	2200      	movs	r2, #0
 8004582:	4981      	ldr	r1, [pc, #516]	; (8004788 <HAL_I2C_Master_Receive+0x4cc>)
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fb01 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0f5      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045a4:	b672      	cpsid	i
}
 80045a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045da:	4b6c      	ldr	r3, [pc, #432]	; (800478c <HAL_I2C_Master_Receive+0x4d0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	08db      	lsrs	r3, r3, #3
 80045e0:	4a6b      	ldr	r2, [pc, #428]	; (8004790 <HAL_I2C_Master_Receive+0x4d4>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	0a1a      	lsrs	r2, r3, #8
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	00da      	lsls	r2, r3, #3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d118      	bne.n	8004632 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004622:	b662      	cpsie	i
}
 8004624:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e0a6      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d1d9      	bne.n	80045f4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004682:	b662      	cpsie	i
}
 8004684:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046b8:	e04e      	b.n	8004758 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fb7e 	bl	8004dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e058      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d124      	bne.n	8004758 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	2b03      	cmp	r3, #3
 8004714:	d107      	bne.n	8004726 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004724:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	2b00      	cmp	r3, #0
 800475e:	f47f ae88 	bne.w	8004472 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3728      	adds	r7, #40	; 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	00010004 	.word	0x00010004
 800478c:	20000020 	.word	0x20000020
 8004790:	14f8b589 	.word	0x14f8b589

08004794 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	; 0x28
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	460b      	mov	r3, r1
 80047a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7fe fb2a 	bl	8002dfc <HAL_GetTick>
 80047a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	f040 8111 	bne.w	80049de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2319      	movs	r3, #25
 80047c2:	2201      	movs	r2, #1
 80047c4:	4988      	ldr	r1, [pc, #544]	; (80049e8 <HAL_I2C_IsDeviceReady+0x254>)
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f9e0 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
 80047d4:	e104      	b.n	80049e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_I2C_IsDeviceReady+0x50>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e0fd      	b.n	80049e0 <HAL_I2C_IsDeviceReady+0x24c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d007      	beq.n	800480a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2224      	movs	r2, #36	; 0x24
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a70      	ldr	r2, [pc, #448]	; (80049ec <HAL_I2C_IsDeviceReady+0x258>)
 800482c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2200      	movs	r2, #0
 8004846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f99e 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004864:	d103      	bne.n	800486e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0b6      	b.n	80049e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004872:	897b      	ldrh	r3, [r7, #10]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004880:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004882:	f7fe fabb 	bl	8002dfc <HAL_GetTick>
 8004886:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	bf0c      	ite	eq
 8004896:	2301      	moveq	r3, #1
 8004898:	2300      	movne	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048b6:	e025      	b.n	8004904 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048b8:	f7fe faa0 	bl	8002dfc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <HAL_I2C_IsDeviceReady+0x13a>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	22a0      	movs	r2, #160	; 0xa0
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2ba0      	cmp	r3, #160	; 0xa0
 800490e:	d005      	beq.n	800491c <HAL_I2C_IsDeviceReady+0x188>
 8004910:	7dfb      	ldrb	r3, [r7, #23]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_I2C_IsDeviceReady+0x188>
 8004916:	7dbb      	ldrb	r3, [r7, #22]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0cd      	beq.n	80048b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d129      	bne.n	8004986 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004940:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2319      	movs	r3, #25
 800495e:	2201      	movs	r2, #1
 8004960:	4921      	ldr	r1, [pc, #132]	; (80049e8 <HAL_I2C_IsDeviceReady+0x254>)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f912 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e036      	b.n	80049e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e02c      	b.n	80049e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800499e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2319      	movs	r3, #25
 80049a6:	2201      	movs	r2, #1
 80049a8:	490f      	ldr	r1, [pc, #60]	; (80049e8 <HAL_I2C_IsDeviceReady+0x254>)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f8ee 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e012      	b.n	80049e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3301      	adds	r3, #1
 80049be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	f4ff af32 	bcc.w	800482e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	00100002 	.word	0x00100002
 80049ec:	ffff0000 	.word	0xffff0000

080049f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	460b      	mov	r3, r1
 80049fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d006      	beq.n	8004a2a <I2C_MasterRequestRead+0x3a>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d003      	beq.n	8004a2a <I2C_MasterRequestRead+0x3a>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a28:	d108      	bne.n	8004a3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e00b      	b.n	8004a54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	2b11      	cmp	r3, #17
 8004a42:	d107      	bne.n	8004a54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f893 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7a:	d103      	bne.n	8004a84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e079      	b.n	8004b7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a90:	d108      	bne.n	8004aa4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	611a      	str	r2, [r3, #16]
 8004aa2:	e05f      	b.n	8004b64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004aa4:	897b      	ldrh	r3, [r7, #10]
 8004aa6:	11db      	asrs	r3, r3, #7
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 0306 	and.w	r3, r3, #6
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f063 030f 	orn	r3, r3, #15
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4930      	ldr	r1, [pc, #192]	; (8004b84 <I2C_MasterRequestRead+0x194>)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f8dc 	bl	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e054      	b.n	8004b7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4929      	ldr	r1, [pc, #164]	; (8004b88 <I2C_MasterRequestRead+0x198>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f8cc 	bl	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e044      	b.n	8004b7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f831 	bl	8004b8c <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d103      	bne.n	8004b48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e017      	b.n	8004b7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b4c:	897b      	ldrh	r3, [r7, #10]
 8004b4e:	11db      	asrs	r3, r3, #7
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0306 	and.w	r3, r3, #6
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f063 030e 	orn	r3, r3, #14
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	4907      	ldr	r1, [pc, #28]	; (8004b88 <I2C_MasterRequestRead+0x198>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f888 	bl	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	00010008 	.word	0x00010008
 8004b88:	00010002 	.word	0x00010002

08004b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b9c:	e048      	b.n	8004c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d044      	beq.n	8004c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba6:	f7fe f929 	bl	8002dfc <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d302      	bcc.n	8004bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d139      	bne.n	8004c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d10d      	bne.n	8004be2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	43da      	mvns	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	e00c      	b.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	43da      	mvns	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4013      	ands	r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d116      	bne.n	8004c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e023      	b.n	8004c78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10d      	bne.n	8004c56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	e00c      	b.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	43da      	mvns	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4013      	ands	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d093      	beq.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c8e:	e071      	b.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9e:	d123      	bne.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f043 0204 	orr.w	r2, r3, #4
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e067      	b.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d041      	beq.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf0:	f7fe f884 	bl	8002dfc <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d136      	bne.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10c      	bne.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	43da      	mvns	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e00b      	b.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e021      	b.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d10c      	bne.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e00b      	b.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f47f af6d 	bne.w	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dcc:	e049      	b.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d119      	bne.n	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0210 	mvn.w	r2, #16
 8004de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e030      	b.n	8004e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e10:	f7fd fff4 	bl	8002dfc <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11d      	bne.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d016      	beq.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e007      	b.n	8004e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d1ae      	bne.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e272      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8087 	beq.w	8004faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e9c:	4b92      	ldr	r3, [pc, #584]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ea8:	4b8f      	ldr	r3, [pc, #572]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 030c 	and.w	r3, r3, #12
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d112      	bne.n	8004eda <HAL_RCC_OscConfig+0x5e>
 8004eb4:	4b8c      	ldr	r3, [pc, #560]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d10b      	bne.n	8004eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec2:	4b89      	ldr	r3, [pc, #548]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d06c      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d168      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e24c      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x76>
 8004ee4:	4b80      	ldr	r3, [pc, #512]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a7f      	ldr	r2, [pc, #508]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e02e      	b.n	8004f50 <HAL_RCC_OscConfig+0xd4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x98>
 8004efa:	4b7b      	ldr	r3, [pc, #492]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a7a      	ldr	r2, [pc, #488]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b78      	ldr	r3, [pc, #480]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a77      	ldr	r2, [pc, #476]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e01d      	b.n	8004f50 <HAL_RCC_OscConfig+0xd4>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0xbc>
 8004f1e:	4b72      	ldr	r3, [pc, #456]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a71      	ldr	r2, [pc, #452]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b6f      	ldr	r3, [pc, #444]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a6e      	ldr	r2, [pc, #440]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0xd4>
 8004f38:	4b6b      	ldr	r3, [pc, #428]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a6a      	ldr	r2, [pc, #424]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	4b68      	ldr	r3, [pc, #416]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a67      	ldr	r2, [pc, #412]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d013      	beq.n	8004f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fd ff50 	bl	8002dfc <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f60:	f7fd ff4c 	bl	8002dfc <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b64      	cmp	r3, #100	; 0x64
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e200      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0xe4>
 8004f7e:	e014      	b.n	8004faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f80:	f7fd ff3c 	bl	8002dfc <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f88:	f7fd ff38 	bl	8002dfc <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b64      	cmp	r3, #100	; 0x64
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e1ec      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9a:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x10c>
 8004fa6:	e000      	b.n	8004faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d063      	beq.n	800507e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fc2:	4b49      	ldr	r3, [pc, #292]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d11c      	bne.n	8005008 <HAL_RCC_OscConfig+0x18c>
 8004fce:	4b46      	ldr	r3, [pc, #280]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d116      	bne.n	8005008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fda:	4b43      	ldr	r3, [pc, #268]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x176>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d001      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e1c0      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff2:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4939      	ldr	r1, [pc, #228]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005006:	e03a      	b.n	800507e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d020      	beq.n	8005052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005010:	4b36      	ldr	r3, [pc, #216]	; (80050ec <HAL_RCC_OscConfig+0x270>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fd fef1 	bl	8002dfc <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501e:	f7fd feed 	bl	8002dfc <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e1a1      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503c:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4927      	ldr	r1, [pc, #156]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]
 8005050:	e015      	b.n	800507e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <HAL_RCC_OscConfig+0x270>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fd fed0 	bl	8002dfc <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005060:	f7fd fecc 	bl	8002dfc <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e180      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d03a      	beq.n	8005100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d019      	beq.n	80050c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <HAL_RCC_OscConfig+0x274>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005098:	f7fd feb0 	bl	8002dfc <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a0:	f7fd feac 	bl	8002dfc <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e160      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050be:	2001      	movs	r0, #1
 80050c0:	f000 face 	bl	8005660 <RCC_Delay>
 80050c4:	e01c      	b.n	8005100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <HAL_RCC_OscConfig+0x274>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050cc:	f7fd fe96 	bl	8002dfc <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d2:	e00f      	b.n	80050f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d4:	f7fd fe92 	bl	8002dfc <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d908      	bls.n	80050f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e146      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	42420000 	.word	0x42420000
 80050f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b92      	ldr	r3, [pc, #584]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e9      	bne.n	80050d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80a6 	beq.w	800525a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005112:	4b8b      	ldr	r3, [pc, #556]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10d      	bne.n	800513a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511e:	4b88      	ldr	r3, [pc, #544]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	4a87      	ldr	r2, [pc, #540]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005128:	61d3      	str	r3, [r2, #28]
 800512a:	4b85      	ldr	r3, [pc, #532]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513a:	4b82      	ldr	r3, [pc, #520]	; (8005344 <HAL_RCC_OscConfig+0x4c8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d118      	bne.n	8005178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005146:	4b7f      	ldr	r3, [pc, #508]	; (8005344 <HAL_RCC_OscConfig+0x4c8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7e      	ldr	r2, [pc, #504]	; (8005344 <HAL_RCC_OscConfig+0x4c8>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005152:	f7fd fe53 	bl	8002dfc <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515a:	f7fd fe4f 	bl	8002dfc <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b64      	cmp	r3, #100	; 0x64
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e103      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516c:	4b75      	ldr	r3, [pc, #468]	; (8005344 <HAL_RCC_OscConfig+0x4c8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d106      	bne.n	800518e <HAL_RCC_OscConfig+0x312>
 8005180:	4b6f      	ldr	r3, [pc, #444]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	4a6e      	ldr	r2, [pc, #440]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	6213      	str	r3, [r2, #32]
 800518c:	e02d      	b.n	80051ea <HAL_RCC_OscConfig+0x36e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10c      	bne.n	80051b0 <HAL_RCC_OscConfig+0x334>
 8005196:	4b6a      	ldr	r3, [pc, #424]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4a69      	ldr	r2, [pc, #420]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	6213      	str	r3, [r2, #32]
 80051a2:	4b67      	ldr	r3, [pc, #412]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	4a66      	ldr	r2, [pc, #408]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f023 0304 	bic.w	r3, r3, #4
 80051ac:	6213      	str	r3, [r2, #32]
 80051ae:	e01c      	b.n	80051ea <HAL_RCC_OscConfig+0x36e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	d10c      	bne.n	80051d2 <HAL_RCC_OscConfig+0x356>
 80051b8:	4b61      	ldr	r3, [pc, #388]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4a60      	ldr	r2, [pc, #384]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051be:	f043 0304 	orr.w	r3, r3, #4
 80051c2:	6213      	str	r3, [r2, #32]
 80051c4:	4b5e      	ldr	r3, [pc, #376]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	4a5d      	ldr	r2, [pc, #372]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	6213      	str	r3, [r2, #32]
 80051d0:	e00b      	b.n	80051ea <HAL_RCC_OscConfig+0x36e>
 80051d2:	4b5b      	ldr	r3, [pc, #364]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4a5a      	ldr	r2, [pc, #360]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	6213      	str	r3, [r2, #32]
 80051de:	4b58      	ldr	r3, [pc, #352]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	4a57      	ldr	r2, [pc, #348]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	f023 0304 	bic.w	r3, r3, #4
 80051e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d015      	beq.n	800521e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f2:	f7fd fe03 	bl	8002dfc <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	e00a      	b.n	8005210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fd fdff 	bl	8002dfc <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	; 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e0b1      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ee      	beq.n	80051fa <HAL_RCC_OscConfig+0x37e>
 800521c:	e014      	b.n	8005248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521e:	f7fd fded 	bl	8002dfc <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	e00a      	b.n	800523c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005226:	f7fd fde9 	bl	8002dfc <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	f241 3288 	movw	r2, #5000	; 0x1388
 8005234:	4293      	cmp	r3, r2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e09b      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523c:	4b40      	ldr	r3, [pc, #256]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ee      	bne.n	8005226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d105      	bne.n	800525a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524e:	4b3c      	ldr	r3, [pc, #240]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	4a3b      	ldr	r2, [pc, #236]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8087 	beq.w	8005372 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b08      	cmp	r3, #8
 800526e:	d061      	beq.n	8005334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d146      	bne.n	8005306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005278:	4b33      	ldr	r3, [pc, #204]	; (8005348 <HAL_RCC_OscConfig+0x4cc>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527e:	f7fd fdbd 	bl	8002dfc <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005286:	f7fd fdb9 	bl	8002dfc <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e06d      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005298:	4b29      	ldr	r3, [pc, #164]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ac:	d108      	bne.n	80052c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4921      	ldr	r1, [pc, #132]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052c0:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a19      	ldr	r1, [r3, #32]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	430b      	orrs	r3, r1
 80052d2:	491b      	ldr	r1, [pc, #108]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d8:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <HAL_RCC_OscConfig+0x4cc>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052de:	f7fd fd8d 	bl	8002dfc <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e6:	f7fd fd89 	bl	8002dfc <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e03d      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x46a>
 8005304:	e035      	b.n	8005372 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b10      	ldr	r3, [pc, #64]	; (8005348 <HAL_RCC_OscConfig+0x4cc>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fd fd76 	bl	8002dfc <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005314:	f7fd fd72 	bl	8002dfc <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e026      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCC_OscConfig+0x4c4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x498>
 8005332:	e01e      	b.n	8005372 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d107      	bne.n	800534c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e019      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
 8005340:	40021000 	.word	0x40021000
 8005344:	40007000 	.word	0x40007000
 8005348:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_RCC_OscConfig+0x500>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	429a      	cmp	r2, r3
 800535e:	d106      	bne.n	800536e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d001      	beq.n	8005372 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000

08005380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0d0      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b6a      	ldr	r3, [pc, #424]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d910      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b67      	ldr	r3, [pc, #412]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 0207 	bic.w	r2, r3, #7
 80053aa:	4965      	ldr	r1, [pc, #404]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4a58      	ldr	r2, [pc, #352]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494d      	ldr	r1, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d040      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d115      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e073      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e06b      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4936      	ldr	r1, [pc, #216]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fd fcc4 	bl	8002dfc <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fd fcc0 	bl	8002dfc <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e053      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2d      	ldr	r3, [pc, #180]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d210      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 0207 	bic.w	r2, r3, #7
 80054b6:	4922      	ldr	r1, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f821 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8005512:	4602      	mov	r2, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	490a      	ldr	r1, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1cc>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1d0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fd fc22 	bl	8002d78 <HAL_InitTick>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40022000 	.word	0x40022000
 8005544:	40021000 	.word	0x40021000
 8005548:	080083d0 	.word	0x080083d0
 800554c:	20000020 	.word	0x20000020
 8005550:	20000024 	.word	0x20000024

08005554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800556e:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b04      	cmp	r3, #4
 800557c:	d002      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x30>
 800557e:	2b08      	cmp	r3, #8
 8005580:	d003      	beq.n	800558a <HAL_RCC_GetSysClockFreq+0x36>
 8005582:	e027      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_GetSysClockFreq+0x98>)
 8005586:	613b      	str	r3, [r7, #16]
      break;
 8005588:	e027      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	0c9b      	lsrs	r3, r3, #18
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005594:	5cd3      	ldrb	r3, [r2, r3]
 8005596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d010      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	0c5b      	lsrs	r3, r3, #17
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <HAL_RCC_GetSysClockFreq+0x98>)
 80055b6:	fb03 f202 	mul.w	r2, r3, r2
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e004      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	613b      	str	r3, [r7, #16]
      break;
 80055d2:	e002      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_GetSysClockFreq+0x98>)
 80055d6:	613b      	str	r3, [r7, #16]
      break;
 80055d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055da:	693b      	ldr	r3, [r7, #16]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000
 80055ec:	007a1200 	.word	0x007a1200
 80055f0:	080083e8 	.word	0x080083e8
 80055f4:	080083f8 	.word	0x080083f8
 80055f8:	003d0900 	.word	0x003d0900

080055fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b02      	ldr	r3, [pc, #8]	; (800560c <HAL_RCC_GetHCLKFreq+0x10>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	20000020 	.word	0x20000020

08005610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005614:	f7ff fff2 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b05      	ldr	r3, [pc, #20]	; (8005630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4903      	ldr	r1, [pc, #12]	; (8005634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000
 8005634:	080083e0 	.word	0x080083e0

08005638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800563c:	f7ff ffde 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	0adb      	lsrs	r3, r3, #11
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <HAL_RCC_GetPCLK2Freq+0x24>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40021000 	.word	0x40021000
 800565c:	080083e0 	.word	0x080083e0

08005660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <RCC_Delay+0x34>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <RCC_Delay+0x38>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0a5b      	lsrs	r3, r3, #9
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800567c:	bf00      	nop
  }
  while (Delay --);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1e5a      	subs	r2, r3, #1
 8005682:	60fa      	str	r2, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f9      	bne.n	800567c <RCC_Delay+0x1c>
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	20000020 	.word	0x20000020
 8005698:	10624dd3 	.word	0x10624dd3

0800569c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d07d      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056b8:	2300      	movs	r3, #0
 80056ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056bc:	4b4f      	ldr	r3, [pc, #316]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10d      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c8:	4b4c      	ldr	r3, [pc, #304]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	4a4b      	ldr	r2, [pc, #300]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	61d3      	str	r3, [r2, #28]
 80056d4:	4b49      	ldr	r3, [pc, #292]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e4:	4b46      	ldr	r3, [pc, #280]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d118      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056f0:	4b43      	ldr	r3, [pc, #268]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a42      	ldr	r2, [pc, #264]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fc:	f7fd fb7e 	bl	8002dfc <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005702:	e008      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005704:	f7fd fb7a 	bl	8002dfc <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b64      	cmp	r3, #100	; 0x64
 8005710:	d901      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e06d      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005716:	4b3a      	ldr	r3, [pc, #232]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005722:	4b36      	ldr	r3, [pc, #216]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d02e      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	429a      	cmp	r2, r3
 800573e:	d027      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005740:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800574a:	4b2e      	ldr	r3, [pc, #184]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005750:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d014      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fd fb49 	bl	8002dfc <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576c:	e00a      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576e:	f7fd fb45 	bl	8002dfc <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	f241 3288 	movw	r2, #5000	; 0x1388
 800577c:	4293      	cmp	r3, r2
 800577e:	d901      	bls.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e036      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ee      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4917      	ldr	r1, [pc, #92]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4a13      	ldr	r2, [pc, #76]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	490b      	ldr	r1, [pc, #44]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4904      	ldr	r1, [pc, #16]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000
 8005800:	40007000 	.word	0x40007000
 8005804:	42420440 	.word	0x42420440

08005808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e076      	b.n	8005908 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d108      	bne.n	8005834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582a:	d009      	beq.n	8005840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	61da      	str	r2, [r3, #28]
 8005832:	e005      	b.n	8005840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fc14 	bl	8002088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c4:	ea42 0103 	orr.w	r1, r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	0c1a      	lsrs	r2, r3, #16
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f002 0204 	and.w	r2, r2, #4
 80058e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69da      	ldr	r2, [r3, #28]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_SPI_Transmit+0x22>
 800592e:	2302      	movs	r3, #2
 8005930:	e12d      	b.n	8005b8e <HAL_SPI_Transmit+0x27e>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800593a:	f7fd fa5f 	bl	8002dfc <HAL_GetTick>
 800593e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	d002      	beq.n	8005956 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005950:	2302      	movs	r3, #2
 8005952:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005954:	e116      	b.n	8005b84 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_SPI_Transmit+0x52>
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005966:	e10d      	b.n	8005b84 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2203      	movs	r2, #3
 800596c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	88fa      	ldrh	r2, [r7, #6]
 8005986:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ae:	d10f      	bne.n	80059d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d007      	beq.n	80059ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f6:	d14f      	bne.n	8005a98 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0xf6>
 8005a00:	8afb      	ldrh	r3, [r7, #22]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d142      	bne.n	8005a8c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	1c9a      	adds	r2, r3, #2
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a2a:	e02f      	b.n	8005a8c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d112      	bne.n	8005a60 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	881a      	ldrh	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a5e:	e015      	b.n	8005a8c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a60:	f7fd f9cc 	bl	8002dfc <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d803      	bhi.n	8005a78 <HAL_SPI_Transmit+0x168>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d102      	bne.n	8005a7e <HAL_SPI_Transmit+0x16e>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a8a:	e07b      	b.n	8005b84 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1ca      	bne.n	8005a2c <HAL_SPI_Transmit+0x11c>
 8005a96:	e050      	b.n	8005b3a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_Transmit+0x196>
 8005aa0:	8afb      	ldrh	r3, [r7, #22]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d144      	bne.n	8005b30 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	7812      	ldrb	r2, [r2, #0]
 8005ab2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005acc:	e030      	b.n	8005b30 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d113      	bne.n	8005b04 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b02:	e015      	b.n	8005b30 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b04:	f7fd f97a 	bl	8002dfc <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d803      	bhi.n	8005b1c <HAL_SPI_Transmit+0x20c>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_Transmit+0x212>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b2e:	e029      	b.n	8005b84 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1c9      	bne.n	8005ace <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f8b2 	bl	8005ca8 <SPI_EndRxTxTransaction>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e003      	b.n	8005b84 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ba8:	f7fd f928 	bl	8002dfc <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bb8:	f7fd f920 	bl	8002dfc <HAL_GetTick>
 8005bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bbe:	4b39      	ldr	r3, [pc, #228]	; (8005ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	015b      	lsls	r3, r3, #5
 8005bc4:	0d1b      	lsrs	r3, r3, #20
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bce:	e054      	b.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d050      	beq.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bd8:	f7fd f910 	bl	8002dfc <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d902      	bls.n	8005bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d13d      	bne.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c06:	d111      	bne.n	8005c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c10:	d004      	beq.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1a:	d107      	bne.n	8005c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c34:	d10f      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e017      	b.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	bf0c      	ite	eq
 8005c8a:	2301      	moveq	r3, #1
 8005c8c:	2300      	movne	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d19b      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000020 	.word	0x20000020

08005ca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2180      	movs	r1, #128	; 0x80
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff6a 	bl	8005b98 <SPI_WaitFlagStateUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e000      	b.n	8005cdc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e041      	b.n	8005d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fc fd76 	bl	80027fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f000 fe82 	bl	8006a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d001      	beq.n	8005d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e044      	b.n	8005e26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <HAL_TIM_Base_Start_IT+0xac>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d018      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x6c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <HAL_TIM_Base_Start_IT+0xb0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d013      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x6c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d00e      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x6c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_TIM_Base_Start_IT+0xb4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d009      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <HAL_TIM_Base_Start_IT+0xb8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x6c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a15      	ldr	r2, [pc, #84]	; (8005e40 <HAL_TIM_Base_Start_IT+0xbc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d111      	bne.n	8005e14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d010      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	e007      	b.n	8005e24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00

08005e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e041      	b.n	8005eda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f839 	bl	8005ee2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f000 fdd2 	bl	8006a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <HAL_TIM_PWM_Start+0x24>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e022      	b.n	8005f5e <HAL_TIM_PWM_Start+0x6a>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d109      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x3e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	e015      	b.n	8005f5e <HAL_TIM_PWM_Start+0x6a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d109      	bne.n	8005f4c <HAL_TIM_PWM_Start+0x58>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e008      	b.n	8005f5e <HAL_TIM_PWM_Start+0x6a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e072      	b.n	800604c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_PWM_Start+0x82>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f74:	e013      	b.n	8005f9e <HAL_TIM_PWM_Start+0xaa>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_PWM_Start+0x92>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f84:	e00b      	b.n	8005f9e <HAL_TIM_PWM_Start+0xaa>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0xa2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f94:	e003      	b.n	8005f9e <HAL_TIM_PWM_Start+0xaa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fffc 	bl	8006fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	; (8006054 <HAL_TIM_PWM_Start+0x160>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_PWM_Start+0xcc>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a27      	ldr	r2, [pc, #156]	; (8006058 <HAL_TIM_PWM_Start+0x164>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0xd0>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_TIM_PWM_Start+0xd2>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <HAL_TIM_PWM_Start+0x160>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_TIM_PWM_Start+0x122>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <HAL_TIM_PWM_Start+0x164>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_TIM_PWM_Start+0x122>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d00e      	beq.n	8006016 <HAL_TIM_PWM_Start+0x122>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a17      	ldr	r2, [pc, #92]	; (800605c <HAL_TIM_PWM_Start+0x168>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_TIM_PWM_Start+0x122>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a16      	ldr	r2, [pc, #88]	; (8006060 <HAL_TIM_PWM_Start+0x16c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_TIM_PWM_Start+0x122>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a14      	ldr	r2, [pc, #80]	; (8006064 <HAL_TIM_PWM_Start+0x170>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d111      	bne.n	800603a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b06      	cmp	r3, #6
 8006026:	d010      	beq.n	800604a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	e007      	b.n	800604a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40013400 	.word	0x40013400
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00

08006068 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 ff92 	bl	8006fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2e      	ldr	r2, [pc, #184]	; (8006140 <HAL_TIM_PWM_Stop+0xd8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_TIM_PWM_Stop+0x2c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <HAL_TIM_PWM_Stop+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d101      	bne.n	8006098 <HAL_TIM_PWM_Stop+0x30>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <HAL_TIM_PWM_Stop+0x32>
 8006098:	2300      	movs	r3, #0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d017      	beq.n	80060ce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <HAL_TIM_PWM_Stop+0x66>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	f240 4344 	movw	r3, #1092	; 0x444
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d107      	bne.n	80060ce <HAL_TIM_PWM_Stop+0x66>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10f      	bne.n	80060fe <HAL_TIM_PWM_Stop+0x96>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a1a      	ldr	r2, [r3, #32]
 80060e4:	f240 4344 	movw	r3, #1092	; 0x444
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d107      	bne.n	80060fe <HAL_TIM_PWM_Stop+0x96>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Stop+0xa6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610c:	e013      	b.n	8006136 <HAL_TIM_PWM_Stop+0xce>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Stop+0xb6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	e00b      	b.n	8006136 <HAL_TIM_PWM_Stop+0xce>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Stop+0xc6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	e003      	b.n	8006136 <HAL_TIM_PWM_Stop+0xce>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40013400 	.word	0x40013400

08006148 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <HAL_TIM_PWM_Start_IT+0x28>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b01      	cmp	r3, #1
 8006166:	bf14      	ite	ne
 8006168:	2301      	movne	r3, #1
 800616a:	2300      	moveq	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e022      	b.n	80061b6 <HAL_TIM_PWM_Start_IT+0x6e>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b04      	cmp	r3, #4
 8006174:	d109      	bne.n	800618a <HAL_TIM_PWM_Start_IT+0x42>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b01      	cmp	r3, #1
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	e015      	b.n	80061b6 <HAL_TIM_PWM_Start_IT+0x6e>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d109      	bne.n	80061a4 <HAL_TIM_PWM_Start_IT+0x5c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	bf14      	ite	ne
 800619c:	2301      	movne	r3, #1
 800619e:	2300      	moveq	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	e008      	b.n	80061b6 <HAL_TIM_PWM_Start_IT+0x6e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e0bd      	b.n	800633a <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_PWM_Start_IT+0x86>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061cc:	e013      	b.n	80061f6 <HAL_TIM_PWM_Start_IT+0xae>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Start_IT+0x96>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061dc:	e00b      	b.n	80061f6 <HAL_TIM_PWM_Start_IT+0xae>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start_IT+0xa6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ec:	e003      	b.n	80061f6 <HAL_TIM_PWM_Start_IT+0xae>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d841      	bhi.n	8006280 <HAL_TIM_PWM_Start_IT+0x138>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <HAL_TIM_PWM_Start_IT+0xbc>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006239 	.word	0x08006239
 8006208:	08006281 	.word	0x08006281
 800620c:	08006281 	.word	0x08006281
 8006210:	08006281 	.word	0x08006281
 8006214:	0800624b 	.word	0x0800624b
 8006218:	08006281 	.word	0x08006281
 800621c:	08006281 	.word	0x08006281
 8006220:	08006281 	.word	0x08006281
 8006224:	0800625d 	.word	0x0800625d
 8006228:	08006281 	.word	0x08006281
 800622c:	08006281 	.word	0x08006281
 8006230:	08006281 	.word	0x08006281
 8006234:	0800626f 	.word	0x0800626f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0202 	orr.w	r2, r2, #2
 8006246:	60da      	str	r2, [r3, #12]
      break;
 8006248:	e01d      	b.n	8006286 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0204 	orr.w	r2, r2, #4
 8006258:	60da      	str	r2, [r3, #12]
      break;
 800625a:	e014      	b.n	8006286 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0208 	orr.w	r2, r2, #8
 800626a:	60da      	str	r2, [r3, #12]
      break;
 800626c:	e00b      	b.n	8006286 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0210 	orr.w	r2, r2, #16
 800627c:	60da      	str	r2, [r3, #12]
      break;
 800627e:	e002      	b.n	8006286 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
      break;
 8006284:	bf00      	nop
  }

  if (status == HAL_OK)
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d155      	bne.n	8006338 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fe85 	bl	8006fa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a29      	ldr	r2, [pc, #164]	; (8006344 <HAL_TIM_PWM_Start_IT+0x1fc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <HAL_TIM_PWM_Start_IT+0x166>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <HAL_TIM_PWM_Start_IT+0x200>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <HAL_TIM_PWM_Start_IT+0x16a>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <HAL_TIM_PWM_Start_IT+0x16c>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <HAL_TIM_PWM_Start_IT+0x1fc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d018      	beq.n	8006304 <HAL_TIM_PWM_Start_IT+0x1bc>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIM_PWM_Start_IT+0x200>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d013      	beq.n	8006304 <HAL_TIM_PWM_Start_IT+0x1bc>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d00e      	beq.n	8006304 <HAL_TIM_PWM_Start_IT+0x1bc>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a18      	ldr	r2, [pc, #96]	; (800634c <HAL_TIM_PWM_Start_IT+0x204>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d009      	beq.n	8006304 <HAL_TIM_PWM_Start_IT+0x1bc>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a16      	ldr	r2, [pc, #88]	; (8006350 <HAL_TIM_PWM_Start_IT+0x208>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d004      	beq.n	8006304 <HAL_TIM_PWM_Start_IT+0x1bc>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <HAL_TIM_PWM_Start_IT+0x20c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d111      	bne.n	8006328 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b06      	cmp	r3, #6
 8006314:	d010      	beq.n	8006338 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006326:	e007      	b.n	8006338 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00

08006358 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b0c      	cmp	r3, #12
 800636a:	d841      	bhi.n	80063f0 <HAL_TIM_PWM_Stop_IT+0x98>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063a9 	.word	0x080063a9
 8006378:	080063f1 	.word	0x080063f1
 800637c:	080063f1 	.word	0x080063f1
 8006380:	080063f1 	.word	0x080063f1
 8006384:	080063bb 	.word	0x080063bb
 8006388:	080063f1 	.word	0x080063f1
 800638c:	080063f1 	.word	0x080063f1
 8006390:	080063f1 	.word	0x080063f1
 8006394:	080063cd 	.word	0x080063cd
 8006398:	080063f1 	.word	0x080063f1
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	080063f1 	.word	0x080063f1
 80063a4:	080063df 	.word	0x080063df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0202 	bic.w	r2, r2, #2
 80063b6:	60da      	str	r2, [r3, #12]
      break;
 80063b8:	e01d      	b.n	80063f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0204 	bic.w	r2, r2, #4
 80063c8:	60da      	str	r2, [r3, #12]
      break;
 80063ca:	e014      	b.n	80063f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0208 	bic.w	r2, r2, #8
 80063da:	60da      	str	r2, [r3, #12]
      break;
 80063dc:	e00b      	b.n	80063f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0210 	bic.w	r2, r2, #16
 80063ec:	60da      	str	r2, [r3, #12]
      break;
 80063ee:	e002      	b.n	80063f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      break;
 80063f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d161      	bne.n	80064c0 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2200      	movs	r2, #0
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fdcd 	bl	8006fa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2f      	ldr	r2, [pc, #188]	; (80064cc <HAL_TIM_PWM_Stop_IT+0x174>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_TIM_PWM_Stop_IT+0xc6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2d      	ldr	r2, [pc, #180]	; (80064d0 <HAL_TIM_PWM_Stop_IT+0x178>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d101      	bne.n	8006422 <HAL_TIM_PWM_Stop_IT+0xca>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <HAL_TIM_PWM_Stop_IT+0xcc>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d017      	beq.n	8006458 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a1a      	ldr	r2, [r3, #32]
 800642e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006432:	4013      	ands	r3, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10f      	bne.n	8006458 <HAL_TIM_PWM_Stop_IT+0x100>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6a1a      	ldr	r2, [r3, #32]
 800643e:	f240 4344 	movw	r3, #1092	; 0x444
 8006442:	4013      	ands	r3, r2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d107      	bne.n	8006458 <HAL_TIM_PWM_Stop_IT+0x100>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006456:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006462:	4013      	ands	r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10f      	bne.n	8006488 <HAL_TIM_PWM_Stop_IT+0x130>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a1a      	ldr	r2, [r3, #32]
 800646e:	f240 4344 	movw	r3, #1092	; 0x444
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d107      	bne.n	8006488 <HAL_TIM_PWM_Stop_IT+0x130>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <HAL_TIM_PWM_Stop_IT+0x140>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006496:	e013      	b.n	80064c0 <HAL_TIM_PWM_Stop_IT+0x168>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b04      	cmp	r3, #4
 800649c:	d104      	bne.n	80064a8 <HAL_TIM_PWM_Stop_IT+0x150>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a6:	e00b      	b.n	80064c0 <HAL_TIM_PWM_Stop_IT+0x168>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d104      	bne.n	80064b8 <HAL_TIM_PWM_Stop_IT+0x160>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b6:	e003      	b.n	80064c0 <HAL_TIM_PWM_Stop_IT+0x168>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40013400 	.word	0x40013400

080064d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d122      	bne.n	8006530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d11b      	bne.n	8006530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0202 	mvn.w	r2, #2
 8006500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa76 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa69 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fb fe2d 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b04      	cmp	r3, #4
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b04      	cmp	r3, #4
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0204 	mvn.w	r2, #4
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2202      	movs	r2, #2
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa4c 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa3f 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fb fe03 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b08      	cmp	r3, #8
 8006590:	d122      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b08      	cmp	r3, #8
 800659e:	d11b      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0208 	mvn.w	r2, #8
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2204      	movs	r2, #4
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa22 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa15 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7fb fdd9 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	d122      	bne.n	800662c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d11b      	bne.n	800662c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0210 	mvn.w	r2, #16
 80065fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2208      	movs	r2, #8
 8006602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9f8 	bl	8006a08 <HAL_TIM_IC_CaptureCallback>
 8006618:	e005      	b.n	8006626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f9eb 	bl	80069f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fb fdaf 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	d10e      	bne.n	8006658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b01      	cmp	r3, #1
 8006646:	d107      	bne.n	8006658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0201 	mvn.w	r2, #1
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fb f9e7 	bl	8001a26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d10e      	bne.n	8006684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	2b80      	cmp	r3, #128	; 0x80
 8006672:	d107      	bne.n	8006684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fd7a 	bl	8007178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d10e      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f9b5 	bl	8006a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d10e      	bne.n	80066dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d107      	bne.n	80066dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0220 	mvn.w	r2, #32
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fd45 	bl	8007166 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d101      	bne.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066fe:	2302      	movs	r3, #2
 8006700:	e0ae      	b.n	8006860 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b0c      	cmp	r3, #12
 800670e:	f200 809f 	bhi.w	8006850 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006712:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	0800674d 	.word	0x0800674d
 800671c:	08006851 	.word	0x08006851
 8006720:	08006851 	.word	0x08006851
 8006724:	08006851 	.word	0x08006851
 8006728:	0800678d 	.word	0x0800678d
 800672c:	08006851 	.word	0x08006851
 8006730:	08006851 	.word	0x08006851
 8006734:	08006851 	.word	0x08006851
 8006738:	080067cf 	.word	0x080067cf
 800673c:	08006851 	.word	0x08006851
 8006740:	08006851 	.word	0x08006851
 8006744:	08006851 	.word	0x08006851
 8006748:	0800680f 	.word	0x0800680f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f9e4 	bl	8006b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0208 	orr.w	r2, r2, #8
 8006766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0204 	bic.w	r2, r2, #4
 8006776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6999      	ldr	r1, [r3, #24]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	619a      	str	r2, [r3, #24]
      break;
 800678a:	e064      	b.n	8006856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fa34 	bl	8006c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6999      	ldr	r1, [r3, #24]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	021a      	lsls	r2, r3, #8
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	619a      	str	r2, [r3, #24]
      break;
 80067cc:	e043      	b.n	8006856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fa87 	bl	8006ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0208 	orr.w	r2, r2, #8
 80067e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0204 	bic.w	r2, r2, #4
 80067f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69d9      	ldr	r1, [r3, #28]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	61da      	str	r2, [r3, #28]
      break;
 800680c:	e023      	b.n	8006856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fadb 	bl	8006dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69d9      	ldr	r1, [r3, #28]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	021a      	lsls	r2, r3, #8
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	61da      	str	r2, [r3, #28]
      break;
 800684e:	e002      	b.n	8006856 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
      break;
 8006854:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_TIM_ConfigClockSource+0x1c>
 8006880:	2302      	movs	r3, #2
 8006882:	e0b4      	b.n	80069ee <HAL_TIM_ConfigClockSource+0x186>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068bc:	d03e      	beq.n	800693c <HAL_TIM_ConfigClockSource+0xd4>
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c2:	f200 8087 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ca:	f000 8086 	beq.w	80069da <HAL_TIM_ConfigClockSource+0x172>
 80068ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d2:	d87f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b70      	cmp	r3, #112	; 0x70
 80068d6:	d01a      	beq.n	800690e <HAL_TIM_ConfigClockSource+0xa6>
 80068d8:	2b70      	cmp	r3, #112	; 0x70
 80068da:	d87b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b60      	cmp	r3, #96	; 0x60
 80068de:	d050      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x11a>
 80068e0:	2b60      	cmp	r3, #96	; 0x60
 80068e2:	d877      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b50      	cmp	r3, #80	; 0x50
 80068e6:	d03c      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0xfa>
 80068e8:	2b50      	cmp	r3, #80	; 0x50
 80068ea:	d873      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d058      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x13a>
 80068f0:	2b40      	cmp	r3, #64	; 0x40
 80068f2:	d86f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b30      	cmp	r3, #48	; 0x30
 80068f6:	d064      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 80068f8:	2b30      	cmp	r3, #48	; 0x30
 80068fa:	d86b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d060      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d867      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d05c      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006908:	2b10      	cmp	r3, #16
 800690a:	d05a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x15a>
 800690c:	e062      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	f000 fb22 	bl	8006f66 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	609a      	str	r2, [r3, #8]
      break;
 800693a:	e04f      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	f000 fb0b 	bl	8006f66 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800695e:	609a      	str	r2, [r3, #8]
      break;
 8006960:	e03c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	461a      	mov	r2, r3
 8006970:	f000 fa82 	bl	8006e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2150      	movs	r1, #80	; 0x50
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fad9 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 8006980:	e02c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800698e:	461a      	mov	r2, r3
 8006990:	f000 faa0 	bl	8006ed4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2160      	movs	r1, #96	; 0x60
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fac9 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 80069a0:	e01c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fa62 	bl	8006e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2140      	movs	r1, #64	; 0x40
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fab9 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f000 fab0 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 80069d2:	e003      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a33      	ldr	r2, [pc, #204]	; (8006b0c <TIM_Base_SetConfig+0xe0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d013      	beq.n	8006a6c <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a32      	ldr	r2, [pc, #200]	; (8006b10 <TIM_Base_SetConfig+0xe4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00f      	beq.n	8006a6c <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a52:	d00b      	beq.n	8006a6c <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <TIM_Base_SetConfig+0xe8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d007      	beq.n	8006a6c <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <TIM_Base_SetConfig+0xec>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_Base_SetConfig+0x40>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <TIM_Base_SetConfig+0xf0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d108      	bne.n	8006a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a22      	ldr	r2, [pc, #136]	; (8006b0c <TIM_Base_SetConfig+0xe0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <TIM_Base_SetConfig+0x82>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <TIM_Base_SetConfig+0xe4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00f      	beq.n	8006aae <TIM_Base_SetConfig+0x82>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d00b      	beq.n	8006aae <TIM_Base_SetConfig+0x82>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a1e      	ldr	r2, [pc, #120]	; (8006b14 <TIM_Base_SetConfig+0xe8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d007      	beq.n	8006aae <TIM_Base_SetConfig+0x82>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <TIM_Base_SetConfig+0xec>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_Base_SetConfig+0x82>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <TIM_Base_SetConfig+0xf0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <TIM_Base_SetConfig+0xe0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0xc8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <TIM_Base_SetConfig+0xe4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d103      	bne.n	8006afc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	615a      	str	r2, [r3, #20]
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00

08006b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f023 0201 	bic.w	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f023 0302 	bic.w	r3, r3, #2
 8006b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a20      	ldr	r2, [pc, #128]	; (8006bf8 <TIM_OC1_SetConfig+0xd8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC1_SetConfig+0x64>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a1f      	ldr	r2, [pc, #124]	; (8006bfc <TIM_OC1_SetConfig+0xdc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10c      	bne.n	8006b9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0308 	bic.w	r3, r3, #8
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f023 0304 	bic.w	r3, r3, #4
 8006b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <TIM_OC1_SetConfig+0xd8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_OC1_SetConfig+0x8e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <TIM_OC1_SetConfig+0xdc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d111      	bne.n	8006bd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40013400 	.word	0x40013400

08006c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f023 0210 	bic.w	r2, r3, #16
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f023 0320 	bic.w	r3, r3, #32
 8006c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a21      	ldr	r2, [pc, #132]	; (8006ce0 <TIM_OC2_SetConfig+0xe0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_OC2_SetConfig+0x68>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <TIM_OC2_SetConfig+0xe4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10d      	bne.n	8006c84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <TIM_OC2_SetConfig+0xe0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_OC2_SetConfig+0x94>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <TIM_OC2_SetConfig+0xe4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d113      	bne.n	8006cbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr
 8006ce0:	40012c00 	.word	0x40012c00
 8006ce4:	40013400 	.word	0x40013400

08006ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <TIM_OC3_SetConfig+0xe0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC3_SetConfig+0x66>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <TIM_OC3_SetConfig+0xe4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10d      	bne.n	8006d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <TIM_OC3_SetConfig+0xe0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC3_SetConfig+0x92>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <TIM_OC3_SetConfig+0xe4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d113      	bne.n	8006da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40012c00 	.word	0x40012c00
 8006dcc:	40013400 	.word	0x40013400

08006dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	031b      	lsls	r3, r3, #12
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a11      	ldr	r2, [pc, #68]	; (8006e70 <TIM_OC4_SetConfig+0xa0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC4_SetConfig+0x68>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a10      	ldr	r2, [pc, #64]	; (8006e74 <TIM_OC4_SetConfig+0xa4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d109      	bne.n	8006e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	019b      	lsls	r3, r3, #6
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40013400 	.word	0x40013400

08006e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f023 0201 	bic.w	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 030a 	bic.w	r3, r3, #10
 8006eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr

08006ed4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f023 0210 	bic.w	r2, r3, #16
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	031b      	lsls	r3, r3, #12
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	621a      	str	r2, [r3, #32]
}
 8006f28:	bf00      	nop
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr

08006f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f043 0307 	orr.w	r3, r3, #7
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	609a      	str	r2, [r3, #8]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr

08006f66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b087      	sub	sp, #28
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
 8006f72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	021a      	lsls	r2, r3, #8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	609a      	str	r2, [r3, #8]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1a      	ldr	r2, [r3, #32]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	43db      	mvns	r3, r3
 8006fc6:	401a      	ands	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007000:	2302      	movs	r3, #2
 8007002:	e050      	b.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1b      	ldr	r2, [pc, #108]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d018      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705a:	d00e      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d009      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a14      	ldr	r2, [pc, #80]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d004      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a12      	ldr	r2, [pc, #72]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d10c      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4313      	orrs	r3, r2
 800708a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40000400 	.word	0x40000400
 80070bc:	40000800 	.word	0x40000800
 80070c0:	40000c00 	.word	0x40000c00

080070c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070dc:	2302      	movs	r3, #2
 80070de:	e03d      	b.n	800715c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr

0800718a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e042      	b.n	8007222 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fb fd11 	bl	8002bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2224      	movs	r2, #36	; 0x24
 80071ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fc80 	bl	8007ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007202:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b0ba      	sub	sp, #232	; 0xe8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007252:	2300      	movs	r3, #0
 8007254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007258:	2300      	movs	r3, #0
 800725a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800726a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10f      	bne.n	8007292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	d009      	beq.n	8007292 <HAL_UART_IRQHandler+0x66>
 800727e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fb63 	bl	8007956 <UART_Receive_IT>
      return;
 8007290:	e25b      	b.n	800774a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 80de 	beq.w	8007458 <HAL_UART_IRQHandler+0x22c>
 800729c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 80d1 	beq.w	8007458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <HAL_UART_IRQHandler+0xae>
 80072c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d2:	f043 0201 	orr.w	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00b      	beq.n	80072fe <HAL_UART_IRQHandler+0xd2>
 80072e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f6:	f043 0202 	orr.w	r2, r3, #2
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00b      	beq.n	8007322 <HAL_UART_IRQHandler+0xf6>
 800730a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f043 0204 	orr.w	r2, r3, #4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d011      	beq.n	8007352 <HAL_UART_IRQHandler+0x126>
 800732e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d105      	bne.n	8007346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800733a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734a:	f043 0208 	orr.w	r2, r3, #8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 81f2 	beq.w	8007740 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800735c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_UART_IRQHandler+0x14e>
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736c:	f003 0320 	and.w	r3, r3, #32
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 faee 	bl	8007956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <HAL_UART_IRQHandler+0x17a>
 800739e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d04f      	beq.n	8007446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f9f8 	bl	800779c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d041      	beq.n	800743e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3314      	adds	r3, #20
 80073c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3314      	adds	r3, #20
 80073e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1d9      	bne.n	80073ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d013      	beq.n	8007436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	4a7e      	ldr	r2, [pc, #504]	; (800760c <HAL_UART_IRQHandler+0x3e0>)
 8007414:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	4618      	mov	r0, r3
 800741c:	f7fc f900 	bl	8003620 <HAL_DMA_Abort_IT>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d016      	beq.n	8007454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007430:	4610      	mov	r0, r2
 8007432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	e00e      	b.n	8007454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f99c 	bl	8007774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	e00a      	b.n	8007454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f998 	bl	8007774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007444:	e006      	b.n	8007454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f994 	bl	8007774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007452:	e175      	b.n	8007740 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007454:	bf00      	nop
    return;
 8007456:	e173      	b.n	8007740 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 814f 	bne.w	8007700 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8148 	beq.w	8007700 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007474:	f003 0310 	and.w	r3, r3, #16
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8141 	beq.w	8007700 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800747e:	2300      	movs	r3, #0
 8007480:	60bb      	str	r3, [r7, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	60bb      	str	r3, [r7, #8]
 8007492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 80b6 	beq.w	8007610 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8145 	beq.w	8007744 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074c2:	429a      	cmp	r2, r3
 80074c4:	f080 813e 	bcs.w	8007744 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	f000 8088 	beq.w	80075ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007508:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800750c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007514:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1d9      	bne.n	80074dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3314      	adds	r3, #20
 800752e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800753a:	f023 0301 	bic.w	r3, r3, #1
 800753e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800754c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007550:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800755e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e1      	bne.n	8007528 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3314      	adds	r3, #20
 800756a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800757a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3314      	adds	r3, #20
 8007584:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007588:	66fa      	str	r2, [r7, #108]	; 0x6c
 800758a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800758e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e3      	bne.n	8007564 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	330c      	adds	r3, #12
 80075b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075bc:	f023 0310 	bic.w	r3, r3, #16
 80075c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	330c      	adds	r3, #12
 80075ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80075d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e3      	bne.n	80075aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fb ffde 	bl	80035a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f8bf 	bl	8007786 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007608:	e09c      	b.n	8007744 <HAL_UART_IRQHandler+0x518>
 800760a:	bf00      	nop
 800760c:	08007861 	.word	0x08007861
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007618:	b29b      	uxth	r3, r3
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 808e 	beq.w	8007748 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800762c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8089 	beq.w	8007748 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	330c      	adds	r3, #12
 800763c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800764c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	330c      	adds	r3, #12
 8007656:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800765a:	647a      	str	r2, [r7, #68]	; 0x44
 800765c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e3      	bne.n	8007636 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3314      	adds	r3, #20
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	623b      	str	r3, [r7, #32]
   return(result);
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3314      	adds	r3, #20
 800768e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007692:	633a      	str	r2, [r7, #48]	; 0x30
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e3      	bne.n	800766e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0310 	bic.w	r3, r3, #16
 80076ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	330c      	adds	r3, #12
 80076d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076d8:	61fa      	str	r2, [r7, #28]
 80076da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	69b9      	ldr	r1, [r7, #24]
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	617b      	str	r3, [r7, #20]
   return(result);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e3      	bne.n	80076b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f844 	bl	8007786 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076fe:	e023      	b.n	8007748 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007708:	2b00      	cmp	r3, #0
 800770a:	d009      	beq.n	8007720 <HAL_UART_IRQHandler+0x4f4>
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8b5 	bl	8007888 <UART_Transmit_IT>
    return;
 800771e:	e014      	b.n	800774a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00e      	beq.n	800774a <HAL_UART_IRQHandler+0x51e>
 800772c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f8f4 	bl	8007926 <UART_EndTransmit_IT>
    return;
 800773e:	e004      	b.n	800774a <HAL_UART_IRQHandler+0x51e>
    return;
 8007740:	bf00      	nop
 8007742:	e002      	b.n	800774a <HAL_UART_IRQHandler+0x51e>
      return;
 8007744:	bf00      	nop
 8007746:	e000      	b.n	800774a <HAL_UART_IRQHandler+0x51e>
      return;
 8007748:	bf00      	nop
  }
}
 800774a:	37e8      	adds	r7, #232	; 0xe8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr

0800779c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800779c:	b480      	push	{r7}
 800779e:	b095      	sub	sp, #84	; 0x54
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077c4:	643a      	str	r2, [r7, #64]	; 0x40
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e5      	bne.n	80077a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	2b01      	cmp	r3, #1
 8007812:	d119      	bne.n	8007848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60bb      	str	r3, [r7, #8]
   return(result);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	647b      	str	r3, [r7, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007834:	61ba      	str	r2, [r7, #24]
 8007836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	613b      	str	r3, [r7, #16]
   return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007856:	bf00      	nop
 8007858:	3754      	adds	r7, #84	; 0x54
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr

08007860 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff ff7a 	bl	8007774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b21      	cmp	r3, #33	; 0x21
 800789a:	d13e      	bne.n	800791a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a4:	d114      	bne.n	80078d0 <UART_Transmit_IT+0x48>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d110      	bne.n	80078d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]
 80078ce:	e008      	b.n	80078e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	1c59      	adds	r1, r3, #1
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6211      	str	r1, [r2, #32]
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10f      	bne.n	8007916 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007904:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	e000      	b.n	800791c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800791a:	2302      	movs	r3, #2
  }
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff ff02 	bl	8007750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b08c      	sub	sp, #48	; 0x30
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b22      	cmp	r3, #34	; 0x22
 8007968:	f040 80ae 	bne.w	8007ac8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	d117      	bne.n	80079a6 <UART_Receive_IT+0x50>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d113      	bne.n	80079a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	b29a      	uxth	r2, r3
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	1c9a      	adds	r2, r3, #2
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	; 0x28
 80079a4:	e026      	b.n	80079f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d007      	beq.n	80079ca <UART_Receive_IT+0x74>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <UART_Receive_IT+0x82>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e008      	b.n	80079ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4619      	mov	r1, r3
 8007a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d15d      	bne.n	8007ac4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0220 	bic.w	r2, r2, #32
 8007a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0201 	bic.w	r2, r2, #1
 8007a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d135      	bne.n	8007aba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	613b      	str	r3, [r7, #16]
   return(result);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a74:	623a      	str	r2, [r7, #32]
 8007a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e5      	bne.n	8007a54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d10a      	bne.n	8007aac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fe67 	bl	8007786 <HAL_UARTEx_RxEventCallback>
 8007ab8:	e002      	b.n	8007ac0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fe51 	bl	8007762 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e002      	b.n	8007aca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e000      	b.n	8007aca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ac8:	2302      	movs	r3, #2
  }
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3730      	adds	r7, #48	; 0x30
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b0e:	f023 030c 	bic.w	r3, r3, #12
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6812      	ldr	r2, [r2, #0]
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a2c      	ldr	r2, [pc, #176]	; (8007be8 <UART_SetConfig+0x114>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d103      	bne.n	8007b44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b3c:	f7fd fd7c 	bl	8005638 <HAL_RCC_GetPCLK2Freq>
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	e002      	b.n	8007b4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b44:	f7fd fd64 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8007b48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009a      	lsls	r2, r3, #2
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b60:	4a22      	ldr	r2, [pc, #136]	; (8007bec <UART_SetConfig+0x118>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	0119      	lsls	r1, r3, #4
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009a      	lsls	r2, r3, #2
 8007b74:	441a      	add	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b80:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <UART_SetConfig+0x118>)
 8007b82:	fba3 0302 	umull	r0, r3, r3, r2
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	2064      	movs	r0, #100	; 0x64
 8007b8a:	fb00 f303 	mul.w	r3, r0, r3
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	3332      	adds	r3, #50	; 0x32
 8007b94:	4a15      	ldr	r2, [pc, #84]	; (8007bec <UART_SetConfig+0x118>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ba0:	4419      	add	r1, r3
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009a      	lsls	r2, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <UART_SetConfig+0x118>)
 8007bba:	fba3 0302 	umull	r0, r3, r3, r2
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	2064      	movs	r0, #100	; 0x64
 8007bc2:	fb00 f303 	mul.w	r3, r0, r3
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	3332      	adds	r3, #50	; 0x32
 8007bcc:	4a07      	ldr	r2, [pc, #28]	; (8007bec <UART_SetConfig+0x118>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	f003 020f 	and.w	r2, r3, #15
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	440a      	add	r2, r1
 8007bde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40013800 	.word	0x40013800
 8007bec:	51eb851f 	.word	0x51eb851f

08007bf0 <memset>:
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	4402      	add	r2, r0
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d100      	bne.n	8007bfa <memset+0xa>
 8007bf8:	4770      	bx	lr
 8007bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfe:	e7f9      	b.n	8007bf4 <memset+0x4>

08007c00 <__errno>:
 8007c00:	4b01      	ldr	r3, [pc, #4]	; (8007c08 <__errno+0x8>)
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000078 	.word	0x20000078

08007c0c <__libc_init_array>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	2600      	movs	r6, #0
 8007c10:	4d0c      	ldr	r5, [pc, #48]	; (8007c44 <__libc_init_array+0x38>)
 8007c12:	4c0d      	ldr	r4, [pc, #52]	; (8007c48 <__libc_init_array+0x3c>)
 8007c14:	1b64      	subs	r4, r4, r5
 8007c16:	10a4      	asrs	r4, r4, #2
 8007c18:	42a6      	cmp	r6, r4
 8007c1a:	d109      	bne.n	8007c30 <__libc_init_array+0x24>
 8007c1c:	f000 fb86 	bl	800832c <_init>
 8007c20:	2600      	movs	r6, #0
 8007c22:	4d0a      	ldr	r5, [pc, #40]	; (8007c4c <__libc_init_array+0x40>)
 8007c24:	4c0a      	ldr	r4, [pc, #40]	; (8007c50 <__libc_init_array+0x44>)
 8007c26:	1b64      	subs	r4, r4, r5
 8007c28:	10a4      	asrs	r4, r4, #2
 8007c2a:	42a6      	cmp	r6, r4
 8007c2c:	d105      	bne.n	8007c3a <__libc_init_array+0x2e>
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c34:	4798      	blx	r3
 8007c36:	3601      	adds	r6, #1
 8007c38:	e7ee      	b.n	8007c18 <__libc_init_array+0xc>
 8007c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c3e:	4798      	blx	r3
 8007c40:	3601      	adds	r6, #1
 8007c42:	e7f2      	b.n	8007c2a <__libc_init_array+0x1e>
 8007c44:	08008470 	.word	0x08008470
 8007c48:	08008470 	.word	0x08008470
 8007c4c:	08008470 	.word	0x08008470
 8007c50:	08008474 	.word	0x08008474

08007c54 <memcpy>:
 8007c54:	440a      	add	r2, r1
 8007c56:	4291      	cmp	r1, r2
 8007c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c5c:	d100      	bne.n	8007c60 <memcpy+0xc>
 8007c5e:	4770      	bx	lr
 8007c60:	b510      	push	{r4, lr}
 8007c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c66:	4291      	cmp	r1, r2
 8007c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c6c:	d1f9      	bne.n	8007c62 <memcpy+0xe>
 8007c6e:	bd10      	pop	{r4, pc}

08007c70 <atan2>:
 8007c70:	f000 b8fe 	b.w	8007e70 <__ieee754_atan2>

08007c74 <sqrt>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	f000 f81f 	bl	8007cbc <__ieee754_sqrt>
 8007c7e:	4632      	mov	r2, r6
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	463b      	mov	r3, r7
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 ff23 	bl	8000ad4 <__aeabi_dcmpun>
 8007c8e:	b990      	cbnz	r0, 8007cb6 <sqrt+0x42>
 8007c90:	2200      	movs	r2, #0
 8007c92:	2300      	movs	r3, #0
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fef4 	bl	8000a84 <__aeabi_dcmplt>
 8007c9c:	b158      	cbz	r0, 8007cb6 <sqrt+0x42>
 8007c9e:	f7ff ffaf 	bl	8007c00 <__errno>
 8007ca2:	2321      	movs	r3, #33	; 0x21
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	6003      	str	r3, [r0, #0]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	f7f8 fda1 	bl	80007f4 <__aeabi_ddiv>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	460d      	mov	r5, r1
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cbc <__ieee754_sqrt>:
 8007cbc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007e60 <__ieee754_sqrt+0x1a4>
 8007cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	ea3c 0c01 	bics.w	ip, ip, r1
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460d      	mov	r5, r1
 8007cce:	460a      	mov	r2, r1
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	d10e      	bne.n	8007cf2 <__ieee754_sqrt+0x36>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f7f8 fc63 	bl	80005a0 <__aeabi_dmul>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4630      	mov	r0, r6
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f8 faa7 	bl	8000234 <__adddf3>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460d      	mov	r5, r1
 8007cea:	4630      	mov	r0, r6
 8007cec:	4629      	mov	r1, r5
 8007cee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	dc0d      	bgt.n	8007d12 <__ieee754_sqrt+0x56>
 8007cf6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007cfa:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007cfe:	d0f4      	beq.n	8007cea <__ieee754_sqrt+0x2e>
 8007d00:	b139      	cbz	r1, 8007d12 <__ieee754_sqrt+0x56>
 8007d02:	4602      	mov	r2, r0
 8007d04:	f7f8 fa94 	bl	8000230 <__aeabi_dsub>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	f7f8 fd72 	bl	80007f4 <__aeabi_ddiv>
 8007d10:	e7e9      	b.n	8007ce6 <__ieee754_sqrt+0x2a>
 8007d12:	1512      	asrs	r2, r2, #20
 8007d14:	f000 8089 	beq.w	8007e2a <__ieee754_sqrt+0x16e>
 8007d18:	2500      	movs	r5, #0
 8007d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d1e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d26:	07d2      	lsls	r2, r2, #31
 8007d28:	bf5c      	itt	pl
 8007d2a:	005b      	lslpl	r3, r3, #1
 8007d2c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007d30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d34:	bf58      	it	pl
 8007d36:	0064      	lslpl	r4, r4, #1
 8007d38:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007d3c:	0062      	lsls	r2, r4, #1
 8007d3e:	2016      	movs	r0, #22
 8007d40:	4629      	mov	r1, r5
 8007d42:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007d46:	1076      	asrs	r6, r6, #1
 8007d48:	190f      	adds	r7, r1, r4
 8007d4a:	429f      	cmp	r7, r3
 8007d4c:	bfde      	ittt	le
 8007d4e:	1bdb      	suble	r3, r3, r7
 8007d50:	1939      	addle	r1, r7, r4
 8007d52:	192d      	addle	r5, r5, r4
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	3801      	subs	r0, #1
 8007d58:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007d5c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007d60:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007d64:	d1f0      	bne.n	8007d48 <__ieee754_sqrt+0x8c>
 8007d66:	4604      	mov	r4, r0
 8007d68:	2720      	movs	r7, #32
 8007d6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007d6e:	428b      	cmp	r3, r1
 8007d70:	eb0c 0e00 	add.w	lr, ip, r0
 8007d74:	dc02      	bgt.n	8007d7c <__ieee754_sqrt+0xc0>
 8007d76:	d113      	bne.n	8007da0 <__ieee754_sqrt+0xe4>
 8007d78:	4596      	cmp	lr, r2
 8007d7a:	d811      	bhi.n	8007da0 <__ieee754_sqrt+0xe4>
 8007d7c:	f1be 0f00 	cmp.w	lr, #0
 8007d80:	eb0e 000c 	add.w	r0, lr, ip
 8007d84:	da56      	bge.n	8007e34 <__ieee754_sqrt+0x178>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	db54      	blt.n	8007e34 <__ieee754_sqrt+0x178>
 8007d8a:	f101 0801 	add.w	r8, r1, #1
 8007d8e:	1a5b      	subs	r3, r3, r1
 8007d90:	4641      	mov	r1, r8
 8007d92:	4596      	cmp	lr, r2
 8007d94:	bf88      	it	hi
 8007d96:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007d9a:	eba2 020e 	sub.w	r2, r2, lr
 8007d9e:	4464      	add	r4, ip
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	3f01      	subs	r7, #1
 8007da4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007da8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007dac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007db0:	d1dd      	bne.n	8007d6e <__ieee754_sqrt+0xb2>
 8007db2:	4313      	orrs	r3, r2
 8007db4:	d01b      	beq.n	8007dee <__ieee754_sqrt+0x132>
 8007db6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007e64 <__ieee754_sqrt+0x1a8>
 8007dba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007e68 <__ieee754_sqrt+0x1ac>
 8007dbe:	e9da 0100 	ldrd	r0, r1, [sl]
 8007dc2:	e9db 2300 	ldrd	r2, r3, [fp]
 8007dc6:	f7f8 fa33 	bl	8000230 <__aeabi_dsub>
 8007dca:	e9da 8900 	ldrd	r8, r9, [sl]
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	f7f8 fe5f 	bl	8000a98 <__aeabi_dcmple>
 8007dda:	b140      	cbz	r0, 8007dee <__ieee754_sqrt+0x132>
 8007ddc:	e9da 0100 	ldrd	r0, r1, [sl]
 8007de0:	e9db 2300 	ldrd	r2, r3, [fp]
 8007de4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007de8:	d126      	bne.n	8007e38 <__ieee754_sqrt+0x17c>
 8007dea:	463c      	mov	r4, r7
 8007dec:	3501      	adds	r5, #1
 8007dee:	106b      	asrs	r3, r5, #1
 8007df0:	0864      	lsrs	r4, r4, #1
 8007df2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007df6:	07ea      	lsls	r2, r5, #31
 8007df8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007dfc:	bf48      	it	mi
 8007dfe:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8007e02:	4620      	mov	r0, r4
 8007e04:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007e08:	e76d      	b.n	8007ce6 <__ieee754_sqrt+0x2a>
 8007e0a:	0ae3      	lsrs	r3, r4, #11
 8007e0c:	3915      	subs	r1, #21
 8007e0e:	0564      	lsls	r4, r4, #21
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0fa      	beq.n	8007e0a <__ieee754_sqrt+0x14e>
 8007e14:	02d8      	lsls	r0, r3, #11
 8007e16:	d50a      	bpl.n	8007e2e <__ieee754_sqrt+0x172>
 8007e18:	f1c2 0020 	rsb	r0, r2, #32
 8007e1c:	fa24 f000 	lsr.w	r0, r4, r0
 8007e20:	1e55      	subs	r5, r2, #1
 8007e22:	4094      	lsls	r4, r2
 8007e24:	4303      	orrs	r3, r0
 8007e26:	1b4a      	subs	r2, r1, r5
 8007e28:	e776      	b.n	8007d18 <__ieee754_sqrt+0x5c>
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	e7f0      	b.n	8007e10 <__ieee754_sqrt+0x154>
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	3201      	adds	r2, #1
 8007e32:	e7ef      	b.n	8007e14 <__ieee754_sqrt+0x158>
 8007e34:	4688      	mov	r8, r1
 8007e36:	e7aa      	b.n	8007d8e <__ieee754_sqrt+0xd2>
 8007e38:	f7f8 f9fc 	bl	8000234 <__adddf3>
 8007e3c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4640      	mov	r0, r8
 8007e46:	4649      	mov	r1, r9
 8007e48:	f7f8 fe1c 	bl	8000a84 <__aeabi_dcmplt>
 8007e4c:	b120      	cbz	r0, 8007e58 <__ieee754_sqrt+0x19c>
 8007e4e:	1ca1      	adds	r1, r4, #2
 8007e50:	bf08      	it	eq
 8007e52:	3501      	addeq	r5, #1
 8007e54:	3402      	adds	r4, #2
 8007e56:	e7ca      	b.n	8007dee <__ieee754_sqrt+0x132>
 8007e58:	3401      	adds	r4, #1
 8007e5a:	f024 0401 	bic.w	r4, r4, #1
 8007e5e:	e7c6      	b.n	8007dee <__ieee754_sqrt+0x132>
 8007e60:	7ff00000 	.word	0x7ff00000
 8007e64:	20000080 	.word	0x20000080
 8007e68:	20000088 	.word	0x20000088
 8007e6c:	00000000 	.word	0x00000000

08007e70 <__ieee754_atan2>:
 8007e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	4617      	mov	r7, r2
 8007e76:	4692      	mov	sl, r2
 8007e78:	4699      	mov	r9, r3
 8007e7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e7e:	427b      	negs	r3, r7
 8007e80:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008000 <__ieee754_atan2+0x190>
 8007e84:	433b      	orrs	r3, r7
 8007e86:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007e8a:	4543      	cmp	r3, r8
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	460d      	mov	r5, r1
 8007e90:	d809      	bhi.n	8007ea6 <__ieee754_atan2+0x36>
 8007e92:	4246      	negs	r6, r0
 8007e94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e98:	4306      	orrs	r6, r0
 8007e9a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007e9e:	4546      	cmp	r6, r8
 8007ea0:	468e      	mov	lr, r1
 8007ea2:	4683      	mov	fp, r0
 8007ea4:	d908      	bls.n	8007eb8 <__ieee754_atan2+0x48>
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 f9c1 	bl	8000234 <__adddf3>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	e019      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007eb8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007ebc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007ec0:	433e      	orrs	r6, r7
 8007ec2:	d103      	bne.n	8007ecc <__ieee754_atan2+0x5c>
 8007ec4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	f000 b8a2 	b.w	8008010 <atan>
 8007ecc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007ed0:	f006 0602 	and.w	r6, r6, #2
 8007ed4:	ea53 0b0b 	orrs.w	fp, r3, fp
 8007ed8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007edc:	d10a      	bne.n	8007ef4 <__ieee754_atan2+0x84>
 8007ede:	2e02      	cmp	r6, #2
 8007ee0:	d067      	beq.n	8007fb2 <__ieee754_atan2+0x142>
 8007ee2:	2e03      	cmp	r6, #3
 8007ee4:	d102      	bne.n	8007eec <__ieee754_atan2+0x7c>
 8007ee6:	a53a      	add	r5, pc, #232	; (adr r5, 8007fd0 <__ieee754_atan2+0x160>)
 8007ee8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	4317      	orrs	r7, r2
 8007ef6:	d106      	bne.n	8007f06 <__ieee754_atan2+0x96>
 8007ef8:	f1be 0f00 	cmp.w	lr, #0
 8007efc:	da64      	bge.n	8007fc8 <__ieee754_atan2+0x158>
 8007efe:	a536      	add	r5, pc, #216	; (adr r5, 8007fd8 <__ieee754_atan2+0x168>)
 8007f00:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f04:	e7f2      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007f06:	4542      	cmp	r2, r8
 8007f08:	d10f      	bne.n	8007f2a <__ieee754_atan2+0xba>
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	f106 36ff 	add.w	r6, r6, #4294967295
 8007f10:	d107      	bne.n	8007f22 <__ieee754_atan2+0xb2>
 8007f12:	2e02      	cmp	r6, #2
 8007f14:	d851      	bhi.n	8007fba <__ieee754_atan2+0x14a>
 8007f16:	4b3b      	ldr	r3, [pc, #236]	; (8008004 <__ieee754_atan2+0x194>)
 8007f18:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007f20:	e7e4      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007f22:	2e02      	cmp	r6, #2
 8007f24:	d84d      	bhi.n	8007fc2 <__ieee754_atan2+0x152>
 8007f26:	4b38      	ldr	r3, [pc, #224]	; (8008008 <__ieee754_atan2+0x198>)
 8007f28:	e7f6      	b.n	8007f18 <__ieee754_atan2+0xa8>
 8007f2a:	4543      	cmp	r3, r8
 8007f2c:	d0e4      	beq.n	8007ef8 <__ieee754_atan2+0x88>
 8007f2e:	1a9b      	subs	r3, r3, r2
 8007f30:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007f34:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f38:	da21      	bge.n	8007f7e <__ieee754_atan2+0x10e>
 8007f3a:	f1b9 0f00 	cmp.w	r9, #0
 8007f3e:	da01      	bge.n	8007f44 <__ieee754_atan2+0xd4>
 8007f40:	323c      	adds	r2, #60	; 0x3c
 8007f42:	db20      	blt.n	8007f86 <__ieee754_atan2+0x116>
 8007f44:	4652      	mov	r2, sl
 8007f46:	464b      	mov	r3, r9
 8007f48:	4620      	mov	r0, r4
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f7f8 fc52 	bl	80007f4 <__aeabi_ddiv>
 8007f50:	f000 f9e8 	bl	8008324 <fabs>
 8007f54:	f000 f85c 	bl	8008010 <atan>
 8007f58:	4604      	mov	r4, r0
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	2e01      	cmp	r6, #1
 8007f5e:	d015      	beq.n	8007f8c <__ieee754_atan2+0x11c>
 8007f60:	2e02      	cmp	r6, #2
 8007f62:	d017      	beq.n	8007f94 <__ieee754_atan2+0x124>
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	d0c1      	beq.n	8007eec <__ieee754_atan2+0x7c>
 8007f68:	a31d      	add	r3, pc, #116	; (adr r3, 8007fe0 <__ieee754_atan2+0x170>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 f95d 	bl	8000230 <__aeabi_dsub>
 8007f76:	a31c      	add	r3, pc, #112	; (adr r3, 8007fe8 <__ieee754_atan2+0x178>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	e016      	b.n	8007fac <__ieee754_atan2+0x13c>
 8007f7e:	a51c      	add	r5, pc, #112	; (adr r5, 8007ff0 <__ieee754_atan2+0x180>)
 8007f80:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f84:	e7ea      	b.n	8007f5c <__ieee754_atan2+0xec>
 8007f86:	2400      	movs	r4, #0
 8007f88:	2500      	movs	r5, #0
 8007f8a:	e7e7      	b.n	8007f5c <__ieee754_atan2+0xec>
 8007f8c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f90:	461d      	mov	r5, r3
 8007f92:	e7ab      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007f94:	a312      	add	r3, pc, #72	; (adr r3, 8007fe0 <__ieee754_atan2+0x170>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	f7f8 f947 	bl	8000230 <__aeabi_dsub>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	a110      	add	r1, pc, #64	; (adr r1, 8007fe8 <__ieee754_atan2+0x178>)
 8007fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fac:	f7f8 f940 	bl	8000230 <__aeabi_dsub>
 8007fb0:	e77f      	b.n	8007eb2 <__ieee754_atan2+0x42>
 8007fb2:	a50d      	add	r5, pc, #52	; (adr r5, 8007fe8 <__ieee754_atan2+0x178>)
 8007fb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fb8:	e798      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007fba:	a50f      	add	r5, pc, #60	; (adr r5, 8007ff8 <__ieee754_atan2+0x188>)
 8007fbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fc0:	e794      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007fc2:	2400      	movs	r4, #0
 8007fc4:	2500      	movs	r5, #0
 8007fc6:	e791      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007fc8:	a509      	add	r5, pc, #36	; (adr r5, 8007ff0 <__ieee754_atan2+0x180>)
 8007fca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fce:	e78d      	b.n	8007eec <__ieee754_atan2+0x7c>
 8007fd0:	54442d18 	.word	0x54442d18
 8007fd4:	c00921fb 	.word	0xc00921fb
 8007fd8:	54442d18 	.word	0x54442d18
 8007fdc:	bff921fb 	.word	0xbff921fb
 8007fe0:	33145c07 	.word	0x33145c07
 8007fe4:	3ca1a626 	.word	0x3ca1a626
 8007fe8:	54442d18 	.word	0x54442d18
 8007fec:	400921fb 	.word	0x400921fb
 8007ff0:	54442d18 	.word	0x54442d18
 8007ff4:	3ff921fb 	.word	0x3ff921fb
 8007ff8:	54442d18 	.word	0x54442d18
 8007ffc:	3fe921fb 	.word	0x3fe921fb
 8008000:	7ff00000 	.word	0x7ff00000
 8008004:	08008400 	.word	0x08008400
 8008008:	08008418 	.word	0x08008418
 800800c:	00000000 	.word	0x00000000

08008010 <atan>:
 8008010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	4bb6      	ldr	r3, [pc, #728]	; (80082f0 <atan+0x2e0>)
 8008016:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800801a:	429e      	cmp	r6, r3
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	468b      	mov	fp, r1
 8008022:	dd17      	ble.n	8008054 <atan+0x44>
 8008024:	4bb3      	ldr	r3, [pc, #716]	; (80082f4 <atan+0x2e4>)
 8008026:	429e      	cmp	r6, r3
 8008028:	dc01      	bgt.n	800802e <atan+0x1e>
 800802a:	d109      	bne.n	8008040 <atan+0x30>
 800802c:	b140      	cbz	r0, 8008040 <atan+0x30>
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 f8fd 	bl	8000234 <__adddf3>
 800803a:	4604      	mov	r4, r0
 800803c:	460d      	mov	r5, r1
 800803e:	e005      	b.n	800804c <atan+0x3c>
 8008040:	f1bb 0f00 	cmp.w	fp, #0
 8008044:	4cac      	ldr	r4, [pc, #688]	; (80082f8 <atan+0x2e8>)
 8008046:	f300 8121 	bgt.w	800828c <atan+0x27c>
 800804a:	4dac      	ldr	r5, [pc, #688]	; (80082fc <atan+0x2ec>)
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	4baa      	ldr	r3, [pc, #680]	; (8008300 <atan+0x2f0>)
 8008056:	429e      	cmp	r6, r3
 8008058:	dc11      	bgt.n	800807e <atan+0x6e>
 800805a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800805e:	429e      	cmp	r6, r3
 8008060:	dc0a      	bgt.n	8008078 <atan+0x68>
 8008062:	a38b      	add	r3, pc, #556	; (adr r3, 8008290 <atan+0x280>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 f8e4 	bl	8000234 <__adddf3>
 800806c:	2200      	movs	r2, #0
 800806e:	4ba5      	ldr	r3, [pc, #660]	; (8008304 <atan+0x2f4>)
 8008070:	f7f8 fd26 	bl	8000ac0 <__aeabi_dcmpgt>
 8008074:	2800      	cmp	r0, #0
 8008076:	d1e9      	bne.n	800804c <atan+0x3c>
 8008078:	f04f 3aff 	mov.w	sl, #4294967295
 800807c:	e027      	b.n	80080ce <atan+0xbe>
 800807e:	f000 f951 	bl	8008324 <fabs>
 8008082:	4ba1      	ldr	r3, [pc, #644]	; (8008308 <atan+0x2f8>)
 8008084:	4604      	mov	r4, r0
 8008086:	429e      	cmp	r6, r3
 8008088:	460d      	mov	r5, r1
 800808a:	f300 80b8 	bgt.w	80081fe <atan+0x1ee>
 800808e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008092:	429e      	cmp	r6, r3
 8008094:	f300 809c 	bgt.w	80081d0 <atan+0x1c0>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	f7f8 f8ca 	bl	8000234 <__adddf3>
 80080a0:	2200      	movs	r2, #0
 80080a2:	4b98      	ldr	r3, [pc, #608]	; (8008304 <atan+0x2f4>)
 80080a4:	f7f8 f8c4 	bl	8000230 <__aeabi_dsub>
 80080a8:	2200      	movs	r2, #0
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080b2:	4620      	mov	r0, r4
 80080b4:	4629      	mov	r1, r5
 80080b6:	f7f8 f8bd 	bl	8000234 <__adddf3>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4630      	mov	r0, r6
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 fb97 	bl	80007f4 <__aeabi_ddiv>
 80080c6:	f04f 0a00 	mov.w	sl, #0
 80080ca:	4604      	mov	r4, r0
 80080cc:	460d      	mov	r5, r1
 80080ce:	4622      	mov	r2, r4
 80080d0:	462b      	mov	r3, r5
 80080d2:	4620      	mov	r0, r4
 80080d4:	4629      	mov	r1, r5
 80080d6:	f7f8 fa63 	bl	80005a0 <__aeabi_dmul>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4680      	mov	r8, r0
 80080e0:	4689      	mov	r9, r1
 80080e2:	f7f8 fa5d 	bl	80005a0 <__aeabi_dmul>
 80080e6:	a36c      	add	r3, pc, #432	; (adr r3, 8008298 <atan+0x288>)
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	f7f8 fa56 	bl	80005a0 <__aeabi_dmul>
 80080f4:	a36a      	add	r3, pc, #424	; (adr r3, 80082a0 <atan+0x290>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f89b 	bl	8000234 <__adddf3>
 80080fe:	4632      	mov	r2, r6
 8008100:	463b      	mov	r3, r7
 8008102:	f7f8 fa4d 	bl	80005a0 <__aeabi_dmul>
 8008106:	a368      	add	r3, pc, #416	; (adr r3, 80082a8 <atan+0x298>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f892 	bl	8000234 <__adddf3>
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	f7f8 fa44 	bl	80005a0 <__aeabi_dmul>
 8008118:	a365      	add	r3, pc, #404	; (adr r3, 80082b0 <atan+0x2a0>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 f889 	bl	8000234 <__adddf3>
 8008122:	4632      	mov	r2, r6
 8008124:	463b      	mov	r3, r7
 8008126:	f7f8 fa3b 	bl	80005a0 <__aeabi_dmul>
 800812a:	a363      	add	r3, pc, #396	; (adr r3, 80082b8 <atan+0x2a8>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 f880 	bl	8000234 <__adddf3>
 8008134:	4632      	mov	r2, r6
 8008136:	463b      	mov	r3, r7
 8008138:	f7f8 fa32 	bl	80005a0 <__aeabi_dmul>
 800813c:	a360      	add	r3, pc, #384	; (adr r3, 80082c0 <atan+0x2b0>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	f7f8 f877 	bl	8000234 <__adddf3>
 8008146:	4642      	mov	r2, r8
 8008148:	464b      	mov	r3, r9
 800814a:	f7f8 fa29 	bl	80005a0 <__aeabi_dmul>
 800814e:	a35e      	add	r3, pc, #376	; (adr r3, 80082c8 <atan+0x2b8>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	4680      	mov	r8, r0
 8008156:	4689      	mov	r9, r1
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f7f8 fa20 	bl	80005a0 <__aeabi_dmul>
 8008160:	a35b      	add	r3, pc, #364	; (adr r3, 80082d0 <atan+0x2c0>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f7f8 f863 	bl	8000230 <__aeabi_dsub>
 800816a:	4632      	mov	r2, r6
 800816c:	463b      	mov	r3, r7
 800816e:	f7f8 fa17 	bl	80005a0 <__aeabi_dmul>
 8008172:	a359      	add	r3, pc, #356	; (adr r3, 80082d8 <atan+0x2c8>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f85a 	bl	8000230 <__aeabi_dsub>
 800817c:	4632      	mov	r2, r6
 800817e:	463b      	mov	r3, r7
 8008180:	f7f8 fa0e 	bl	80005a0 <__aeabi_dmul>
 8008184:	a356      	add	r3, pc, #344	; (adr r3, 80082e0 <atan+0x2d0>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f8 f851 	bl	8000230 <__aeabi_dsub>
 800818e:	4632      	mov	r2, r6
 8008190:	463b      	mov	r3, r7
 8008192:	f7f8 fa05 	bl	80005a0 <__aeabi_dmul>
 8008196:	a354      	add	r3, pc, #336	; (adr r3, 80082e8 <atan+0x2d8>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f7f8 f848 	bl	8000230 <__aeabi_dsub>
 80081a0:	4632      	mov	r2, r6
 80081a2:	463b      	mov	r3, r7
 80081a4:	f7f8 f9fc 	bl	80005a0 <__aeabi_dmul>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4640      	mov	r0, r8
 80081ae:	4649      	mov	r1, r9
 80081b0:	f7f8 f840 	bl	8000234 <__adddf3>
 80081b4:	4622      	mov	r2, r4
 80081b6:	462b      	mov	r3, r5
 80081b8:	f7f8 f9f2 	bl	80005a0 <__aeabi_dmul>
 80081bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	d144      	bne.n	8008250 <atan+0x240>
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7f8 f831 	bl	8000230 <__aeabi_dsub>
 80081ce:	e734      	b.n	800803a <atan+0x2a>
 80081d0:	2200      	movs	r2, #0
 80081d2:	4b4c      	ldr	r3, [pc, #304]	; (8008304 <atan+0x2f4>)
 80081d4:	f7f8 f82c 	bl	8000230 <__aeabi_dsub>
 80081d8:	2200      	movs	r2, #0
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	4b48      	ldr	r3, [pc, #288]	; (8008304 <atan+0x2f4>)
 80081e4:	f7f8 f826 	bl	8000234 <__adddf3>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 fb00 	bl	80007f4 <__aeabi_ddiv>
 80081f4:	f04f 0a01 	mov.w	sl, #1
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	e767      	b.n	80080ce <atan+0xbe>
 80081fe:	4b43      	ldr	r3, [pc, #268]	; (800830c <atan+0x2fc>)
 8008200:	429e      	cmp	r6, r3
 8008202:	da1a      	bge.n	800823a <atan+0x22a>
 8008204:	2200      	movs	r2, #0
 8008206:	4b42      	ldr	r3, [pc, #264]	; (8008310 <atan+0x300>)
 8008208:	f7f8 f812 	bl	8000230 <__aeabi_dsub>
 800820c:	2200      	movs	r2, #0
 800820e:	4606      	mov	r6, r0
 8008210:	460f      	mov	r7, r1
 8008212:	4620      	mov	r0, r4
 8008214:	4629      	mov	r1, r5
 8008216:	4b3e      	ldr	r3, [pc, #248]	; (8008310 <atan+0x300>)
 8008218:	f7f8 f9c2 	bl	80005a0 <__aeabi_dmul>
 800821c:	2200      	movs	r2, #0
 800821e:	4b39      	ldr	r3, [pc, #228]	; (8008304 <atan+0x2f4>)
 8008220:	f7f8 f808 	bl	8000234 <__adddf3>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f8 fae2 	bl	80007f4 <__aeabi_ddiv>
 8008230:	f04f 0a02 	mov.w	sl, #2
 8008234:	4604      	mov	r4, r0
 8008236:	460d      	mov	r5, r1
 8008238:	e749      	b.n	80080ce <atan+0xbe>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	2000      	movs	r0, #0
 8008240:	4934      	ldr	r1, [pc, #208]	; (8008314 <atan+0x304>)
 8008242:	f7f8 fad7 	bl	80007f4 <__aeabi_ddiv>
 8008246:	f04f 0a03 	mov.w	sl, #3
 800824a:	4604      	mov	r4, r0
 800824c:	460d      	mov	r5, r1
 800824e:	e73e      	b.n	80080ce <atan+0xbe>
 8008250:	4b31      	ldr	r3, [pc, #196]	; (8008318 <atan+0x308>)
 8008252:	4e32      	ldr	r6, [pc, #200]	; (800831c <atan+0x30c>)
 8008254:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f7 ffe8 	bl	8000230 <__aeabi_dsub>
 8008260:	4622      	mov	r2, r4
 8008262:	462b      	mov	r3, r5
 8008264:	f7f7 ffe4 	bl	8000230 <__aeabi_dsub>
 8008268:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008274:	f7f7 ffdc 	bl	8000230 <__aeabi_dsub>
 8008278:	f1bb 0f00 	cmp.w	fp, #0
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	f6bf aee4 	bge.w	800804c <atan+0x3c>
 8008284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008288:	461d      	mov	r5, r3
 800828a:	e6df      	b.n	800804c <atan+0x3c>
 800828c:	4d24      	ldr	r5, [pc, #144]	; (8008320 <atan+0x310>)
 800828e:	e6dd      	b.n	800804c <atan+0x3c>
 8008290:	8800759c 	.word	0x8800759c
 8008294:	7e37e43c 	.word	0x7e37e43c
 8008298:	e322da11 	.word	0xe322da11
 800829c:	3f90ad3a 	.word	0x3f90ad3a
 80082a0:	24760deb 	.word	0x24760deb
 80082a4:	3fa97b4b 	.word	0x3fa97b4b
 80082a8:	a0d03d51 	.word	0xa0d03d51
 80082ac:	3fb10d66 	.word	0x3fb10d66
 80082b0:	c54c206e 	.word	0xc54c206e
 80082b4:	3fb745cd 	.word	0x3fb745cd
 80082b8:	920083ff 	.word	0x920083ff
 80082bc:	3fc24924 	.word	0x3fc24924
 80082c0:	5555550d 	.word	0x5555550d
 80082c4:	3fd55555 	.word	0x3fd55555
 80082c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80082cc:	bfa2b444 	.word	0xbfa2b444
 80082d0:	52defd9a 	.word	0x52defd9a
 80082d4:	3fadde2d 	.word	0x3fadde2d
 80082d8:	af749a6d 	.word	0xaf749a6d
 80082dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80082e0:	fe231671 	.word	0xfe231671
 80082e4:	3fbc71c6 	.word	0x3fbc71c6
 80082e8:	9998ebc4 	.word	0x9998ebc4
 80082ec:	3fc99999 	.word	0x3fc99999
 80082f0:	440fffff 	.word	0x440fffff
 80082f4:	7ff00000 	.word	0x7ff00000
 80082f8:	54442d18 	.word	0x54442d18
 80082fc:	bff921fb 	.word	0xbff921fb
 8008300:	3fdbffff 	.word	0x3fdbffff
 8008304:	3ff00000 	.word	0x3ff00000
 8008308:	3ff2ffff 	.word	0x3ff2ffff
 800830c:	40038000 	.word	0x40038000
 8008310:	3ff80000 	.word	0x3ff80000
 8008314:	bff00000 	.word	0xbff00000
 8008318:	08008450 	.word	0x08008450
 800831c:	08008430 	.word	0x08008430
 8008320:	3ff921fb 	.word	0x3ff921fb

08008324 <fabs>:
 8008324:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008328:	4619      	mov	r1, r3
 800832a:	4770      	bx	lr

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
