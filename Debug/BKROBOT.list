
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c14  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007e00  08007e00  00017e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f28  08007f28  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007f28  08007f28  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f28  08007f28  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f28  08007f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007f30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000088  08007fb8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08007fb8  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158af  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a08  00000000  00000000  000359a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  000393b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe4  00000000  00000000  0003a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c7a9  00000000  00000000  0003b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bed2  00000000  00000000  00057fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2be8  00000000  00000000  00073e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057a4  00000000  00000000  00116a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0011c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000088 	.word	0x20000088
 8000204:	00000000 	.word	0x00000000
 8000208:	08007de4 	.word	0x08007de4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000008c 	.word	0x2000008c
 8000224:	08007de4 	.word	0x08007de4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b60:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b62:	4a4b      	ldr	r2, [pc, #300]	; (8000c90 <MX_ADC1_Init+0x140>)
 8000b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b88:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8e:	483f      	ldr	r0, [pc, #252]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b90:	f002 f8a8 	bl	8002ce4 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b9a:	f000 fe95 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bb0:	f002 f982 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fe85 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bcc:	f002 f974 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 fe77 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4829      	ldr	r0, [pc, #164]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000be8:	f002 f966 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 fe69 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c04:	f002 f958 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c0e:	f000 fe5b 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c12:	230c      	movs	r3, #12
 8000c14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c20:	f002 f94a 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c2a:	f000 fe4d 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c2e:	230d      	movs	r3, #13
 8000c30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c32:	2306      	movs	r3, #6
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c3c:	f002 f93c 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c46:	f000 fe3f 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c58:	f002 f92e 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c62:	f000 fe31 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c66:	230f      	movs	r3, #15
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c74:	f002 f920 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c7e:	f000 fe23 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000a4 	.word	0x200000a4
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <HAL_ADC_MspInit+0xe8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d15f      	bne.n	8000d74 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cfc:	233f      	movs	r3, #63	; 0x3f
 8000cfe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481e      	ldr	r0, [pc, #120]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000d0c:	f002 ff12 	bl	8003b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <HAL_ADC_MspInit+0xf4>)
 8000d20:	f002 ff08 	bl	8003b34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d5a:	f002 faf5 	bl	8003348 <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000d64:	f000 fdb0 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d6c:	621a      	str	r2, [r3, #32]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012400 	.word	0x40012400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40010c00 	.word	0x40010c00
 8000d8c:	200000d4 	.word	0x200000d4
 8000d90:	40020008 	.word	0x40020008

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_DMA_Init+0x38>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <MX_DMA_Init+0x38>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_DMA_Init+0x38>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	200b      	movs	r0, #11
 8000db8:	f002 fa8f 	bl	80032da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dbc:	200b      	movs	r0, #11
 8000dbe:	f002 faa8 	bl	8003312 <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <gamepad_init>:
uint8_t m1 = 0;
uint8_t m2 = 0;
uint8_t thumbl = 0;
uint8_t thumbr = 0;

int gamepad_init(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, _GAMEPAD_RECEIVER_ADDR, 10, 100) != HAL_OK) return 0;
 8000dd4:	2364      	movs	r3, #100	; 0x64
 8000dd6:	220a      	movs	r2, #10
 8000dd8:	21aa      	movs	r1, #170	; 0xaa
 8000dda:	480a      	ldr	r0, [pc, #40]	; (8000e04 <gamepad_init+0x34>)
 8000ddc:	f003 fc20 	bl	8004620 <HAL_I2C_IsDeviceReady>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <gamepad_init+0x1a>
 8000de6:	2300      	movs	r3, #0
 8000de8:	e009      	b.n	8000dfe <gamepad_init+0x2e>
	is_receiver_connect = 1;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <gamepad_init+0x38>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <gamepad_init+0x3c>)
 8000df8:	f003 f830 	bl	8003e5c <HAL_GPIO_WritePin>
	return 1;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000016c 	.word	0x2000016c
 8000e08:	20000118 	.word	0x20000118
 8000e0c:	40011000 	.word	0x40011000

08000e10 <_read_16>:

int16_t _read_16(uint8_t b1,uint8_t b2){
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
    // Read and return a 16-bit signed little endian value from 2 bytes
    int16_t raw = (b1 << 8) | b2;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	81fb      	strh	r3, [r7, #14]
    if (raw & (1 << 15)){
 8000e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da02      	bge.n	8000e3c <_read_16+0x2c>
        return (raw - (1 << 16));
 8000e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3a:	e001      	b.n	8000e40 <_read_16+0x30>
    	// sign bit is set
    } else{
    	return raw;
 8000e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    }
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <_read_32>:

int32_t _read_32(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4){
 8000e4a:	b490      	push	{r4, r7}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4604      	mov	r4, r0
 8000e52:	4608      	mov	r0, r1
 8000e54:	4611      	mov	r1, r2
 8000e56:	461a      	mov	r2, r3
 8000e58:	4623      	mov	r3, r4
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	460b      	mov	r3, r1
 8000e62:	717b      	strb	r3, [r7, #5]
 8000e64:	4613      	mov	r3, r2
 8000e66:	713b      	strb	r3, [r7, #4]
    // Read and return a 32-bit signed little endian value from 2 bytes
    int32_t raw = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	061a      	lsls	r2, r3, #24
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	041b      	lsls	r3, r3, #16
 8000e70:	431a      	orrs	r2, r3
 8000e72:	797b      	ldrb	r3, [r7, #5]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	431a      	orrs	r2, r3
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
    if (raw & (1 << 31)){
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da01      	bge.n	8000e88 <_read_32+0x3e>
        return (raw - (1 << 32));
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	e000      	b.n	8000e8a <_read_32+0x40>
    	// sign bit is set
    } else{
    	return raw;
 8000e88:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc90      	pop	{r4, r7}
 8000e92:	4770      	bx	lr

08000e94 <_convert_data>:

void _convert_data(){
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	dpad_left = (dpad >> _DPAD_LEFT) & 1;
 8000e98:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <_convert_data+0x164>)
 8000e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e9e:	10db      	asrs	r3, r3, #3
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <_convert_data+0x168>)
 8000eac:	701a      	strb	r2, [r3, #0]
	dpad_up = (dpad >> _DPAD_UP) & 1;
 8000eae:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <_convert_data+0x164>)
 8000eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b50      	ldr	r3, [pc, #320]	; (8001000 <_convert_data+0x16c>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	dpad_down = (dpad >> _DPAD_DOWN) & 1;
 8000ec0:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <_convert_data+0x164>)
 8000ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec6:	105b      	asrs	r3, r3, #1
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <_convert_data+0x170>)
 8000ed4:	701a      	strb	r2, [r3, #0]
	dpad_right = (dpad >> _DPAD_RIGHT) & 1;
 8000ed6:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <_convert_data+0x164>)
 8000ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8000edc:	109b      	asrs	r3, r3, #2
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b47      	ldr	r3, [pc, #284]	; (8001008 <_convert_data+0x174>)
 8000eea:	701a      	strb	r2, [r3, #0]
	thumbl = (buttons >> _BUTTON_THUMB_L) & 1;
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <_convert_data+0x178>)
 8000eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef2:	121b      	asrs	r3, r3, #8
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b44      	ldr	r3, [pc, #272]	; (8001010 <_convert_data+0x17c>)
 8000f00:	701a      	strb	r2, [r3, #0]
	thumbr = (buttons >> _BUTTON_THUMB_R) & 1;
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <_convert_data+0x178>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	125b      	asrs	r3, r3, #9
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <_convert_data+0x180>)
 8000f16:	701a      	strb	r2, [r3, #0]
	a = (buttons >> _BUTTON_A) & 1;
 8000f18:	4b3c      	ldr	r3, [pc, #240]	; (800100c <_convert_data+0x178>)
 8000f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <_convert_data+0x184>)
 8000f28:	701a      	strb	r2, [r3, #0]
	b = (buttons >> _BUTTON_B) & 1;
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <_convert_data+0x178>)
 8000f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f30:	105b      	asrs	r3, r3, #1
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b37      	ldr	r3, [pc, #220]	; (800101c <_convert_data+0x188>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	x = (buttons >> _BUTTON_X) & 1;
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <_convert_data+0x178>)
 8000f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f46:	109b      	asrs	r3, r3, #2
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <_convert_data+0x18c>)
 8000f54:	701a      	strb	r2, [r3, #0]
	y = (buttons >> _BUTTON_Y) & 1;
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <_convert_data+0x178>)
 8000f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5c:	10db      	asrs	r3, r3, #3
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <_convert_data+0x190>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	l1 = (buttons >> _BUTTON_SHOULDER_L) & 1;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <_convert_data+0x178>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	111b      	asrs	r3, r3, #4
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <_convert_data+0x194>)
 8000f80:	701a      	strb	r2, [r3, #0]
	r1 = (buttons >> _BUTTON_SHOULDER_R) & 1;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <_convert_data+0x178>)
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	115b      	asrs	r3, r3, #5
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <_convert_data+0x198>)
 8000f96:	701a      	strb	r2, [r3, #0]
	l2 = (buttons >> _BUTTON_TRIGGER_L) & 1;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <_convert_data+0x178>)
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	119b      	asrs	r3, r3, #6
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <_convert_data+0x19c>)
 8000fac:	701a      	strb	r2, [r3, #0]
	r2 = (buttons >> _BUTTON_TRIGGER_R) & 1;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <_convert_data+0x178>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	11db      	asrs	r3, r3, #7
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <_convert_data+0x1a0>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	m1 = (buttons >> _MISC_BUTTON_M1) & 1;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_convert_data+0x178>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	105b      	asrs	r3, r3, #1
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <_convert_data+0x1a4>)
 8000fd8:	701a      	strb	r2, [r3, #0]
	m2 = (buttons >> _MISC_BUTTON_M2) & 1;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <_convert_data+0x178>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	109b      	asrs	r3, r3, #2
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_convert_data+0x1a8>)
 8000fee:	701a      	strb	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	2000013e 	.word	0x2000013e
 8000ffc:	2000015c 	.word	0x2000015c
 8001000:	2000015d 	.word	0x2000015d
 8001004:	2000015e 	.word	0x2000015e
 8001008:	2000015f 	.word	0x2000015f
 800100c:	20000158 	.word	0x20000158
 8001010:	2000016a 	.word	0x2000016a
 8001014:	2000016b 	.word	0x2000016b
 8001018:	20000160 	.word	0x20000160
 800101c:	20000161 	.word	0x20000161
 8001020:	20000162 	.word	0x20000162
 8001024:	20000163 	.word	0x20000163
 8001028:	20000164 	.word	0x20000164
 800102c:	20000165 	.word	0x20000165
 8001030:	20000166 	.word	0x20000166
 8001034:	20000167 	.word	0x20000167
 8001038:	20000168 	.word	0x20000168
 800103c:	20000169 	.word	0x20000169

08001040 <gamepad_update>:

void gamepad_update(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af02      	add	r7, sp, #8
	if(is_receiver_connect == 0) return;
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <gamepad_update+0x120>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8085 	beq.w	800115a <gamepad_update+0x11a>
	HAL_I2C_Master_Receive(&hi2c2, _GAMEPAD_RECEIVER_ADDR, result, 30, 50);
 8001050:	2332      	movs	r3, #50	; 0x32
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	231e      	movs	r3, #30
 8001056:	4a43      	ldr	r2, [pc, #268]	; (8001164 <gamepad_update+0x124>)
 8001058:	21aa      	movs	r1, #170	; 0xaa
 800105a:	4843      	ldr	r0, [pc, #268]	; (8001168 <gamepad_update+0x128>)
 800105c:	f003 f874 	bl	8004148 <HAL_I2C_Master_Receive>
	if(result[0] == 1) is_gamepad_connect = 1;
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <gamepad_update+0x124>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d103      	bne.n	8001070 <gamepad_update+0x30>
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <gamepad_update+0x12c>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e002      	b.n	8001076 <gamepad_update+0x36>
	else is_gamepad_connect = 0;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <gamepad_update+0x12c>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]

	if(is_gamepad_connect == 1){
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <gamepad_update+0x12c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d16a      	bne.n	8001154 <gamepad_update+0x114>
		dpad = result[1];
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <gamepad_update+0x124>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	b25a      	sxtb	r2, r3
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <gamepad_update+0x130>)
 8001086:	701a      	strb	r2, [r3, #0]
		aLX = _read_32(result[2], result[3], result[4], result[5]);
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <gamepad_update+0x124>)
 800108a:	7898      	ldrb	r0, [r3, #2]
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <gamepad_update+0x124>)
 800108e:	78d9      	ldrb	r1, [r3, #3]
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <gamepad_update+0x124>)
 8001092:	791a      	ldrb	r2, [r3, #4]
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <gamepad_update+0x124>)
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	f7ff fed7 	bl	8000e4a <_read_32>
 800109c:	4603      	mov	r3, r0
 800109e:	4a35      	ldr	r2, [pc, #212]	; (8001174 <gamepad_update+0x134>)
 80010a0:	6013      	str	r3, [r2, #0]
		aLY = _read_32(result[6], result[7], result[8], result[9]);
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <gamepad_update+0x124>)
 80010a4:	7998      	ldrb	r0, [r3, #6]
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <gamepad_update+0x124>)
 80010a8:	79d9      	ldrb	r1, [r3, #7]
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <gamepad_update+0x124>)
 80010ac:	7a1a      	ldrb	r2, [r3, #8]
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <gamepad_update+0x124>)
 80010b0:	7a5b      	ldrb	r3, [r3, #9]
 80010b2:	f7ff feca 	bl	8000e4a <_read_32>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <gamepad_update+0x138>)
 80010ba:	6013      	str	r3, [r2, #0]
		aRX = _read_32(result[10], result[11], result[12], result[13]);
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <gamepad_update+0x124>)
 80010be:	7a98      	ldrb	r0, [r3, #10]
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <gamepad_update+0x124>)
 80010c2:	7ad9      	ldrb	r1, [r3, #11]
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <gamepad_update+0x124>)
 80010c6:	7b1a      	ldrb	r2, [r3, #12]
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <gamepad_update+0x124>)
 80010ca:	7b5b      	ldrb	r3, [r3, #13]
 80010cc:	f7ff febd 	bl	8000e4a <_read_32>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <gamepad_update+0x13c>)
 80010d4:	6013      	str	r3, [r2, #0]
		aRY = _read_32(result[14], result[15], result[16], result[17]);
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <gamepad_update+0x124>)
 80010d8:	7b98      	ldrb	r0, [r3, #14]
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <gamepad_update+0x124>)
 80010dc:	7bd9      	ldrb	r1, [r3, #15]
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <gamepad_update+0x124>)
 80010e0:	7c1a      	ldrb	r2, [r3, #16]
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <gamepad_update+0x124>)
 80010e4:	7c5b      	ldrb	r3, [r3, #17]
 80010e6:	f7ff feb0 	bl	8000e4a <_read_32>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <gamepad_update+0x140>)
 80010ee:	6013      	str	r3, [r2, #0]
		al2 = _read_32(result[18], result[19], result[20], result[21]);
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <gamepad_update+0x124>)
 80010f2:	7c98      	ldrb	r0, [r3, #18]
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <gamepad_update+0x124>)
 80010f6:	7cd9      	ldrb	r1, [r3, #19]
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <gamepad_update+0x124>)
 80010fa:	7d1a      	ldrb	r2, [r3, #20]
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <gamepad_update+0x124>)
 80010fe:	7d5b      	ldrb	r3, [r3, #21]
 8001100:	f7ff fea3 	bl	8000e4a <_read_32>
 8001104:	4603      	mov	r3, r0
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <gamepad_update+0x144>)
 8001108:	6013      	str	r3, [r2, #0]
		ar2 = _read_32(result[22], result[23], result[24], result[25]);
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <gamepad_update+0x124>)
 800110c:	7d98      	ldrb	r0, [r3, #22]
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <gamepad_update+0x124>)
 8001110:	7dd9      	ldrb	r1, [r3, #23]
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <gamepad_update+0x124>)
 8001114:	7e1a      	ldrb	r2, [r3, #24]
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <gamepad_update+0x124>)
 8001118:	7e5b      	ldrb	r3, [r3, #25]
 800111a:	f7ff fe96 	bl	8000e4a <_read_32>
 800111e:	4603      	mov	r3, r0
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <gamepad_update+0x148>)
 8001122:	6013      	str	r3, [r2, #0]
		buttons = _read_16(result[26], result[27]);
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <gamepad_update+0x124>)
 8001126:	7e9b      	ldrb	r3, [r3, #26]
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <gamepad_update+0x124>)
 800112a:	7ed2      	ldrb	r2, [r2, #27]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fe6e 	bl	8000e10 <_read_16>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <gamepad_update+0x14c>)
 800113a:	801a      	strh	r2, [r3, #0]
		misc_buttons = _read_16(result[28], result[29]);
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <gamepad_update+0x124>)
 800113e:	7f1b      	ldrb	r3, [r3, #28]
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <gamepad_update+0x124>)
 8001142:	7f52      	ldrb	r2, [r2, #29]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fe62 	bl	8000e10 <_read_16>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <gamepad_update+0x150>)
 8001152:	801a      	strh	r2, [r3, #0]
	}
	_convert_data();
 8001154:	f7ff fe9e 	bl	8000e94 <_convert_data>
 8001158:	e000      	b.n	800115c <gamepad_update+0x11c>
	if(is_receiver_connect == 0) return;
 800115a:	bf00      	nop
}
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000118 	.word	0x20000118
 8001164:	20000120 	.word	0x20000120
 8001168:	2000016c 	.word	0x2000016c
 800116c:	2000011c 	.word	0x2000011c
 8001170:	2000013e 	.word	0x2000013e
 8001174:	20000140 	.word	0x20000140
 8001178:	20000144 	.word	0x20000144
 800117c:	20000148 	.word	0x20000148
 8001180:	2000014c 	.word	0x2000014c
 8001184:	20000150 	.word	0x20000150
 8001188:	20000154 	.word	0x20000154
 800118c:	20000158 	.word	0x20000158
 8001190:	2000015a 	.word	0x2000015a
 8001194:	00000000 	.word	0x00000000

08001198 <gamepad_calculate_leff_joystick>:

int gamepad_calculate_leff_joystick(){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
	if(is_gamepad_connect == 0) return -1;
 800119e:	4b60      	ldr	r3, [pc, #384]	; (8001320 <gamepad_calculate_leff_joystick+0x188>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <gamepad_calculate_leff_joystick+0x14>
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e0ae      	b.n	800130a <gamepad_calculate_leff_joystick+0x172>
    int dir = -1;
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	60fb      	str	r3, [r7, #12]

    int distance = (int)(sqrt(aLX*aLX + aLY*aLY));
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <gamepad_calculate_leff_joystick+0x18c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a5b      	ldr	r2, [pc, #364]	; (8001324 <gamepad_calculate_leff_joystick+0x18c>)
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <gamepad_calculate_leff_joystick+0x190>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4959      	ldr	r1, [pc, #356]	; (8001328 <gamepad_calculate_leff_joystick+0x190>)
 80011c4:	6809      	ldr	r1, [r1, #0]
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f97d 	bl	80004cc <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f006 faa7 	bl	800772c <sqrt>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc8b 	bl	8000b00 <__aeabi_d2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	607b      	str	r3, [r7, #4]

    if (distance < 15){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0e      	cmp	r3, #14
 80011f2:	dc06      	bgt.n	8001202 <gamepad_calculate_leff_joystick+0x6a>
        distance = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
        dir = -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	60fb      	str	r3, [r7, #12]
        return dir;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	e083      	b.n	800130a <gamepad_calculate_leff_joystick+0x172>
    }else if (distance > 100){
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	dd01      	ble.n	800120c <gamepad_calculate_leff_joystick+0x74>
    	distance = 100;
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	607b      	str	r3, [r7, #4]
    }

    int angle = (int)(atan2(aLY, aLX) * 180 / 3.14);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <gamepad_calculate_leff_joystick+0x190>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f95b 	bl	80004cc <__aeabi_i2d>
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	4b42      	ldr	r3, [pc, #264]	; (8001324 <gamepad_calculate_leff_joystick+0x18c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f954 	bl	80004cc <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f006 fa7c 	bl	8007728 <atan2>
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	4b3d      	ldr	r3, [pc, #244]	; (800132c <gamepad_calculate_leff_joystick+0x194>)
 8001236:	f7ff f9b3 	bl	80005a0 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	a335      	add	r3, pc, #212	; (adr r3, 8001318 <gamepad_calculate_leff_joystick+0x180>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff fad4 	bl	80007f4 <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fc54 	bl	8000b00 <__aeabi_d2iz>
 8001258:	4603      	mov	r3, r0
 800125a:	60bb      	str	r3, [r7, #8]

    if (angle < 0) angle += 360;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	da03      	bge.n	800126a <gamepad_calculate_leff_joystick+0xd2>
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001268:	60bb      	str	r3, [r7, #8]

    if ((0 <= angle && angle < 10) || angle >= 350)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db02      	blt.n	8001276 <gamepad_calculate_leff_joystick+0xde>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b09      	cmp	r3, #9
 8001274:	dd03      	ble.n	800127e <gamepad_calculate_leff_joystick+0xe6>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800127c:	db02      	blt.n	8001284 <gamepad_calculate_leff_joystick+0xec>
        dir = ROBOT_DIR_SR;
 800127e:	2308      	movs	r3, #8
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e041      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (15 <= angle && angle < 75)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b0e      	cmp	r3, #14
 8001288:	dd05      	ble.n	8001296 <gamepad_calculate_leff_joystick+0xfe>
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b4a      	cmp	r3, #74	; 0x4a
 800128e:	dc02      	bgt.n	8001296 <gamepad_calculate_leff_joystick+0xfe>
        dir = ROBOT_DIR_RB;
 8001290:	2306      	movs	r3, #6
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e038      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (80 <= angle && angle < 110)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b4f      	cmp	r3, #79	; 0x4f
 800129a:	dd05      	ble.n	80012a8 <gamepad_calculate_leff_joystick+0x110>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b6d      	cmp	r3, #109	; 0x6d
 80012a0:	dc02      	bgt.n	80012a8 <gamepad_calculate_leff_joystick+0x110>
        dir = ROBOT_DIR_BW;
 80012a2:	2309      	movs	r3, #9
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e02f      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (115 <= angle && angle < 165)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b72      	cmp	r3, #114	; 0x72
 80012ac:	dd05      	ble.n	80012ba <gamepad_calculate_leff_joystick+0x122>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2ba4      	cmp	r3, #164	; 0xa4
 80012b2:	dc02      	bgt.n	80012ba <gamepad_calculate_leff_joystick+0x122>
        dir = ROBOT_DIR_LB;
 80012b4:	2305      	movs	r3, #5
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e026      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (170 <= angle && angle < 190)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2ba9      	cmp	r3, #169	; 0xa9
 80012be:	dd05      	ble.n	80012cc <gamepad_calculate_leff_joystick+0x134>
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2bbd      	cmp	r3, #189	; 0xbd
 80012c4:	dc02      	bgt.n	80012cc <gamepad_calculate_leff_joystick+0x134>
        dir = ROBOT_DIR_SL;
 80012c6:	2307      	movs	r3, #7
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e01d      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (195 <= angle && angle < 255)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2bc2      	cmp	r3, #194	; 0xc2
 80012d0:	dd05      	ble.n	80012de <gamepad_calculate_leff_joystick+0x146>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2bfe      	cmp	r3, #254	; 0xfe
 80012d6:	dc02      	bgt.n	80012de <gamepad_calculate_leff_joystick+0x146>
        dir = ROBOT_DIR_LF;
 80012d8:	2304      	movs	r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e014      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (260 <= angle && angle < 280)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012e4:	db06      	blt.n	80012f4 <gamepad_calculate_leff_joystick+0x15c>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80012ec:	da02      	bge.n	80012f4 <gamepad_calculate_leff_joystick+0x15c>
        dir = ROBOT_DIR_FW;
 80012ee:	2303      	movs	r3, #3
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e009      	b.n	8001308 <gamepad_calculate_leff_joystick+0x170>
    else if (285 <= angle && angle < 345)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80012fa:	dd05      	ble.n	8001308 <gamepad_calculate_leff_joystick+0x170>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8001302:	dc01      	bgt.n	8001308 <gamepad_calculate_leff_joystick+0x170>
        dir = ROBOT_DIR_RF;
 8001304:	2302      	movs	r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
    return dir;
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	51eb851f 	.word	0x51eb851f
 800131c:	40091eb8 	.word	0x40091eb8
 8001320:	2000011c 	.word	0x2000011c
 8001324:	20000140 	.word	0x20000140
 8001328:	20000144 	.word	0x20000144
 800132c:	40668000 	.word	0x40668000

08001330 <gamepad_run_tele>:

int sm_pos = 1;
void gamepad_run_tele(int accel){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	static int last_dir = -1;
	int my_dir = -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	60fb      	str	r3, [r7, #12]
	my_dir = gamepad_calculate_leff_joystick();
 800133e:	f7ff ff2b 	bl	8001198 <gamepad_calculate_leff_joystick>
 8001342:	60f8      	str	r0, [r7, #12]
	if(b) {
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <gamepad_run_tele+0x100>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <gamepad_run_tele+0x24>
		servo_set_angle(SERVO1, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	2000      	movs	r0, #0
 8001350:	f000 fd0e 	bl	8001d70 <servo_set_angle>
	}
	if(x){
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <gamepad_run_tele+0x104>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <gamepad_run_tele+0x34>
		servo_set_angle(SERVO1, 45);
 800135c:	212d      	movs	r1, #45	; 0x2d
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fd06 	bl	8001d70 <servo_set_angle>
	}
	if(a){
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <gamepad_run_tele+0x108>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00a      	beq.n	8001382 <gamepad_run_tele+0x52>
		if(sm_pos == 1){
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <gamepad_run_tele+0x10c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d106      	bne.n	8001382 <gamepad_run_tele+0x52>
			sm_pos = 0;
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <gamepad_run_tele+0x10c>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
			moveSM(-4);
 800137a:	f06f 0003 	mvn.w	r0, #3
 800137e:	f000 fe01 	bl	8001f84 <moveSM>
		}
	}
	if(y){
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <gamepad_run_tele+0x110>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <gamepad_run_tele+0x6e>
		if(sm_pos == 0){
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <gamepad_run_tele+0x10c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d105      	bne.n	800139e <gamepad_run_tele+0x6e>
			sm_pos = 1;
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <gamepad_run_tele+0x10c>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
			moveSM(4);
 8001398:	2004      	movs	r0, #4
 800139a:	f000 fdf3 	bl	8001f84 <moveSM>
		}
	}
	if(dpad_up){
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <gamepad_run_tele+0x114>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <gamepad_run_tele+0x7a>
		my_dir = ROBOT_DIR_FW;
 80013a6:	2303      	movs	r3, #3
 80013a8:	60fb      	str	r3, [r7, #12]
	}
	if(dpad_down){
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <gamepad_run_tele+0x118>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <gamepad_run_tele+0x86>
		my_dir = ROBOT_DIR_BW;
 80013b2:	2309      	movs	r3, #9
 80013b4:	60fb      	str	r3, [r7, #12]
	}
	if(dpad_left){
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <gamepad_run_tele+0x11c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <gamepad_run_tele+0x92>
		my_dir = ROBOT_DIR_L;
 80013be:	230a      	movs	r3, #10
 80013c0:	60fb      	str	r3, [r7, #12]
	}
	if(dpad_right){
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <gamepad_run_tele+0x120>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <gamepad_run_tele+0x9e>
		my_dir = ROBOT_DIR_R;
 80013ca:	2301      	movs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
	}
	if (my_dir != last_dir) // got new direction command
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <gamepad_run_tele+0x124>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d006      	beq.n	80013e6 <gamepad_run_tele+0xb6>
	{
        run_speed = MIN_SPEED; // reset speed
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <gamepad_run_tele+0x128>)
 80013da:	221e      	movs	r2, #30
 80013dc:	601a      	str	r2, [r3, #0]
        turn_speed = MIN_SPEED;
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <gamepad_run_tele+0x12c>)
 80013e0:	221e      	movs	r2, #30
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e01d      	b.n	8001422 <gamepad_run_tele+0xf2>
	}else {
		run_speed = run_speed + accel;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <gamepad_run_tele+0x128>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <gamepad_run_tele+0x128>)
 80013f0:	6013      	str	r3, [r2, #0]
		if(run_speed > MAX_SPEED) run_speed = MAX_SPEED;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <gamepad_run_tele+0x128>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b28      	cmp	r3, #40	; 0x28
 80013f8:	dd02      	ble.n	8001400 <gamepad_run_tele+0xd0>
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <gamepad_run_tele+0x128>)
 80013fc:	2228      	movs	r2, #40	; 0x28
 80013fe:	601a      	str	r2, [r3, #0]
		turn_speed = turn_speed + accel/2;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0fda      	lsrs	r2, r3, #31
 8001404:	4413      	add	r3, r2
 8001406:	105b      	asrs	r3, r3, #1
 8001408:	461a      	mov	r2, r3
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <gamepad_run_tele+0x12c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <gamepad_run_tele+0x12c>)
 8001412:	6013      	str	r3, [r2, #0]
		if(turn_speed > MAX_SPEED) turn_speed = MAX_SPEED;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <gamepad_run_tele+0x12c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b28      	cmp	r3, #40	; 0x28
 800141a:	dd02      	ble.n	8001422 <gamepad_run_tele+0xf2>
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <gamepad_run_tele+0x12c>)
 800141e:	2228      	movs	r2, #40	; 0x28
 8001420:	601a      	str	r2, [r3, #0]
	}
	runDir(my_dir);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 fc4a 	bl	8001cbc <runDir>
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000161 	.word	0x20000161
 8001434:	20000162 	.word	0x20000162
 8001438:	20000160 	.word	0x20000160
 800143c:	20000000 	.word	0x20000000
 8001440:	20000163 	.word	0x20000163
 8001444:	2000015d 	.word	0x2000015d
 8001448:	2000015e 	.word	0x2000015e
 800144c:	2000015c 	.word	0x2000015c
 8001450:	2000015f 	.word	0x2000015f
 8001454:	20000004 	.word	0x20000004
 8001458:	20000008 	.word	0x20000008
 800145c:	2000000c 	.word	0x2000000c

08001460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <MX_GPIO_Init+0x160>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <MX_GPIO_Init+0x160>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <MX_GPIO_Init+0x160>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <MX_GPIO_Init+0x160>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a4b      	ldr	r2, [pc, #300]	; (80015c0 <MX_GPIO_Init+0x160>)
 8001492:	f043 0320 	orr.w	r3, r3, #32
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <MX_GPIO_Init+0x160>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <MX_GPIO_Init+0x160>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a45      	ldr	r2, [pc, #276]	; (80015c0 <MX_GPIO_Init+0x160>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <MX_GPIO_Init+0x160>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <MX_GPIO_Init+0x160>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a3f      	ldr	r2, [pc, #252]	; (80015c0 <MX_GPIO_Init+0x160>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <MX_GPIO_Init+0x160>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014da:	483a      	ldr	r0, [pc, #232]	; (80015c4 <MX_GPIO_Init+0x164>)
 80014dc:	f002 fcbe 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 80014e0:	2200      	movs	r2, #0
 80014e2:	f649 1102 	movw	r1, #39170	; 0x9902
 80014e6:	4838      	ldr	r0, [pc, #224]	; (80015c8 <MX_GPIO_Init+0x168>)
 80014e8:	f002 fcb8 	bl	8003e5c <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2124      	movs	r1, #36	; 0x24
 80014f0:	4836      	ldr	r0, [pc, #216]	; (80015cc <MX_GPIO_Init+0x16c>)
 80014f2:	f002 fcb3 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 80014f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2302      	movs	r3, #2
 8001506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <MX_GPIO_Init+0x164>)
 8001510:	f002 fb10 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8001514:	f649 1302 	movw	r3, #39170	; 0x9902
 8001518:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	4826      	ldr	r0, [pc, #152]	; (80015c8 <MX_GPIO_Init+0x168>)
 800152e:	f002 fb01 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin;
 8001532:	2304      	movs	r3, #4
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2302      	movs	r3, #2
 8001540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_DIR_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4619      	mov	r1, r3
 8001548:	4820      	ldr	r0, [pc, #128]	; (80015cc <MX_GPIO_Init+0x16c>)
 800154a:	f002 faf3 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 800154e:	f24f 2308 	movw	r3, #61960	; 0xf208
 8001552:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	481a      	ldr	r0, [pc, #104]	; (80015cc <MX_GPIO_Init+0x16c>)
 8001564:	f002 fae6 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8001568:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800156c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4619      	mov	r1, r3
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <MX_GPIO_Init+0x164>)
 800157e:	f002 fad9 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 8001582:	2304      	movs	r3, #4
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4619      	mov	r1, r3
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <MX_GPIO_Init+0x170>)
 8001596:	f002 facd 	bl	8003b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SM_DIR_Pin;
 800159a:	2320      	movs	r3, #32
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_DIR_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	4619      	mov	r1, r3
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_GPIO_Init+0x16c>)
 80015b2:	f002 fabf 	bl	8003b34 <HAL_GPIO_Init>

}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40011000 	.word	0x40011000
 80015c8:	40010800 	.word	0x40010800
 80015cc:	40010c00 	.word	0x40010c00
 80015d0:	40011400 	.word	0x40011400

080015d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C2_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C2_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C2_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C2_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C2_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C2_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C2_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C2_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C2_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C2_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C2_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C2_Init+0x50>)
 8001612:	f002 fc55 	bl	8003ec0 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 f954 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000016c 	.word	0x2000016c
 8001628:	40005800 	.word	0x40005800
 800162c:	000186a0 	.word	0x000186a0

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_I2C_MspInit+0x74>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d124      	bne.n	800169a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_I2C_MspInit+0x78>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_I2C_MspInit+0x78>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_I2C_MspInit+0x78>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001668:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800166c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_I2C_MspInit+0x7c>)
 800167e:	f002 fa59 	bl	8003b34 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_I2C_MspInit+0x78>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_I2C_MspInit+0x78>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_I2C_MspInit+0x78>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40005800 	.word	0x40005800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010c00 	.word	0x40010c00

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0a4      	sub	sp, #144	; 0x90
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f001 fa8f 	bl	8002bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 f87b 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f7ff fecf 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c2:	f7ff fb67 	bl	8000d94 <MX_DMA_Init>
  MX_ADC1_Init();
 80016c6:	f7ff fa43 	bl	8000b50 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016ca:	f001 f977 	bl	80029bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016ce:	f001 f99f 	bl	8002a10 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80016d2:	f7ff ff7f 	bl	80015d4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80016d6:	f000 fbd5 	bl	8001e84 <MX_SPI1_Init>
  MX_TIM8_Init();
 80016da:	f000 ff09 	bl	80024f0 <MX_TIM8_Init>
  MX_TIM4_Init();
 80016de:	f000 fe03 	bl	80022e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80016e2:	f000 fe8f 	bl	8002404 <MX_TIM5_Init>
  MX_TIM2_Init();
 80016e6:	f000 fd3d 	bl	8002164 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016ea:	f000 fd87 	bl	80021fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016ee:	482b      	ldr	r0, [pc, #172]	; (800179c <main+0xec>)
 80016f0:	f004 f8a4 	bl	800583c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016f4:	2100      	movs	r1, #0
 80016f6:	482a      	ldr	r0, [pc, #168]	; (80017a0 <main+0xf0>)
 80016f8:	f004 f958 	bl	80059ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80016fc:	2104      	movs	r1, #4
 80016fe:	4828      	ldr	r0, [pc, #160]	; (80017a0 <main+0xf0>)
 8001700:	f004 f954 	bl	80059ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001704:	2108      	movs	r1, #8
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <main+0xf0>)
 8001708:	f004 f950 	bl	80059ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800170c:	210c      	movs	r1, #12
 800170e:	4824      	ldr	r0, [pc, #144]	; (80017a0 <main+0xf0>)
 8001710:	f004 f94c 	bl	80059ac <HAL_TIM_PWM_Start>
  setTimer(0, 10);
 8001714:	210a      	movs	r1, #10
 8001716:	2000      	movs	r0, #0
 8001718:	f000 fb74 	bl	8001e04 <setTimer>
  setTimer(1, 1000);
 800171c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001720:	2001      	movs	r0, #1
 8001722:	f000 fb6f 	bl	8001e04 <setTimer>
  servo_init(SERVO1);
 8001726:	2000      	movs	r0, #0
 8001728:	f000 fb0e 	bl	8001d48 <servo_init>
  gamepad_init();
 800172c:	f7ff fb50 	bl	8000dd0 <gamepad_init>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); // Re-start PWM to apply changes
 8001730:	2100      	movs	r1, #0
 8001732:	481c      	ldr	r0, [pc, #112]	; (80017a4 <main+0xf4>)
 8001734:	f004 f93a 	bl	80059ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001738:	2100      	movs	r1, #0
 800173a:	481a      	ldr	r0, [pc, #104]	; (80017a4 <main+0xf4>)
 800173c:	f004 f9f0 	bl	8005b20 <HAL_TIM_PWM_Stop>
  HAL_Delay(1000);
 8001740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001744:	f001 faaa 	bl	8002c9c <HAL_Delay>
  int len = 17;
 8001748:	2311      	movs	r3, #17
 800174a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int note[17] = { NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
 800174e:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <main+0xf8>)
 8001750:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001754:	4611      	mov	r1, r2
 8001756:	2244      	movs	r2, #68	; 0x44
 8001758:	4618      	mov	r0, r3
 800175a:	f005 ffd7 	bl	800770c <memcpy>
		  	  	  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5};
  int dur[17] = { 1000, 500, 500, 500, 200,
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <main+0xfc>)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4611      	mov	r1, r2
 8001764:	2244      	movs	r2, #68	; 0x44
 8001766:	4618      	mov	r0, r3
 8001768:	f005 ffd0 	bl	800770c <memcpy>
		  500, 500, 500, 500, 200,
		  500, 500, 500, 200,
		  500, 500, 500};

  tone_play(note, dur, len);
 800176c:	1d39      	adds	r1, r7, #4
 800176e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001772:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001776:	4618      	mov	r0, r3
 8001778:	f001 f8f8 	bl	800296c <tone_play>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <main+0x100>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d1fb      	bne.n	800177c <main+0xcc>
		  setTimer(0, 10);
 8001784:	210a      	movs	r1, #10
 8001786:	2000      	movs	r0, #0
 8001788:	f000 fb3c 	bl	8001e04 <setTimer>
		  ledBlink();
 800178c:	f000 f882 	bl	8001894 <ledBlink>
		  gamepad_update();
 8001790:	f7ff fc56 	bl	8001040 <gamepad_update>
		  gamepad_run_tele(2);
 8001794:	2002      	movs	r0, #2
 8001796:	f7ff fdcb 	bl	8001330 <gamepad_run_tele>
	  if(timer_flag[0] == 1){
 800179a:	e7ef      	b.n	800177c <main+0xcc>
 800179c:	200002c4 	.word	0x200002c4
 80017a0:	200003e4 	.word	0x200003e4
 80017a4:	2000039c 	.word	0x2000039c
 80017a8:	08007e00 	.word	0x08007e00
 80017ac:	08007e44 	.word	0x08007e44
 80017b0:	20000218 	.word	0x20000218

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b096      	sub	sp, #88	; 0x58
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017be:	2228      	movs	r2, #40	; 0x28
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 ff70 	bl	80076a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f6:	2301      	movs	r3, #1
 80017f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fa:	2302      	movs	r3, #2
 80017fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001802:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001804:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001808:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fa7a 	bl	8004d08 <HAL_RCC_OscConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800181a:	f000 f855 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181e:	230f      	movs	r3, #15
 8001820:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001822:	2302      	movs	r3, #2
 8001824:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	2102      	movs	r1, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fce6 	bl	800520c <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001846:	f000 f83f 	bl	80018c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800184a:	2302      	movs	r3, #2
 800184c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001852:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fe66 	bl	8005528 <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001862:	f000 f831 	bl	80018c8 <Error_Handler>
  }
}
 8001866:	bf00      	nop
 8001868:	3758      	adds	r7, #88	; 0x58
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187e:	d105      	bne.n	800188c <HAL_TIM_PeriodElapsedCallback+0x1e>
		timerRun(0);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 fad7 	bl	8001e34 <timerRun>
		timerRun(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 fad4 	bl	8001e34 <timerRun>
	}
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <ledBlink>:



int led_debug_count = 0;
void ledBlink(){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	led_debug_count++;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <ledBlink+0x2c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <ledBlink+0x2c>)
 80018a0:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <ledBlink+0x2c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d107      	bne.n	80018ba <ledBlink+0x26>
		led_debug_count = 0;
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <ledBlink+0x2c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80018b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <ledBlink+0x30>)
 80018b6:	f002 fae9 	bl	8003e8c <HAL_GPIO_TogglePin>
	}
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200001c0 	.word	0x200001c0
 80018c4:	40011000 	.word	0x40011000

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <setSpeed>:
int run_speed = MIN_SPEED;
int turn_speed = MIN_SPEED;

uint8_t speed_duty_cycle = 0;

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	speed_duty_cycle = duty_cycle;
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <setSpeed+0x70>)
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	7013      	strb	r3, [r2, #0]
	switch (dc){
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d822      	bhi.n	8001938 <setSpeed+0x64>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <setSpeed+0x24>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001909 	.word	0x08001909
 80018fc:	08001915 	.word	0x08001915
 8001900:	08001921 	.word	0x08001921
 8001904:	0800192d 	.word	0x0800192d
	case 1:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, speed_duty_cycle);
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <setSpeed+0x70>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <setSpeed+0x74>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001912:	e011      	b.n	8001938 <setSpeed+0x64>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, speed_duty_cycle);
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <setSpeed+0x70>)
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <setSpeed+0x74>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800191e:	e00b      	b.n	8001938 <setSpeed+0x64>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, speed_duty_cycle);
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <setSpeed+0x70>)
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <setSpeed+0x74>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800192a:	e005      	b.n	8001938 <setSpeed+0x64>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, speed_duty_cycle);
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <setSpeed+0x70>)
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <setSpeed+0x74>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001936:	bf00      	nop
	}
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200001c4 	.word	0x200001c4
 8001948:	200003e4 	.word	0x200003e4

0800194c <dc1Move>:

void dc1Move(int duty_cycle){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 800195a:	2201      	movs	r2, #1
 800195c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <dc1Move+0x50>)
 8001962:	f002 fa7b 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff ffb1 	bl	80018d4 <setSpeed>
	}
	if(duty_cycle < 0){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	da0d      	bge.n	8001994 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <dc1Move+0x50>)
 8001980:	f002 fa6c 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	425b      	negs	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff ffa0 	bl	80018d4 <setSpeed>
	}
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40011000 	.word	0x40011000

080019a0 <dc2Move>:

void dc2Move(int duty_cycle){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b4:	480e      	ldr	r0, [pc, #56]	; (80019f0 <dc2Move+0x50>)
 80019b6:	f002 fa51 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7ff ff87 	bl	80018d4 <setSpeed>
	}
	if(duty_cycle < 0){
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da0d      	bge.n	80019e8 <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <dc2Move+0x50>)
 80019d4:	f002 fa42 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	425b      	negs	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4619      	mov	r1, r3
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7ff ff76 	bl	80018d4 <setSpeed>
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40011000 	.word	0x40011000

080019f4 <dc3Move>:

void dc3Move(int duty_cycle){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0a      	blt.n	8001a18 <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2104      	movs	r1, #4
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <dc3Move+0x4c>)
 8001a08:	f002 fa28 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	2003      	movs	r0, #3
 8001a14:	f7ff ff5e 	bl	80018d4 <setSpeed>
	}
	if(duty_cycle < 0){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da0c      	bge.n	8001a38 <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2104      	movs	r1, #4
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <dc3Move+0x4c>)
 8001a24:	f002 fa1a 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	2003      	movs	r0, #3
 8001a34:	f7ff ff4e 	bl	80018d4 <setSpeed>
	}
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010c00 	.word	0x40010c00

08001a44 <dc4Move>:

void dc4Move(int duty_cycle){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0a      	blt.n	8001a68 <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2102      	movs	r1, #2
 8001a56:	480e      	ldr	r0, [pc, #56]	; (8001a90 <dc4Move+0x4c>)
 8001a58:	f002 fa00 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	2004      	movs	r0, #4
 8001a64:	f7ff ff36 	bl	80018d4 <setSpeed>
	}
	if(duty_cycle < 0){
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da0c      	bge.n	8001a88 <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2102      	movs	r1, #2
 8001a72:	4807      	ldr	r0, [pc, #28]	; (8001a90 <dc4Move+0x4c>)
 8001a74:	f002 f9f2 	bl	8003e5c <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4619      	mov	r1, r3
 8001a82:	2004      	movs	r0, #4
 8001a84:	f7ff ff26 	bl	80018d4 <setSpeed>
	}
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010800 	.word	0x40010800

08001a94 <stop>:


void stop(){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	dc1Move(0);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff ff57 	bl	800194c <dc1Move>
	dc2Move(0);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff ff7e 	bl	80019a0 <dc2Move>
	dc3Move(0);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff ffa5 	bl	80019f4 <dc3Move>
	dc4Move(0);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff ffca 	bl	8001a44 <dc4Move>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <forward>:

void forward(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	dc1Move(run_speed);
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <forward+0x30>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff45 	bl	800194c <dc1Move>
	dc2Move(run_speed);
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <forward+0x30>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff6a 	bl	80019a0 <dc2Move>
	dc3Move(run_speed);
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <forward+0x30>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff8f 	bl	80019f4 <dc3Move>
	dc4Move(run_speed);
 8001ad6:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <forward+0x30>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ffb2 	bl	8001a44 <dc4Move>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <backwards>:

void backwards(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	dc1Move(-run_speed);
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <backwards+0x38>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	425b      	negs	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff2a 	bl	800194c <dc1Move>
	dc2Move(-run_speed);
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <backwards+0x38>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	425b      	negs	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff4e 	bl	80019a0 <dc2Move>
	dc3Move(-run_speed);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <backwards+0x38>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	425b      	negs	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff72 	bl	80019f4 <dc3Move>
	dc4Move(-run_speed);
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <backwards+0x38>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	425b      	negs	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff94 	bl	8001a44 <dc4Move>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000008 	.word	0x20000008

08001b24 <frontLeft>:

void frontLeft(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff ff0f 	bl	800194c <dc1Move>
	dc2Move(run_speed);
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <frontLeft+0x28>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff34 	bl	80019a0 <dc2Move>
	dc3Move(run_speed);
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <frontLeft+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff59 	bl	80019f4 <dc3Move>
	dc4Move(0); //stop
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff ff7e 	bl	8001a44 <dc4Move>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000008 	.word	0x20000008

08001b50 <frontRight>:

void frontRight(){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	dc1Move(run_speed);
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <frontRight+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fef7 	bl	800194c <dc1Move>
	dc2Move(0); //stop
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff ff1e 	bl	80019a0 <dc2Move>
	dc3Move(0); //stop
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff ff45 	bl	80019f4 <dc3Move>
	dc4Move(run_speed);
 8001b6a:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <frontRight+0x28>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff68 	bl	8001a44 <dc4Move>
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000008 	.word	0x20000008

08001b7c <backRight>:
void backRight(){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fee3 	bl	800194c <dc1Move>
	dc2Move(-run_speed);
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <backRight+0x2c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	425b      	negs	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff07 	bl	80019a0 <dc2Move>
	dc3Move(-run_speed);
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <backRight+0x2c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	425b      	negs	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff2b 	bl	80019f4 <dc3Move>
	dc4Move(0); //stop
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff ff50 	bl	8001a44 <dc4Move>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000008 	.word	0x20000008

08001bac <backLeft>:

void backLeft(){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	dc1Move(-run_speed);
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <backLeft+0x2c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fec8 	bl	800194c <dc1Move>
	dc2Move(0); //stop
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff feef 	bl	80019a0 <dc2Move>
	dc3Move(0); //stop
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff ff16 	bl	80019f4 <dc3Move>
	dc4Move(-run_speed);
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <backLeft+0x2c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	425b      	negs	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff38 	bl	8001a44 <dc4Move>

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000008 	.word	0x20000008

08001bdc <right>:

void right(){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	dc1Move(run_speed);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <right+0x34>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff feb1 	bl	800194c <dc1Move>
	dc2Move(-run_speed);
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <right+0x34>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	425b      	negs	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fed5 	bl	80019a0 <dc2Move>
	dc3Move(-run_speed);
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <right+0x34>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fef9 	bl	80019f4 <dc3Move>
	dc4Move(run_speed);
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <right+0x34>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff1c 	bl	8001a44 <dc4Move>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000008 	.word	0x20000008

08001c14 <left>:

void left(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	dc1Move(-run_speed);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <left+0x34>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe94 	bl	800194c <dc1Move>
	dc2Move(run_speed);
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <left+0x34>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff feb9 	bl	80019a0 <dc2Move>
	dc3Move(run_speed);
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <left+0x34>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fede 	bl	80019f4 <dc3Move>
	dc4Move(-run_speed);
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <left+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	425b      	negs	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff00 	bl	8001a44 <dc4Move>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000008 	.word	0x20000008

08001c4c <rotateLeft>:

void rotateLeft(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	dc1Move(-turn_speed);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <rotateLeft+0x34>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	425b      	negs	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fe78 	bl	800194c <dc1Move>
	dc2Move(-turn_speed);
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <rotateLeft+0x34>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	425b      	negs	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe9c 	bl	80019a0 <dc2Move>
	dc3Move(turn_speed);
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <rotateLeft+0x34>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fec1 	bl	80019f4 <dc3Move>
	dc4Move(turn_speed);
 8001c72:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <rotateLeft+0x34>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fee4 	bl	8001a44 <dc4Move>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000000c 	.word	0x2000000c

08001c84 <rotateRight>:

void rotateRight(){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	dc1Move(turn_speed);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <rotateRight+0x34>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fe5d 	bl	800194c <dc1Move>
	dc2Move(turn_speed);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <rotateRight+0x34>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fe82 	bl	80019a0 <dc2Move>
	dc3Move(-turn_speed);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <rotateRight+0x34>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fea6 	bl	80019f4 <dc3Move>
	dc4Move(-turn_speed);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <rotateRight+0x34>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	425b      	negs	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fec8 	bl	8001a44 <dc4Move>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000000c 	.word	0x2000000c

08001cbc <runDir>:
	else
		count_test = 10;

}

void runDir(int dir){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	switch (dir) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	2b09      	cmp	r3, #9
 8001cca:	d835      	bhi.n	8001d38 <runDir+0x7c>
 8001ccc:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <runDir+0x18>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001d15 	.word	0x08001d15
 8001cd8:	08001d2d 	.word	0x08001d2d
 8001cdc:	08001cfd 	.word	0x08001cfd
 8001ce0:	08001d27 	.word	0x08001d27
 8001ce4:	08001d1b 	.word	0x08001d1b
 8001ce8:	08001d21 	.word	0x08001d21
 8001cec:	08001d09 	.word	0x08001d09
 8001cf0:	08001d03 	.word	0x08001d03
 8001cf4:	08001d33 	.word	0x08001d33
 8001cf8:	08001d0f 	.word	0x08001d0f
		case ROBOT_DIR_FW:
			forward();
 8001cfc:	f7ff feda 	bl	8001ab4 <forward>
			break;
 8001d00:	e01d      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_SR:
			right();
 8001d02:	f7ff ff6b 	bl	8001bdc <right>
			break;
 8001d06:	e01a      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_SL:
			left();
 8001d08:	f7ff ff84 	bl	8001c14 <left>
			break;
 8001d0c:	e017      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_L:
			rotateLeft();
 8001d0e:	f7ff ff9d 	bl	8001c4c <rotateLeft>
			break;
 8001d12:	e014      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_R:
			rotateRight();
 8001d14:	f7ff ffb6 	bl	8001c84 <rotateRight>
			break;
 8001d18:	e011      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_LB:
			backLeft();
 8001d1a:	f7ff ff47 	bl	8001bac <backLeft>
			break;
 8001d1e:	e00e      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_RB:
			backRight();
 8001d20:	f7ff ff2c 	bl	8001b7c <backRight>
			break;
 8001d24:	e00b      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_LF:
			frontLeft();
 8001d26:	f7ff fefd 	bl	8001b24 <frontLeft>
			break;
 8001d2a:	e008      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_RF:
			frontRight();
 8001d2c:	f7ff ff10 	bl	8001b50 <frontRight>
			break;
 8001d30:	e005      	b.n	8001d3e <runDir+0x82>
		case ROBOT_DIR_BW:
			backwards();
 8001d32:	f7ff fed9 	bl	8001ae8 <backwards>
			break;
 8001d36:	e002      	b.n	8001d3e <runDir+0x82>
		default:
			stop();
 8001d38:	f7ff feac 	bl	8001a94 <stop>
			break;
 8001d3c:	bf00      	nop
	}
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop

08001d48 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <servo_init+0x20>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <servo_init+0x24>)
 8001d5c:	f003 fe26 	bl	80059ac <HAL_TIM_PWM_Start>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	20000354 	.word	0x20000354

08001d70 <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db35      	blt.n	8001dec <servo_set_angle+0x7c>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2bb4      	cmp	r3, #180	; 0xb4
 8001d84:	dc32      	bgt.n	8001dec <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2264      	movs	r2, #100	; 0x64
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <servo_set_angle+0x88>)
 8001d90:	fb82 1203 	smull	r1, r2, r2, r3
 8001d94:	441a      	add	r2, r3
 8001d96:	11d2      	asrs	r2, r2, #7
 8001d98:	17db      	asrs	r3, r3, #31
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	3319      	adds	r3, #25
 8001d9e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 8001da0:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <servo_set_angle+0x8c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d104      	bne.n	8001db6 <servo_set_angle+0x46>
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <servo_set_angle+0x90>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
 8001db4:	e01b      	b.n	8001dee <servo_set_angle+0x7e>
 8001db6:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <servo_set_angle+0x8c>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d104      	bne.n	8001dcc <servo_set_angle+0x5c>
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <servo_set_angle+0x90>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6393      	str	r3, [r2, #56]	; 0x38
 8001dca:	e010      	b.n	8001dee <servo_set_angle+0x7e>
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <servo_set_angle+0x8c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d104      	bne.n	8001de2 <servo_set_angle+0x72>
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <servo_set_angle+0x90>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001de0:	e005      	b.n	8001dee <servo_set_angle+0x7e>
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <servo_set_angle+0x90>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	e000      	b.n	8001dee <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 8001dec:	bf00      	nop
}
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	b60b60b7 	.word	0xb60b60b7
 8001dfc:	20000010 	.word	0x20000010
 8001e00:	20000354 	.word	0x20000354

08001e04 <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8001e0e:	4907      	ldr	r1, [pc, #28]	; (8001e2c <setTimer+0x28>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001e18:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <setTimer+0x2c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	200001c8 	.word	0x200001c8
 8001e30:	20000218 	.word	0x20000218

08001e34 <timerRun>:

void timerRun(int index){
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <timerRun+0x48>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd13      	ble.n	8001e70 <timerRun+0x3c>
		timer_counter[index]--;
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <timerRun+0x48>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	490a      	ldr	r1, [pc, #40]	; (8001e7c <timerRun+0x48>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <timerRun+0x48>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dc04      	bgt.n	8001e70 <timerRun+0x3c>
			timer_flag[index] = 1;
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <timerRun+0x4c>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200001c8 	.word	0x200001c8
 8001e80:	20000218 	.word	0x20000218

08001e84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI1_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb8:	2208      	movs	r2, #8
 8001eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed6:	f003 fbdd 	bl	8005694 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f7ff fcf2 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000268 	.word	0x20000268
 8001eec:	40013000 	.word	0x40013000

08001ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d12f      	bne.n	8001f70 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001f40:	23b0      	movs	r3, #176	; 0xb0
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <HAL_SPI_MspInit+0x90>)
 8001f54:	f001 fdee 	bl	8003b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f58:	2340      	movs	r3, #64	; 0x40
 8001f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_SPI_MspInit+0x90>)
 8001f6c:	f001 fde2 	bl	8003b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40013000 	.word	0x40013000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010800 	.word	0x40010800

08001f84 <moveSM>:
#define DUTY	50
#define SPR		200

int count_spr = 0;

void moveSM(int cycle){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	if(cycle >= 0){
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0a      	blt.n	8001fa8 <moveSM+0x24>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	2120      	movs	r1, #32
 8001f96:	4812      	ldr	r0, [pc, #72]	; (8001fe0 <moveSM+0x5c>)
 8001f98:	f001 ff60 	bl	8003e5c <HAL_GPIO_WritePin>
		count_spr = SPR * cycle;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	22c8      	movs	r2, #200	; 0xc8
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <moveSM+0x60>)
 8001fa6:	6013      	str	r3, [r2, #0]
	}
	if(cycle < 0){
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0b      	bge.n	8001fc6 <moveSM+0x42>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <moveSM+0x5c>)
 8001fb4:	f001 ff52 	bl	8003e5c <HAL_GPIO_WritePin>
		count_spr = SPR * cycle * -1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <moveSM+0x60>)
 8001fc4:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY);
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <moveSM+0x64>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2232      	movs	r2, #50	; 0x32
 8001fcc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <moveSM+0x64>)
 8001fd2:	f003 fe15 	bl	8005c00 <HAL_TIM_PWM_Start_IT>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40010c00 	.word	0x40010c00
 8001fe4:	200002c0 	.word	0x200002c0
 8001fe8:	2000030c 	.word	0x2000030c

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10c      	bne.n	8002018 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		count_spr--;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3b01      	subs	r3, #1
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002006:	6013      	str	r3, [r2, #0]
		if(count_spr <= 0)
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dc03      	bgt.n	8002018 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8002010:	2100      	movs	r1, #0
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8002014:	f003 fefc 	bl	8005e10 <HAL_TIM_PWM_Stop_IT>
	}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40000400 	.word	0x40000400
 8002024:	200002c0 	.word	0x200002c0
 8002028:	2000030c 	.word	0x2000030c

0800202c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_MspInit+0x5c>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_MspInit+0x5c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6193      	str	r3, [r2, #24]
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_MspInit+0x5c>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_MspInit+0x5c>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_MspInit+0x5c>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_MspInit+0x5c>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_MspInit+0x60>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_MspInit+0x60>)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d6:	f000 fdc5 	bl	8002c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <DMA1_Channel1_IRQHandler+0x10>)
 80020e6:	f001 fae9 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200000d4 	.word	0x200000d4

080020f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <TIM2_IRQHandler+0x10>)
 80020fa:	f003 ff47 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002c4 	.word	0x200002c4

08002108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM3_IRQHandler+0x10>)
 800210e:	f003 ff3d 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000030c 	.word	0x2000030c

0800211c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <USART1_IRQHandler+0x10>)
 8002122:	f004 fddf 	bl	8006ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000042c 	.word	0x2000042c

08002130 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <USART2_IRQHandler+0x10>)
 8002136:	f004 fdd5 	bl	8006ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000474 	.word	0x20000474

08002144 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <TIM5_IRQHandler+0x10>)
 800214a:	f003 ff1f 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000039c 	.word	0x2000039c

08002158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_TIM2_Init+0x94>)
 8002182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_TIM2_Init+0x94>)
 800218a:	2247      	movs	r2, #71	; 0x47
 800218c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_TIM2_Init+0x94>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_TIM2_Init+0x94>)
 8002196:	f240 32e7 	movw	r2, #999	; 0x3e7
 800219a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <MX_TIM2_Init+0x94>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021a8:	4813      	ldr	r0, [pc, #76]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021aa:	f003 faf7 	bl	800579c <HAL_TIM_Base_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021b4:	f7ff fb88 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	4619      	mov	r1, r3
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021c6:	f004 f8ab 	bl	8006320 <HAL_TIM_ConfigClockSource>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021d0:	f7ff fb7a 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021dc:	463b      	mov	r3, r7
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021e2:	f004 fc5f 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021ec:	f7ff fb6c 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200002c4 	.word	0x200002c4

080021fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	f107 0320 	add.w	r3, r7, #32
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
 8002228:	615a      	str	r2, [r3, #20]
 800222a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <MX_TIM3_Init+0xe4>)
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <MX_TIM3_Init+0xe8>)
 8002230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8002232:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <MX_TIM3_Init+0xe4>)
 8002234:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002238:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <MX_TIM3_Init+0xe4>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <MX_TIM3_Init+0xe4>)
 8002242:	2263      	movs	r2, #99	; 0x63
 8002244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <MX_TIM3_Init+0xe4>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <MX_TIM3_Init+0xe4>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002252:	4823      	ldr	r0, [pc, #140]	; (80022e0 <MX_TIM3_Init+0xe4>)
 8002254:	f003 faa2 	bl	800579c <HAL_TIM_Base_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800225e:	f7ff fb33 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226c:	4619      	mov	r1, r3
 800226e:	481c      	ldr	r0, [pc, #112]	; (80022e0 <MX_TIM3_Init+0xe4>)
 8002270:	f004 f856 	bl	8006320 <HAL_TIM_ConfigClockSource>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800227a:	f7ff fb25 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800227e:	4818      	ldr	r0, [pc, #96]	; (80022e0 <MX_TIM3_Init+0xe4>)
 8002280:	f003 fb3c 	bl	80058fc <HAL_TIM_PWM_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800228a:	f7ff fb1d 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002296:	f107 0320 	add.w	r3, r7, #32
 800229a:	4619      	mov	r1, r3
 800229c:	4810      	ldr	r0, [pc, #64]	; (80022e0 <MX_TIM3_Init+0xe4>)
 800229e:	f004 fc01 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022a8:	f7ff fb0e 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ac:	2360      	movs	r3, #96	; 0x60
 80022ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4807      	ldr	r0, [pc, #28]	; (80022e0 <MX_TIM3_Init+0xe4>)
 80022c4:	f003 ff6a 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022ce:	f7ff fafb 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022d2:	4803      	ldr	r0, [pc, #12]	; (80022e0 <MX_TIM3_Init+0xe4>)
 80022d4:	f000 fa54 	bl	8002780 <HAL_TIM_MspPostInit>

}
 80022d8:	bf00      	nop
 80022da:	3738      	adds	r7, #56	; 0x38
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000030c 	.word	0x2000030c
 80022e4:	40000400 	.word	0x40000400

080022e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
 8002314:	615a      	str	r2, [r3, #20]
 8002316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002318:	4b38      	ldr	r3, [pc, #224]	; (80023fc <MX_TIM4_Init+0x114>)
 800231a:	4a39      	ldr	r2, [pc, #228]	; (8002400 <MX_TIM4_Init+0x118>)
 800231c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800231e:	4b37      	ldr	r3, [pc, #220]	; (80023fc <MX_TIM4_Init+0x114>)
 8002320:	f240 529f 	movw	r2, #1439	; 0x59f
 8002324:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002326:	4b35      	ldr	r3, [pc, #212]	; (80023fc <MX_TIM4_Init+0x114>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800232c:	4b33      	ldr	r3, [pc, #204]	; (80023fc <MX_TIM4_Init+0x114>)
 800232e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002332:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <MX_TIM4_Init+0x114>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <MX_TIM4_Init+0x114>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002340:	482e      	ldr	r0, [pc, #184]	; (80023fc <MX_TIM4_Init+0x114>)
 8002342:	f003 fa2b 	bl	800579c <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800234c:	f7ff fabc 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235a:	4619      	mov	r1, r3
 800235c:	4827      	ldr	r0, [pc, #156]	; (80023fc <MX_TIM4_Init+0x114>)
 800235e:	f003 ffdf 	bl	8006320 <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002368:	f7ff faae 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800236c:	4823      	ldr	r0, [pc, #140]	; (80023fc <MX_TIM4_Init+0x114>)
 800236e:	f003 fac5 	bl	80058fc <HAL_TIM_PWM_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002378:	f7ff faa6 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	4619      	mov	r1, r3
 800238a:	481c      	ldr	r0, [pc, #112]	; (80023fc <MX_TIM4_Init+0x114>)
 800238c:	f004 fb8a 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002396:	f7ff fa97 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239a:	2360      	movs	r3, #96	; 0x60
 800239c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 800239e:	2319      	movs	r3, #25
 80023a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4812      	ldr	r0, [pc, #72]	; (80023fc <MX_TIM4_Init+0x114>)
 80023b2:	f003 fef3 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80023bc:	f7ff fa84 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2204      	movs	r2, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	480d      	ldr	r0, [pc, #52]	; (80023fc <MX_TIM4_Init+0x114>)
 80023c8:	f003 fee8 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80023d2:	f7ff fa79 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2208      	movs	r2, #8
 80023da:	4619      	mov	r1, r3
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <MX_TIM4_Init+0x114>)
 80023de:	f003 fedd 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80023e8:	f7ff fa6e 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <MX_TIM4_Init+0x114>)
 80023ee:	f000 f9c7 	bl	8002780 <HAL_TIM_MspPostInit>

}
 80023f2:	bf00      	nop
 80023f4:	3738      	adds	r7, #56	; 0x38
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000354 	.word	0x20000354
 8002400:	40000800 	.word	0x40000800

08002404 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	f107 0320 	add.w	r3, r7, #32
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	615a      	str	r2, [r3, #20]
 8002432:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <MX_TIM5_Init+0xe4>)
 8002436:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <MX_TIM5_Init+0xe8>)
 8002438:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <MX_TIM5_Init+0xe4>)
 800243c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002440:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <MX_TIM5_Init+0xe4>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <MX_TIM5_Init+0xe4>)
 800244a:	2263      	movs	r2, #99	; 0x63
 800244c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <MX_TIM5_Init+0xe4>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <MX_TIM5_Init+0xe4>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800245a:	4823      	ldr	r0, [pc, #140]	; (80024e8 <MX_TIM5_Init+0xe4>)
 800245c:	f003 f99e 	bl	800579c <HAL_TIM_Base_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002466:	f7ff fa2f 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002474:	4619      	mov	r1, r3
 8002476:	481c      	ldr	r0, [pc, #112]	; (80024e8 <MX_TIM5_Init+0xe4>)
 8002478:	f003 ff52 	bl	8006320 <HAL_TIM_ConfigClockSource>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002482:	f7ff fa21 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002486:	4818      	ldr	r0, [pc, #96]	; (80024e8 <MX_TIM5_Init+0xe4>)
 8002488:	f003 fa38 	bl	80058fc <HAL_TIM_PWM_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002492:	f7ff fa19 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	4619      	mov	r1, r3
 80024a4:	4810      	ldr	r0, [pc, #64]	; (80024e8 <MX_TIM5_Init+0xe4>)
 80024a6:	f004 fafd 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80024b0:	f7ff fa0a 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b4:	2360      	movs	r3, #96	; 0x60
 80024b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	2200      	movs	r2, #0
 80024c8:	4619      	mov	r1, r3
 80024ca:	4807      	ldr	r0, [pc, #28]	; (80024e8 <MX_TIM5_Init+0xe4>)
 80024cc:	f003 fe66 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80024d6:	f7ff f9f7 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <MX_TIM5_Init+0xe4>)
 80024dc:	f000 f950 	bl	8002780 <HAL_TIM_MspPostInit>

}
 80024e0:	bf00      	nop
 80024e2:	3738      	adds	r7, #56	; 0x38
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000039c 	.word	0x2000039c
 80024ec:	40000c00 	.word	0x40000c00

080024f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b096      	sub	sp, #88	; 0x58
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2220      	movs	r2, #32
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f005 f8bd 	bl	80076a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800252e:	4b50      	ldr	r3, [pc, #320]	; (8002670 <MX_TIM8_Init+0x180>)
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <MX_TIM8_Init+0x184>)
 8002532:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 8002534:	4b4e      	ldr	r3, [pc, #312]	; (8002670 <MX_TIM8_Init+0x180>)
 8002536:	f240 1267 	movw	r2, #359	; 0x167
 800253a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <MX_TIM8_Init+0x180>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8002542:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <MX_TIM8_Init+0x180>)
 8002544:	2263      	movs	r2, #99	; 0x63
 8002546:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b49      	ldr	r3, [pc, #292]	; (8002670 <MX_TIM8_Init+0x180>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <MX_TIM8_Init+0x180>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	4b46      	ldr	r3, [pc, #280]	; (8002670 <MX_TIM8_Init+0x180>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800255a:	4845      	ldr	r0, [pc, #276]	; (8002670 <MX_TIM8_Init+0x180>)
 800255c:	f003 f91e 	bl	800579c <HAL_TIM_Base_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002566:	f7ff f9af 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002574:	4619      	mov	r1, r3
 8002576:	483e      	ldr	r0, [pc, #248]	; (8002670 <MX_TIM8_Init+0x180>)
 8002578:	f003 fed2 	bl	8006320 <HAL_TIM_ConfigClockSource>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002582:	f7ff f9a1 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002586:	483a      	ldr	r0, [pc, #232]	; (8002670 <MX_TIM8_Init+0x180>)
 8002588:	f003 f9b8 	bl	80058fc <HAL_TIM_PWM_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002592:	f7ff f999 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800259e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025a2:	4619      	mov	r1, r3
 80025a4:	4832      	ldr	r0, [pc, #200]	; (8002670 <MX_TIM8_Init+0x180>)
 80025a6:	f004 fa7d 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80025b0:	f7ff f98a 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b4:	2360      	movs	r3, #96	; 0x60
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	2200      	movs	r2, #0
 80025d6:	4619      	mov	r1, r3
 80025d8:	4825      	ldr	r0, [pc, #148]	; (8002670 <MX_TIM8_Init+0x180>)
 80025da:	f003 fddf 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80025e4:	f7ff f970 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ec:	2204      	movs	r2, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	481f      	ldr	r0, [pc, #124]	; (8002670 <MX_TIM8_Init+0x180>)
 80025f2:	f003 fdd3 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80025fc:	f7ff f964 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002604:	2208      	movs	r2, #8
 8002606:	4619      	mov	r1, r3
 8002608:	4819      	ldr	r0, [pc, #100]	; (8002670 <MX_TIM8_Init+0x180>)
 800260a:	f003 fdc7 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002614:	f7ff f958 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	220c      	movs	r2, #12
 800261e:	4619      	mov	r1, r3
 8002620:	4813      	ldr	r0, [pc, #76]	; (8002670 <MX_TIM8_Init+0x180>)
 8002622:	f003 fdbb 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800262c:	f7ff f94c 	bl	80018c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002648:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4807      	ldr	r0, [pc, #28]	; (8002670 <MX_TIM8_Init+0x180>)
 8002654:	f004 fa92 	bl	8006b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800265e:	f7ff f933 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002662:	4803      	ldr	r0, [pc, #12]	; (8002670 <MX_TIM8_Init+0x180>)
 8002664:	f000 f88c 	bl	8002780 <HAL_TIM_MspPostInit>

}
 8002668:	bf00      	nop
 800266a:	3758      	adds	r7, #88	; 0x58
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200003e4 	.word	0x200003e4
 8002674:	40013400 	.word	0x40013400

08002678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d114      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a37      	ldr	r2, [pc, #220]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b35      	ldr	r3, [pc, #212]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	201c      	movs	r0, #28
 80026a8:	f000 fe17 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026ac:	201c      	movs	r0, #28
 80026ae:	f000 fe30 	bl	8003312 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80026b2:	e056      	b.n	8002762 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <HAL_TIM_Base_MspInit+0xf8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d114      	bne.n	80026e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026be:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a2a      	ldr	r2, [pc, #168]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	61d3      	str	r3, [r2, #28]
 80026ca:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2101      	movs	r1, #1
 80026da:	201d      	movs	r0, #29
 80026dc:	f000 fdfd 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026e0:	201d      	movs	r0, #29
 80026e2:	f000 fe16 	bl	8003312 <HAL_NVIC_EnableIRQ>
}
 80026e6:	e03c      	b.n	8002762 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM4)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <HAL_TIM_Base_MspInit+0xfc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d10c      	bne.n	800270c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	61d3      	str	r3, [r2, #28]
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
}
 800270a:	e02a      	b.n	8002762 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM5)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_TIM_Base_MspInit+0x100>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d114      	bne.n	8002740 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a14      	ldr	r2, [pc, #80]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 800271c:	f043 0308 	orr.w	r3, r3, #8
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2032      	movs	r0, #50	; 0x32
 8002734:	f000 fdd1 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002738:	2032      	movs	r0, #50	; 0x32
 800273a:	f000 fdea 	bl	8003312 <HAL_NVIC_EnableIRQ>
}
 800273e:	e010      	b.n	8002762 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <HAL_TIM_Base_MspInit+0x104>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10b      	bne.n	8002762 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 8002750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002754:	6193      	str	r3, [r2, #24]
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_TIM_Base_MspInit+0xf4>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	bf00      	nop
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40000c00 	.word	0x40000c00
 800277c:	40013400 	.word	0x40013400

08002780 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a46      	ldr	r2, [pc, #280]	; (80028b4 <HAL_TIM_MspPostInit+0x134>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d12a      	bne.n	80027f6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a44      	ldr	r2, [pc, #272]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 80027b8:	2310      	movs	r3, #16
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2302      	movs	r3, #2
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	4619      	mov	r1, r3
 80027ca:	483c      	ldr	r0, [pc, #240]	; (80028bc <HAL_TIM_MspPostInit+0x13c>)
 80027cc:	f001 f9b2 	bl	8003b34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_TIM_MspPostInit+0x140>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <HAL_TIM_MspPostInit+0x140>)
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80027f4:	e05a      	b.n	80028ac <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <HAL_TIM_MspPostInit+0x144>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d119      	bne.n	8002834 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 8002806:	f043 0308 	orr.w	r3, r3, #8
 800280a:	6193      	str	r3, [r2, #24]
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8002818:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800281c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2302      	movs	r3, #2
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4823      	ldr	r0, [pc, #140]	; (80028bc <HAL_TIM_MspPostInit+0x13c>)
 800282e:	f001 f981 	bl	8003b34 <HAL_GPIO_Init>
}
 8002832:	e03b      	b.n	80028ac <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_TIM_MspPostInit+0x148>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d118      	bne.n	8002870 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6193      	str	r3, [r2, #24]
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002856:	2301      	movs	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2302      	movs	r3, #2
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4818      	ldr	r0, [pc, #96]	; (80028cc <HAL_TIM_MspPostInit+0x14c>)
 800286a:	f001 f963 	bl	8003b34 <HAL_GPIO_Init>
}
 800286e:	e01d      	b.n	80028ac <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_TIM_MspPostInit+0x150>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d118      	bne.n	80028ac <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 8002880:	f043 0310 	orr.w	r3, r3, #16
 8002884:	6193      	str	r3, [r2, #24]
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_TIM_MspPostInit+0x138>)
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 8002892:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	4619      	mov	r1, r3
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <HAL_TIM_MspPostInit+0x154>)
 80028a8:	f001 f944 	bl	8003b34 <HAL_GPIO_Init>
}
 80028ac:	bf00      	nop
 80028ae:	3730      	adds	r7, #48	; 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000800 	.word	0x40000800
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	40010800 	.word	0x40010800
 80028d0:	40013400 	.word	0x40013400
 80028d4:	40011000 	.word	0x40011000

080028d8 <buzzer_start_freq>:
 *      Author: phamv
 */

#include "tone.h"

void buzzer_start_freq(uint32_t frequency){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	if(frequency == 0) return;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d030      	beq.n	8002948 <buzzer_start_freq+0x70>
	uint32_t timer_clock = 72000000;  // Example for APB1 timer
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <buzzer_start_freq+0x78>)
 80028e8:	60fb      	str	r3, [r7, #12]
	uint32_t prescaler = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
	uint32_t period = (timer_clock / frequency) - 1;
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	613b      	str	r3, [r7, #16]

	// Adjust prescaler if period is too large for 16-bit timer
	while (period > 65535) {
 80028fa:	e00c      	b.n	8002916 <buzzer_start_freq+0x3e>
		prescaler++;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
		period = (timer_clock / (prescaler + 1) / frequency) - 1;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
	while (period > 65535) {
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d2ee      	bcs.n	80028fc <buzzer_start_freq+0x24>
	}

	__HAL_TIM_SET_PRESCALER(&htim5, prescaler);
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <buzzer_start_freq+0x7c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim5, period);
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <buzzer_start_freq+0x7c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <buzzer_start_freq+0x7c>)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,period/2);
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <buzzer_start_freq+0x7c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); // Re-start PWM to apply changes
 800293e:	2100      	movs	r1, #0
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <buzzer_start_freq+0x7c>)
 8002942:	f003 f833 	bl	80059ac <HAL_TIM_PWM_Start>
 8002946:	e000      	b.n	800294a <buzzer_start_freq+0x72>
	if(frequency == 0) return;
 8002948:	bf00      	nop
}
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	044aa200 	.word	0x044aa200
 8002954:	2000039c 	.word	0x2000039c

08002958 <buzzer_stop>:

void buzzer_stop(){
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 800295c:	2100      	movs	r1, #0
 800295e:	4802      	ldr	r0, [pc, #8]	; (8002968 <buzzer_stop+0x10>)
 8002960:	f003 f8de 	bl	8005b20 <HAL_TIM_PWM_Stop>
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000039c 	.word	0x2000039c

0800296c <tone_play>:

//blocking function
void tone_play(int* note, int* dur, int len){
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e014      	b.n	80029a8 <tone_play+0x3c>
		buzzer_start_freq(note[i]);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ffa5 	bl	80028d8 <buzzer_start_freq>
		HAL_Delay(dur[i]);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4413      	add	r3, r2
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 f97f 	bl	8002c9c <HAL_Delay>
		buzzer_stop();
 800299e:	f7ff ffdb 	bl	8002958 <buzzer_stop>
	for(int i = 0; i < len; i++){
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbe6      	blt.n	800297e <tone_play+0x12>
	}
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <MX_USART1_UART_Init+0x50>)
 80029c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029e2:	220c      	movs	r2, #12
 80029e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029f2:	4805      	ldr	r0, [pc, #20]	; (8002a08 <MX_USART1_UART_Init+0x4c>)
 80029f4:	f004 f925 	bl	8006c42 <HAL_UART_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029fe:	f7fe ff63 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000042c 	.word	0x2000042c
 8002a0c:	40013800 	.word	0x40013800

08002a10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <MX_USART2_UART_Init+0x50>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a48:	f004 f8fb 	bl	8006c42 <HAL_UART_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a52:	f7fe ff39 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000474 	.word	0x20000474
 8002a60:	40004400 	.word	0x40004400

08002a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0318 	add.w	r3, r7, #24
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <HAL_UART_MspInit+0x118>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d13a      	bne.n	8002afa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9c:	4b38      	ldr	r3, [pc, #224]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	4a37      	ldr	r2, [pc, #220]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6193      	str	r3, [r2, #24]
 8002aa8:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 0318 	add.w	r3, r7, #24
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	482e      	ldr	r0, [pc, #184]	; (8002b84 <HAL_UART_MspInit+0x120>)
 8002aca:	f001 f833 	bl	8003b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4828      	ldr	r0, [pc, #160]	; (8002b84 <HAL_UART_MspInit+0x120>)
 8002ae4:	f001 f826 	bl	8003b34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2100      	movs	r1, #0
 8002aec:	2025      	movs	r0, #37	; 0x25
 8002aee:	f000 fbf4 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002af2:	2025      	movs	r0, #37	; 0x25
 8002af4:	f000 fc0d 	bl	8003312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002af8:	e03c      	b.n	8002b74 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_UART_MspInit+0x124>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d137      	bne.n	8002b74 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0e:	61d3      	str	r3, [r2, #28]
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_UART_MspInit+0x11c>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b34:	2304      	movs	r3, #4
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	4619      	mov	r1, r3
 8002b46:	480f      	ldr	r0, [pc, #60]	; (8002b84 <HAL_UART_MspInit+0x120>)
 8002b48:	f000 fff4 	bl	8003b34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <HAL_UART_MspInit+0x120>)
 8002b60:	f000 ffe8 	bl	8003b34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	2026      	movs	r0, #38	; 0x26
 8002b6a:	f000 fbb6 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b6e:	2026      	movs	r0, #38	; 0x26
 8002b70:	f000 fbcf 	bl	8003312 <HAL_NVIC_EnableIRQ>
}
 8002b74:	bf00      	nop
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40010800 	.word	0x40010800
 8002b88:	40004400 	.word	0x40004400

08002b8c <Reset_Handler>:
 8002b8c:	f7ff fae4 	bl	8002158 <SystemInit>
 8002b90:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <LoopFillZerobss+0xe>)
 8002b92:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <LoopFillZerobss+0x12>)
 8002b94:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <LoopFillZerobss+0x16>)
 8002b96:	2300      	movs	r3, #0
 8002b98:	e002      	b.n	8002ba0 <LoopCopyDataInit>

08002b9a <CopyDataInit>:
 8002b9a:	58d4      	ldr	r4, [r2, r3]
 8002b9c:	50c4      	str	r4, [r0, r3]
 8002b9e:	3304      	adds	r3, #4

08002ba0 <LoopCopyDataInit>:
 8002ba0:	18c4      	adds	r4, r0, r3
 8002ba2:	428c      	cmp	r4, r1
 8002ba4:	d3f9      	bcc.n	8002b9a <CopyDataInit>
 8002ba6:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <LoopFillZerobss+0x1a>)
 8002ba8:	4c09      	ldr	r4, [pc, #36]	; (8002bd0 <LoopFillZerobss+0x1e>)
 8002baa:	2300      	movs	r3, #0
 8002bac:	e001      	b.n	8002bb2 <LoopFillZerobss>

08002bae <FillZerobss>:
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	3204      	adds	r2, #4

08002bb2 <LoopFillZerobss>:
 8002bb2:	42a2      	cmp	r2, r4
 8002bb4:	d3fb      	bcc.n	8002bae <FillZerobss>
 8002bb6:	f004 fd85 	bl	80076c4 <__libc_init_array>
 8002bba:	f7fe fd79 	bl	80016b0 <main>
 8002bbe:	4770      	bx	lr
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000088 	.word	0x20000088
 8002bc8:	08007f30 	.word	0x08007f30
 8002bcc:	20000088 	.word	0x20000088
 8002bd0:	200005f8 	.word	0x200005f8

08002bd4 <ADC1_2_IRQHandler>:
 8002bd4:	e7fe      	b.n	8002bd4 <ADC1_2_IRQHandler>
	...

08002bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_Init+0x28>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_Init+0x28>)
 8002be2:	f043 0310 	orr.w	r3, r3, #16
 8002be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be8:	2003      	movs	r0, #3
 8002bea:	f000 fb6b 	bl	80032c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bee:	200f      	movs	r0, #15
 8002bf0:	f000 f808 	bl	8002c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf4:	f7ff fa1a 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40022000 	.word	0x40022000

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_InitTick+0x54>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_InitTick+0x58>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fb83 	bl	800332e <HAL_SYSTICK_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00e      	b.n	8002c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d80a      	bhi.n	8002c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f000 fb4b 	bl	80032da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c44:	4a06      	ldr	r2, [pc, #24]	; (8002c60 <HAL_InitTick+0x5c>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	2000001c 	.word	0x2000001c
 8002c5c:	20000024 	.word	0x20000024
 8002c60:	20000020 	.word	0x20000020

08002c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_IncTick+0x1c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_IncTick+0x20>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <HAL_IncTick+0x20>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	20000024 	.word	0x20000024
 8002c84:	200004bc 	.word	0x200004bc

08002c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <HAL_GetTick+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	200004bc 	.word	0x200004bc

08002c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff fff0 	bl	8002c88 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d005      	beq.n	8002cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_Delay+0x44>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cc2:	bf00      	nop
 8002cc4:	f7ff ffe0 	bl	8002c88 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d8f7      	bhi.n	8002cc4 <HAL_Delay+0x28>
  {
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000024 	.word	0x20000024

08002ce4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0ce      	b.n	8002ea4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd ffb6 	bl	8000c94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f9bd 	bl	80030a8 <ADC_ConversionStop_Disable>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80a9 	bne.w	8002e92 <HAL_ADC_Init+0x1ae>
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80a5 	bne.w	8002e92 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d50:	f023 0302 	bic.w	r3, r3, #2
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4951      	ldr	r1, [pc, #324]	; (8002eac <HAL_ADC_Init+0x1c8>)
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d10a      	bne.n	8002d80 <HAL_ADC_Init+0x9c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d72:	d002      	beq.n	8002d7a <HAL_ADC_Init+0x96>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	e004      	b.n	8002d84 <HAL_ADC_Init+0xa0>
 8002d7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d7e:	e001      	b.n	8002d84 <HAL_ADC_Init+0xa0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d84:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7b1b      	ldrb	r3, [r3, #12]
 8002d8a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d8c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9c:	d003      	beq.n	8002da6 <HAL_ADC_Init+0xc2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_ADC_Init+0xc8>
 8002da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002daa:	e000      	b.n	8002dae <HAL_ADC_Init+0xca>
 8002dac:	2300      	movs	r3, #0
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7d1b      	ldrb	r3, [r3, #20]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d119      	bne.n	8002df0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7b1b      	ldrb	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	035a      	lsls	r2, r3, #13
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e00b      	b.n	8002df0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_ADC_Init+0x1cc>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e20:	d003      	beq.n	8002e2a <HAL_ADC_Init+0x146>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d104      	bne.n	8002e34 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	051b      	lsls	r3, r3, #20
 8002e32:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_ADC_Init+0x1d0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d10b      	bne.n	8002e70 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e6e:	e018      	b.n	8002ea2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	f023 0312 	bic.w	r3, r3, #18
 8002e78:	f043 0210 	orr.w	r2, r3, #16
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e90:	e007      	b.n	8002ea2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	f043 0210 	orr.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40013c00 	.word	0x40013c00
 8002eb0:	ffe1f7fd 	.word	0xffe1f7fd
 8002eb4:	ff1f0efe 	.word	0xff1f0efe

08002eb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x20>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0dc      	b.n	8003092 <HAL_ADC_ConfigChannel+0x1da>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d81c      	bhi.n	8002f22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b05      	subs	r3, #5
 8002efa:	221f      	movs	r2, #31
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	4019      	ands	r1, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	3b05      	subs	r3, #5
 8002f14:	fa00 f203 	lsl.w	r2, r0, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8002f20:	e03c      	b.n	8002f9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d81c      	bhi.n	8002f64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b23      	subs	r3, #35	; 0x23
 8002f3c:	221f      	movs	r2, #31
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	4019      	ands	r1, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	3b23      	subs	r3, #35	; 0x23
 8002f56:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
 8002f62:	e01b      	b.n	8002f9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b41      	subs	r3, #65	; 0x41
 8002f76:	221f      	movs	r2, #31
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4019      	ands	r1, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3b41      	subs	r3, #65	; 0x41
 8002f90:	fa00 f203 	lsl.w	r2, r0, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b09      	cmp	r3, #9
 8002fa2:	d91c      	bls.n	8002fde <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68d9      	ldr	r1, [r3, #12]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b1e      	subs	r3, #30
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	4019      	ands	r1, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6898      	ldr	r0, [r3, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b1e      	subs	r3, #30
 8002fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	e019      	b.n	8003012 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6919      	ldr	r1, [r3, #16]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	2207      	movs	r2, #7
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	4019      	ands	r1, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6898      	ldr	r0, [r3, #8]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b10      	cmp	r3, #16
 8003018:	d003      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800301e:	2b11      	cmp	r3, #17
 8003020:	d132      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_ADC_ConfigChannel+0x1e4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d125      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d126      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003048:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d11a      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9a      	lsrs	r2, r3, #18
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003068:	e002      	b.n	8003070 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3b01      	subs	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f9      	bne.n	800306a <HAL_ADC_ConfigChannel+0x1b2>
 8003076:	e007      	b.n	8003088 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	40012400 	.word	0x40012400
 80030a0:	2000001c 	.word	0x2000001c
 80030a4:	431bde83 	.word	0x431bde83

080030a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d12e      	bne.n	8003120 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030d2:	f7ff fdd9 	bl	8002c88 <HAL_GetTick>
 80030d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030d8:	e01b      	b.n	8003112 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030da:	f7ff fdd5 	bl	8002c88 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d914      	bls.n	8003112 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10d      	bne.n	8003112 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e007      	b.n	8003122 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d0dc      	beq.n	80030da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003148:	4013      	ands	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315e:	4a04      	ldr	r2, [pc, #16]	; (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	60d3      	str	r3, [r2, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <__NVIC_GetPriorityGrouping+0x18>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f003 0307 	and.w	r3, r3, #7
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db0b      	blt.n	80031ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	f003 021f 	and.w	r2, r3, #31
 80031a8:	4906      	ldr	r1, [pc, #24]	; (80031c4 <__NVIC_EnableIRQ+0x34>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2001      	movs	r0, #1
 80031b2:	fa00 f202 	lsl.w	r2, r0, r2
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100

080031c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	db0a      	blt.n	80031f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	490c      	ldr	r1, [pc, #48]	; (8003214 <__NVIC_SetPriority+0x4c>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	440b      	add	r3, r1
 80031ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f0:	e00a      	b.n	8003208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4908      	ldr	r1, [pc, #32]	; (8003218 <__NVIC_SetPriority+0x50>)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3b04      	subs	r3, #4
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	440b      	add	r3, r1
 8003206:	761a      	strb	r2, [r3, #24]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f1c3 0307 	rsb	r3, r3, #7
 8003236:	2b04      	cmp	r3, #4
 8003238:	bf28      	it	cs
 800323a:	2304      	movcs	r3, #4
 800323c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3304      	adds	r3, #4
 8003242:	2b06      	cmp	r3, #6
 8003244:	d902      	bls.n	800324c <NVIC_EncodePriority+0x30>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3b03      	subs	r3, #3
 800324a:	e000      	b.n	800324e <NVIC_EncodePriority+0x32>
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	401a      	ands	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	43d9      	mvns	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	4313      	orrs	r3, r2
         );
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003290:	d301      	bcc.n	8003296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003292:	2301      	movs	r3, #1
 8003294:	e00f      	b.n	80032b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <SysTick_Config+0x40>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329e:	210f      	movs	r1, #15
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	f7ff ff90 	bl	80031c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <SysTick_Config+0x40>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <SysTick_Config+0x40>)
 80032b0:	2207      	movs	r2, #7
 80032b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	e000e010 	.word	0xe000e010

080032c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff2d 	bl	800312c <__NVIC_SetPriorityGrouping>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ec:	f7ff ff42 	bl	8003174 <__NVIC_GetPriorityGrouping>
 80032f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff ff90 	bl	800321c <NVIC_EncodePriority>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff5f 	bl	80031c8 <__NVIC_SetPriority>
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff35 	bl	8003190 <__NVIC_EnableIRQ>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffa2 	bl	8003280 <SysTick_Config>
 800333c:	4603      	mov	r3, r0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e059      	b.n	8003412 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_DMA_Init+0xd4>)
 8003366:	429a      	cmp	r2, r3
 8003368:	d80f      	bhi.n	800338a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_DMA_Init+0xd8>)
 8003372:	4413      	add	r3, r2
 8003374:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <HAL_DMA_Init+0xdc>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_DMA_Init+0xe0>)
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
 8003388:	e00e      	b.n	80033a8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_DMA_Init+0xe4>)
 8003392:	4413      	add	r3, r2
 8003394:	4a23      	ldr	r2, [pc, #140]	; (8003424 <HAL_DMA_Init+0xdc>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_DMA_Init+0xe8>)
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40020407 	.word	0x40020407
 8003420:	bffdfff8 	.word	0xbffdfff8
 8003424:	cccccccd 	.word	0xcccccccd
 8003428:	40020000 	.word	0x40020000
 800342c:	bffdfbf8 	.word	0xbffdfbf8
 8003430:	40020400 	.word	0x40020400

08003434 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d008      	beq.n	800345e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2204      	movs	r2, #4
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e020      	b.n	80034a0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 020e 	bic.w	r2, r2, #14
 800346c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2101      	movs	r1, #1
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d005      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2204      	movs	r2, #4
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
 80034ce:	e0d6      	b.n	800367e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020e 	bic.w	r2, r2, #14
 80034de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b64      	ldr	r3, [pc, #400]	; (8003688 <HAL_DMA_Abort_IT+0x1dc>)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d958      	bls.n	80035ae <HAL_DMA_Abort_IT+0x102>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a62      	ldr	r2, [pc, #392]	; (800368c <HAL_DMA_Abort_IT+0x1e0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d04f      	beq.n	80035a6 <HAL_DMA_Abort_IT+0xfa>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a61      	ldr	r2, [pc, #388]	; (8003690 <HAL_DMA_Abort_IT+0x1e4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d048      	beq.n	80035a2 <HAL_DMA_Abort_IT+0xf6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <HAL_DMA_Abort_IT+0x1e8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d040      	beq.n	800359c <HAL_DMA_Abort_IT+0xf0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a5e      	ldr	r2, [pc, #376]	; (8003698 <HAL_DMA_Abort_IT+0x1ec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d038      	beq.n	8003596 <HAL_DMA_Abort_IT+0xea>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a5c      	ldr	r2, [pc, #368]	; (800369c <HAL_DMA_Abort_IT+0x1f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d030      	beq.n	8003590 <HAL_DMA_Abort_IT+0xe4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <HAL_DMA_Abort_IT+0x1f4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d028      	beq.n	800358a <HAL_DMA_Abort_IT+0xde>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_DMA_Abort_IT+0x1dc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d020      	beq.n	8003584 <HAL_DMA_Abort_IT+0xd8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <HAL_DMA_Abort_IT+0x1f8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d019      	beq.n	8003580 <HAL_DMA_Abort_IT+0xd4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a55      	ldr	r2, [pc, #340]	; (80036a8 <HAL_DMA_Abort_IT+0x1fc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d012      	beq.n	800357c <HAL_DMA_Abort_IT+0xd0>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a54      	ldr	r2, [pc, #336]	; (80036ac <HAL_DMA_Abort_IT+0x200>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00a      	beq.n	8003576 <HAL_DMA_Abort_IT+0xca>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_DMA_Abort_IT+0x204>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d102      	bne.n	8003570 <HAL_DMA_Abort_IT+0xc4>
 800356a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800356e:	e01b      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 8003570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003574:	e018      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 8003576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800357a:	e015      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 800357c:	2310      	movs	r3, #16
 800357e:	e013      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 8003580:	2301      	movs	r3, #1
 8003582:	e011      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 8003584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003588:	e00e      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 800358a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800358e:	e00b      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 8003590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003594:	e008      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 8003596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800359a:	e005      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 800359c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a0:	e002      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 80035a2:	2310      	movs	r3, #16
 80035a4:	e000      	b.n	80035a8 <HAL_DMA_Abort_IT+0xfc>
 80035a6:	2301      	movs	r3, #1
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_DMA_Abort_IT+0x208>)
 80035aa:	6053      	str	r3, [r2, #4]
 80035ac:	e057      	b.n	800365e <HAL_DMA_Abort_IT+0x1b2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a36      	ldr	r2, [pc, #216]	; (800368c <HAL_DMA_Abort_IT+0x1e0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04f      	beq.n	8003658 <HAL_DMA_Abort_IT+0x1ac>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_DMA_Abort_IT+0x1e4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d048      	beq.n	8003654 <HAL_DMA_Abort_IT+0x1a8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_DMA_Abort_IT+0x1e8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_Abort_IT+0x1a2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a31      	ldr	r2, [pc, #196]	; (8003698 <HAL_DMA_Abort_IT+0x1ec>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d038      	beq.n	8003648 <HAL_DMA_Abort_IT+0x19c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a30      	ldr	r2, [pc, #192]	; (800369c <HAL_DMA_Abort_IT+0x1f0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d030      	beq.n	8003642 <HAL_DMA_Abort_IT+0x196>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <HAL_DMA_Abort_IT+0x1f4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d028      	beq.n	800363c <HAL_DMA_Abort_IT+0x190>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <HAL_DMA_Abort_IT+0x1dc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d020      	beq.n	8003636 <HAL_DMA_Abort_IT+0x18a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_DMA_Abort_IT+0x1f8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d019      	beq.n	8003632 <HAL_DMA_Abort_IT+0x186>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a29      	ldr	r2, [pc, #164]	; (80036a8 <HAL_DMA_Abort_IT+0x1fc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d012      	beq.n	800362e <HAL_DMA_Abort_IT+0x182>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a27      	ldr	r2, [pc, #156]	; (80036ac <HAL_DMA_Abort_IT+0x200>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00a      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_DMA_Abort_IT+0x204>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d102      	bne.n	8003622 <HAL_DMA_Abort_IT+0x176>
 800361c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003620:	e01b      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003626:	e018      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800362c:	e015      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 800362e:	2310      	movs	r3, #16
 8003630:	e013      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003632:	2301      	movs	r3, #1
 8003634:	e011      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800363a:	e00e      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 800363c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003640:	e00b      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003646:	e008      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800364c:	e005      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 800364e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003652:	e002      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003654:	2310      	movs	r3, #16
 8003656:	e000      	b.n	800365a <HAL_DMA_Abort_IT+0x1ae>
 8003658:	2301      	movs	r3, #1
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_DMA_Abort_IT+0x20c>)
 800365c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
    } 
  }
  return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40020080 	.word	0x40020080
 800368c:	40020008 	.word	0x40020008
 8003690:	4002001c 	.word	0x4002001c
 8003694:	40020030 	.word	0x40020030
 8003698:	40020044 	.word	0x40020044
 800369c:	40020058 	.word	0x40020058
 80036a0:	4002006c 	.word	0x4002006c
 80036a4:	40020408 	.word	0x40020408
 80036a8:	4002041c 	.word	0x4002041c
 80036ac:	40020430 	.word	0x40020430
 80036b0:	40020444 	.word	0x40020444
 80036b4:	40020400 	.word	0x40020400
 80036b8:	40020000 	.word	0x40020000

080036bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2204      	movs	r2, #4
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80f1 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x20c>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80eb 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <HAL_DMA_IRQHandler+0x1d8>)
 8003718:	429a      	cmp	r2, r3
 800371a:	d958      	bls.n	80037ce <HAL_DMA_IRQHandler+0x112>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5d      	ldr	r2, [pc, #372]	; (8003898 <HAL_DMA_IRQHandler+0x1dc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d04f      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x10a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5c      	ldr	r2, [pc, #368]	; (800389c <HAL_DMA_IRQHandler+0x1e0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d048      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x106>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <HAL_DMA_IRQHandler+0x1e4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d040      	beq.n	80037bc <HAL_DMA_IRQHandler+0x100>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a59      	ldr	r2, [pc, #356]	; (80038a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d038      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xfa>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a57      	ldr	r2, [pc, #348]	; (80038a8 <HAL_DMA_IRQHandler+0x1ec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d030      	beq.n	80037b0 <HAL_DMA_IRQHandler+0xf4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a56      	ldr	r2, [pc, #344]	; (80038ac <HAL_DMA_IRQHandler+0x1f0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d028      	beq.n	80037aa <HAL_DMA_IRQHandler+0xee>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a4d      	ldr	r2, [pc, #308]	; (8003894 <HAL_DMA_IRQHandler+0x1d8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d020      	beq.n	80037a4 <HAL_DMA_IRQHandler+0xe8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_DMA_IRQHandler+0x1f4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d019      	beq.n	80037a0 <HAL_DMA_IRQHandler+0xe4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a50      	ldr	r2, [pc, #320]	; (80038b4 <HAL_DMA_IRQHandler+0x1f8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d012      	beq.n	800379c <HAL_DMA_IRQHandler+0xe0>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <HAL_DMA_IRQHandler+0x1fc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00a      	beq.n	8003796 <HAL_DMA_IRQHandler+0xda>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a4d      	ldr	r2, [pc, #308]	; (80038bc <HAL_DMA_IRQHandler+0x200>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d102      	bne.n	8003790 <HAL_DMA_IRQHandler+0xd4>
 800378a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800378e:	e01b      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 8003790:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003794:	e018      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 8003796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800379a:	e015      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 800379c:	2340      	movs	r3, #64	; 0x40
 800379e:	e013      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037a0:	2304      	movs	r3, #4
 80037a2:	e011      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037a8:	e00e      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037ae:	e00b      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037b4:	e008      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ba:	e005      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c0:	e002      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037c2:	2340      	movs	r3, #64	; 0x40
 80037c4:	e000      	b.n	80037c8 <HAL_DMA_IRQHandler+0x10c>
 80037c6:	2304      	movs	r3, #4
 80037c8:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <HAL_DMA_IRQHandler+0x204>)
 80037ca:	6053      	str	r3, [r2, #4]
 80037cc:	e057      	b.n	800387e <HAL_DMA_IRQHandler+0x1c2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a31      	ldr	r2, [pc, #196]	; (8003898 <HAL_DMA_IRQHandler+0x1dc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d04f      	beq.n	8003878 <HAL_DMA_IRQHandler+0x1bc>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a2f      	ldr	r2, [pc, #188]	; (800389c <HAL_DMA_IRQHandler+0x1e0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d048      	beq.n	8003874 <HAL_DMA_IRQHandler+0x1b8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2e      	ldr	r2, [pc, #184]	; (80038a0 <HAL_DMA_IRQHandler+0x1e4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d040      	beq.n	800386e <HAL_DMA_IRQHandler+0x1b2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2c      	ldr	r2, [pc, #176]	; (80038a4 <HAL_DMA_IRQHandler+0x1e8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d038      	beq.n	8003868 <HAL_DMA_IRQHandler+0x1ac>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <HAL_DMA_IRQHandler+0x1ec>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d030      	beq.n	8003862 <HAL_DMA_IRQHandler+0x1a6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a29      	ldr	r2, [pc, #164]	; (80038ac <HAL_DMA_IRQHandler+0x1f0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d028      	beq.n	800385c <HAL_DMA_IRQHandler+0x1a0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_DMA_IRQHandler+0x1d8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d020      	beq.n	8003856 <HAL_DMA_IRQHandler+0x19a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_DMA_IRQHandler+0x1f4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d019      	beq.n	8003852 <HAL_DMA_IRQHandler+0x196>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <HAL_DMA_IRQHandler+0x1f8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d012      	beq.n	800384e <HAL_DMA_IRQHandler+0x192>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <HAL_DMA_IRQHandler+0x1fc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00a      	beq.n	8003848 <HAL_DMA_IRQHandler+0x18c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a21      	ldr	r2, [pc, #132]	; (80038bc <HAL_DMA_IRQHandler+0x200>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d102      	bne.n	8003842 <HAL_DMA_IRQHandler+0x186>
 800383c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003840:	e01b      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003842:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003846:	e018      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800384c:	e015      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 800384e:	2340      	movs	r3, #64	; 0x40
 8003850:	e013      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003852:	2304      	movs	r3, #4
 8003854:	e011      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003856:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800385a:	e00e      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 800385c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003860:	e00b      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003862:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003866:	e008      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800386c:	e005      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 800386e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003872:	e002      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003874:	2340      	movs	r3, #64	; 0x40
 8003876:	e000      	b.n	800387a <HAL_DMA_IRQHandler+0x1be>
 8003878:	2304      	movs	r3, #4
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <HAL_DMA_IRQHandler+0x208>)
 800387c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8136 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003890:	e130      	b.n	8003af4 <HAL_DMA_IRQHandler+0x438>
 8003892:	bf00      	nop
 8003894:	40020080 	.word	0x40020080
 8003898:	40020008 	.word	0x40020008
 800389c:	4002001c 	.word	0x4002001c
 80038a0:	40020030 	.word	0x40020030
 80038a4:	40020044 	.word	0x40020044
 80038a8:	40020058 	.word	0x40020058
 80038ac:	4002006c 	.word	0x4002006c
 80038b0:	40020408 	.word	0x40020408
 80038b4:	4002041c 	.word	0x4002041c
 80038b8:	40020430 	.word	0x40020430
 80038bc:	40020444 	.word	0x40020444
 80038c0:	40020400 	.word	0x40020400
 80038c4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2202      	movs	r2, #2
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80dd 	beq.w	8003a94 <HAL_DMA_IRQHandler+0x3d8>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80d7 	beq.w	8003a94 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10b      	bne.n	800390c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 020a 	bic.w	r2, r2, #10
 8003902:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	4b7b      	ldr	r3, [pc, #492]	; (8003b00 <HAL_DMA_IRQHandler+0x444>)
 8003914:	429a      	cmp	r2, r3
 8003916:	d958      	bls.n	80039ca <HAL_DMA_IRQHandler+0x30e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a79      	ldr	r2, [pc, #484]	; (8003b04 <HAL_DMA_IRQHandler+0x448>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04f      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x306>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a78      	ldr	r2, [pc, #480]	; (8003b08 <HAL_DMA_IRQHandler+0x44c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d048      	beq.n	80039be <HAL_DMA_IRQHandler+0x302>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a76      	ldr	r2, [pc, #472]	; (8003b0c <HAL_DMA_IRQHandler+0x450>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x2fc>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a75      	ldr	r2, [pc, #468]	; (8003b10 <HAL_DMA_IRQHandler+0x454>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d038      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2f6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a73      	ldr	r2, [pc, #460]	; (8003b14 <HAL_DMA_IRQHandler+0x458>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d030      	beq.n	80039ac <HAL_DMA_IRQHandler+0x2f0>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a72      	ldr	r2, [pc, #456]	; (8003b18 <HAL_DMA_IRQHandler+0x45c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d028      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x2ea>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a69      	ldr	r2, [pc, #420]	; (8003b00 <HAL_DMA_IRQHandler+0x444>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d020      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x2e4>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6e      	ldr	r2, [pc, #440]	; (8003b1c <HAL_DMA_IRQHandler+0x460>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d019      	beq.n	800399c <HAL_DMA_IRQHandler+0x2e0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a6c      	ldr	r2, [pc, #432]	; (8003b20 <HAL_DMA_IRQHandler+0x464>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d012      	beq.n	8003998 <HAL_DMA_IRQHandler+0x2dc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6b      	ldr	r2, [pc, #428]	; (8003b24 <HAL_DMA_IRQHandler+0x468>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00a      	beq.n	8003992 <HAL_DMA_IRQHandler+0x2d6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a69      	ldr	r2, [pc, #420]	; (8003b28 <HAL_DMA_IRQHandler+0x46c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d102      	bne.n	800398c <HAL_DMA_IRQHandler+0x2d0>
 8003986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800398a:	e01b      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 800398c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003990:	e018      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 8003992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003996:	e015      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 8003998:	2320      	movs	r3, #32
 800399a:	e013      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 800399c:	2302      	movs	r3, #2
 800399e:	e011      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 80039a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039a4:	e00e      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 80039a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039aa:	e00b      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 80039ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b0:	e008      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 80039b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b6:	e005      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 80039b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039bc:	e002      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 80039be:	2320      	movs	r3, #32
 80039c0:	e000      	b.n	80039c4 <HAL_DMA_IRQHandler+0x308>
 80039c2:	2302      	movs	r3, #2
 80039c4:	4a59      	ldr	r2, [pc, #356]	; (8003b2c <HAL_DMA_IRQHandler+0x470>)
 80039c6:	6053      	str	r3, [r2, #4]
 80039c8:	e057      	b.n	8003a7a <HAL_DMA_IRQHandler+0x3be>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4d      	ldr	r2, [pc, #308]	; (8003b04 <HAL_DMA_IRQHandler+0x448>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04f      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x3b8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a4b      	ldr	r2, [pc, #300]	; (8003b08 <HAL_DMA_IRQHandler+0x44c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d048      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x3b4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_DMA_IRQHandler+0x450>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d040      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x3ae>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a48      	ldr	r2, [pc, #288]	; (8003b10 <HAL_DMA_IRQHandler+0x454>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d038      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x3a8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a47      	ldr	r2, [pc, #284]	; (8003b14 <HAL_DMA_IRQHandler+0x458>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d030      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x3a2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a45      	ldr	r2, [pc, #276]	; (8003b18 <HAL_DMA_IRQHandler+0x45c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d028      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x39c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3d      	ldr	r2, [pc, #244]	; (8003b00 <HAL_DMA_IRQHandler+0x444>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d020      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x396>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a41      	ldr	r2, [pc, #260]	; (8003b1c <HAL_DMA_IRQHandler+0x460>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d019      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x392>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a40      	ldr	r2, [pc, #256]	; (8003b20 <HAL_DMA_IRQHandler+0x464>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d012      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x38e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a3e      	ldr	r2, [pc, #248]	; (8003b24 <HAL_DMA_IRQHandler+0x468>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x388>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3d      	ldr	r2, [pc, #244]	; (8003b28 <HAL_DMA_IRQHandler+0x46c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d102      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x382>
 8003a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3c:	e01b      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a42:	e018      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a48:	e015      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	e013      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e011      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a56:	e00e      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a5c:	e00b      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a62:	e008      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a68:	e005      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a6e:	e002      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a70:	2320      	movs	r3, #32
 8003a72:	e000      	b.n	8003a76 <HAL_DMA_IRQHandler+0x3ba>
 8003a74:	2302      	movs	r3, #2
 8003a76:	4a2e      	ldr	r2, [pc, #184]	; (8003b30 <HAL_DMA_IRQHandler+0x474>)
 8003a78:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d034      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a92:	e02f      	b.n	8003af4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2208      	movs	r2, #8
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d028      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x43a>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d023      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 020e 	bic.w	r2, r2, #14
 8003abc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8003acc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
    }
  }
  return;
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
}
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40020080 	.word	0x40020080
 8003b04:	40020008 	.word	0x40020008
 8003b08:	4002001c 	.word	0x4002001c
 8003b0c:	40020030 	.word	0x40020030
 8003b10:	40020044 	.word	0x40020044
 8003b14:	40020058 	.word	0x40020058
 8003b18:	4002006c 	.word	0x4002006c
 8003b1c:	40020408 	.word	0x40020408
 8003b20:	4002041c 	.word	0x4002041c
 8003b24:	40020430 	.word	0x40020430
 8003b28:	40020444 	.word	0x40020444
 8003b2c:	40020400 	.word	0x40020400
 8003b30:	40020000 	.word	0x40020000

08003b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b08b      	sub	sp, #44	; 0x2c
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b46:	e179      	b.n	8003e3c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b48:	2201      	movs	r2, #1
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	f040 8168 	bne.w	8003e36 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a96      	ldr	r2, [pc, #600]	; (8003dc4 <HAL_GPIO_Init+0x290>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d05e      	beq.n	8003c2e <HAL_GPIO_Init+0xfa>
 8003b70:	4a94      	ldr	r2, [pc, #592]	; (8003dc4 <HAL_GPIO_Init+0x290>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d875      	bhi.n	8003c62 <HAL_GPIO_Init+0x12e>
 8003b76:	4a94      	ldr	r2, [pc, #592]	; (8003dc8 <HAL_GPIO_Init+0x294>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d058      	beq.n	8003c2e <HAL_GPIO_Init+0xfa>
 8003b7c:	4a92      	ldr	r2, [pc, #584]	; (8003dc8 <HAL_GPIO_Init+0x294>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d86f      	bhi.n	8003c62 <HAL_GPIO_Init+0x12e>
 8003b82:	4a92      	ldr	r2, [pc, #584]	; (8003dcc <HAL_GPIO_Init+0x298>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d052      	beq.n	8003c2e <HAL_GPIO_Init+0xfa>
 8003b88:	4a90      	ldr	r2, [pc, #576]	; (8003dcc <HAL_GPIO_Init+0x298>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d869      	bhi.n	8003c62 <HAL_GPIO_Init+0x12e>
 8003b8e:	4a90      	ldr	r2, [pc, #576]	; (8003dd0 <HAL_GPIO_Init+0x29c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d04c      	beq.n	8003c2e <HAL_GPIO_Init+0xfa>
 8003b94:	4a8e      	ldr	r2, [pc, #568]	; (8003dd0 <HAL_GPIO_Init+0x29c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d863      	bhi.n	8003c62 <HAL_GPIO_Init+0x12e>
 8003b9a:	4a8e      	ldr	r2, [pc, #568]	; (8003dd4 <HAL_GPIO_Init+0x2a0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d046      	beq.n	8003c2e <HAL_GPIO_Init+0xfa>
 8003ba0:	4a8c      	ldr	r2, [pc, #560]	; (8003dd4 <HAL_GPIO_Init+0x2a0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d85d      	bhi.n	8003c62 <HAL_GPIO_Init+0x12e>
 8003ba6:	2b12      	cmp	r3, #18
 8003ba8:	d82a      	bhi.n	8003c00 <HAL_GPIO_Init+0xcc>
 8003baa:	2b12      	cmp	r3, #18
 8003bac:	d859      	bhi.n	8003c62 <HAL_GPIO_Init+0x12e>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <HAL_GPIO_Init+0x80>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003c2f 	.word	0x08003c2f
 8003bb8:	08003c09 	.word	0x08003c09
 8003bbc:	08003c1b 	.word	0x08003c1b
 8003bc0:	08003c5d 	.word	0x08003c5d
 8003bc4:	08003c63 	.word	0x08003c63
 8003bc8:	08003c63 	.word	0x08003c63
 8003bcc:	08003c63 	.word	0x08003c63
 8003bd0:	08003c63 	.word	0x08003c63
 8003bd4:	08003c63 	.word	0x08003c63
 8003bd8:	08003c63 	.word	0x08003c63
 8003bdc:	08003c63 	.word	0x08003c63
 8003be0:	08003c63 	.word	0x08003c63
 8003be4:	08003c63 	.word	0x08003c63
 8003be8:	08003c63 	.word	0x08003c63
 8003bec:	08003c63 	.word	0x08003c63
 8003bf0:	08003c63 	.word	0x08003c63
 8003bf4:	08003c63 	.word	0x08003c63
 8003bf8:	08003c11 	.word	0x08003c11
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	4a75      	ldr	r2, [pc, #468]	; (8003dd8 <HAL_GPIO_Init+0x2a4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c06:	e02c      	b.n	8003c62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	623b      	str	r3, [r7, #32]
          break;
 8003c0e:	e029      	b.n	8003c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	3304      	adds	r3, #4
 8003c16:	623b      	str	r3, [r7, #32]
          break;
 8003c18:	e024      	b.n	8003c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	623b      	str	r3, [r7, #32]
          break;
 8003c22:	e01f      	b.n	8003c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	623b      	str	r3, [r7, #32]
          break;
 8003c2c:	e01a      	b.n	8003c64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c36:	2304      	movs	r3, #4
 8003c38:	623b      	str	r3, [r7, #32]
          break;
 8003c3a:	e013      	b.n	8003c64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c44:	2308      	movs	r3, #8
 8003c46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	611a      	str	r2, [r3, #16]
          break;
 8003c4e:	e009      	b.n	8003c64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c50:	2308      	movs	r3, #8
 8003c52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	615a      	str	r2, [r3, #20]
          break;
 8003c5a:	e003      	b.n	8003c64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	623b      	str	r3, [r7, #32]
          break;
 8003c60:	e000      	b.n	8003c64 <HAL_GPIO_Init+0x130>
          break;
 8003c62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2bff      	cmp	r3, #255	; 0xff
 8003c68:	d801      	bhi.n	8003c6e <HAL_GPIO_Init+0x13a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	e001      	b.n	8003c72 <HAL_GPIO_Init+0x13e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2bff      	cmp	r3, #255	; 0xff
 8003c78:	d802      	bhi.n	8003c80 <HAL_GPIO_Init+0x14c>
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	e002      	b.n	8003c86 <HAL_GPIO_Init+0x152>
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	3b08      	subs	r3, #8
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	210f      	movs	r1, #15
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	6a39      	ldr	r1, [r7, #32]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80c1 	beq.w	8003e36 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cb4:	4b49      	ldr	r3, [pc, #292]	; (8003ddc <HAL_GPIO_Init+0x2a8>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4a48      	ldr	r2, [pc, #288]	; (8003ddc <HAL_GPIO_Init+0x2a8>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6193      	str	r3, [r2, #24]
 8003cc0:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <HAL_GPIO_Init+0x2a8>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ccc:	4a44      	ldr	r2, [pc, #272]	; (8003de0 <HAL_GPIO_Init+0x2ac>)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	220f      	movs	r2, #15
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3c      	ldr	r2, [pc, #240]	; (8003de4 <HAL_GPIO_Init+0x2b0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01f      	beq.n	8003d38 <HAL_GPIO_Init+0x204>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3b      	ldr	r2, [pc, #236]	; (8003de8 <HAL_GPIO_Init+0x2b4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d019      	beq.n	8003d34 <HAL_GPIO_Init+0x200>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a3a      	ldr	r2, [pc, #232]	; (8003dec <HAL_GPIO_Init+0x2b8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_GPIO_Init+0x1fc>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a39      	ldr	r2, [pc, #228]	; (8003df0 <HAL_GPIO_Init+0x2bc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00d      	beq.n	8003d2c <HAL_GPIO_Init+0x1f8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <HAL_GPIO_Init+0x2c0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <HAL_GPIO_Init+0x1f4>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a37      	ldr	r2, [pc, #220]	; (8003df8 <HAL_GPIO_Init+0x2c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_GPIO_Init+0x1f0>
 8003d20:	2305      	movs	r3, #5
 8003d22:	e00a      	b.n	8003d3a <HAL_GPIO_Init+0x206>
 8003d24:	2306      	movs	r3, #6
 8003d26:	e008      	b.n	8003d3a <HAL_GPIO_Init+0x206>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	e006      	b.n	8003d3a <HAL_GPIO_Init+0x206>
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e004      	b.n	8003d3a <HAL_GPIO_Init+0x206>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e002      	b.n	8003d3a <HAL_GPIO_Init+0x206>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_GPIO_Init+0x206>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	f002 0203 	and.w	r2, r2, #3
 8003d40:	0092      	lsls	r2, r2, #2
 8003d42:	4093      	lsls	r3, r2
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d4a:	4925      	ldr	r1, [pc, #148]	; (8003de0 <HAL_GPIO_Init+0x2ac>)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4924      	ldr	r1, [pc, #144]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	4920      	ldr	r1, [pc, #128]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	491a      	ldr	r1, [pc, #104]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60cb      	str	r3, [r1, #12]
 8003d98:	e006      	b.n	8003da8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	4916      	ldr	r1, [pc, #88]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d025      	beq.n	8003e00 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4910      	ldr	r1, [pc, #64]	; (8003dfc <HAL_GPIO_Init+0x2c8>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
 8003dc0:	e025      	b.n	8003e0e <HAL_GPIO_Init+0x2da>
 8003dc2:	bf00      	nop
 8003dc4:	10320000 	.word	0x10320000
 8003dc8:	10310000 	.word	0x10310000
 8003dcc:	10220000 	.word	0x10220000
 8003dd0:	10210000 	.word	0x10210000
 8003dd4:	10120000 	.word	0x10120000
 8003dd8:	10110000 	.word	0x10110000
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010800 	.word	0x40010800
 8003de8:	40010c00 	.word	0x40010c00
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	40011800 	.word	0x40011800
 8003df8:	40011c00 	.word	0x40011c00
 8003dfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	4913      	ldr	r1, [pc, #76]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	490e      	ldr	r1, [pc, #56]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
 8003e26:	e006      	b.n	8003e36 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	4909      	ldr	r1, [pc, #36]	; (8003e58 <HAL_GPIO_Init+0x324>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	3301      	adds	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f47f ae7e 	bne.w	8003b48 <HAL_GPIO_Init+0x14>
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	372c      	adds	r7, #44	; 0x2c
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e6c:	787b      	ldrb	r3, [r7, #1]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e78:	e003      	b.n	8003e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	041a      	lsls	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	43d9      	mvns	r1, r3
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	400b      	ands	r3, r1
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	611a      	str	r2, [r3, #16]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e12b      	b.n	800412a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd fba2 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f24:	f001 faba 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8003f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a81      	ldr	r2, [pc, #516]	; (8004134 <HAL_I2C_Init+0x274>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d807      	bhi.n	8003f44 <HAL_I2C_Init+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a80      	ldr	r2, [pc, #512]	; (8004138 <HAL_I2C_Init+0x278>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf94      	ite	ls
 8003f3c:	2301      	movls	r3, #1
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e006      	b.n	8003f52 <HAL_I2C_Init+0x92>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a7d      	ldr	r2, [pc, #500]	; (800413c <HAL_I2C_Init+0x27c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bf94      	ite	ls
 8003f4c:	2301      	movls	r3, #1
 8003f4e:	2300      	movhi	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0e7      	b.n	800412a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a78      	ldr	r2, [pc, #480]	; (8004140 <HAL_I2C_Init+0x280>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a6a      	ldr	r2, [pc, #424]	; (8004134 <HAL_I2C_Init+0x274>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d802      	bhi.n	8003f94 <HAL_I2C_Init+0xd4>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3301      	adds	r3, #1
 8003f92:	e009      	b.n	8003fa8 <HAL_I2C_Init+0xe8>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	4a69      	ldr	r2, [pc, #420]	; (8004144 <HAL_I2C_Init+0x284>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	099b      	lsrs	r3, r3, #6
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	495c      	ldr	r1, [pc, #368]	; (8004134 <HAL_I2C_Init+0x274>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d819      	bhi.n	8003ffc <HAL_I2C_Init+0x13c>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1e59      	subs	r1, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fdc:	400b      	ands	r3, r1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_I2C_Init+0x138>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1e59      	subs	r1, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff6:	e051      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	e04f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d111      	bne.n	8004028 <HAL_I2C_Init+0x168>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e012      	b.n	800404e <HAL_I2C_Init+0x18e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	0099      	lsls	r1, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Init+0x196>
 8004052:	2301      	movs	r3, #1
 8004054:	e022      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <HAL_I2C_Init+0x1bc>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e58      	subs	r0, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	440b      	add	r3, r1
 800406c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004070:	3301      	adds	r3, #1
 8004072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	e00f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e58      	subs	r0, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	0099      	lsls	r1, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	6809      	ldr	r1, [r1, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6911      	ldr	r1, [r2, #16]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	430b      	orrs	r3, r1
 80040de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	000186a0 	.word	0x000186a0
 8004138:	001e847f 	.word	0x001e847f
 800413c:	003d08ff 	.word	0x003d08ff
 8004140:	431bde83 	.word	0x431bde83
 8004144:	10624dd3 	.word	0x10624dd3

08004148 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	; 0x30
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
 8004158:	4613      	mov	r3, r2
 800415a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004160:	f7fe fd92 	bl	8002c88 <HAL_GetTick>
 8004164:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 824b 	bne.w	800460a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2319      	movs	r3, #25
 800417a:	2201      	movs	r2, #1
 800417c:	497f      	ldr	r1, [pc, #508]	; (800437c <HAL_I2C_Master_Receive+0x234>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fc4a 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
 800418c:	e23e      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_I2C_Master_Receive+0x54>
 8004198:	2302      	movs	r3, #2
 800419a:	e237      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d007      	beq.n	80041c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2222      	movs	r2, #34	; 0x22
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2210      	movs	r2, #16
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	893a      	ldrh	r2, [r7, #8]
 80041f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a5f      	ldr	r2, [pc, #380]	; (8004380 <HAL_I2C_Master_Receive+0x238>)
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004204:	8979      	ldrh	r1, [r7, #10]
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fb36 	bl	800487c <I2C_MasterRequestRead>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1f8      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d113      	bne.n	800424a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e1cc      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	2b01      	cmp	r3, #1
 8004250:	d11e      	bne.n	8004290 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004260:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004262:	b672      	cpsid	i
}
 8004264:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800428c:	b662      	cpsie	i
}
 800428e:	e035      	b.n	80042fc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	2b02      	cmp	r3, #2
 8004296:	d11e      	bne.n	80042d6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042a8:	b672      	cpsid	i
}
 80042aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042d2:	b662      	cpsie	i
}
 80042d4:	e012      	b.n	80042fc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80042fc:	e172      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	2b03      	cmp	r3, #3
 8004304:	f200 811f 	bhi.w	8004546 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	2b01      	cmp	r3, #1
 800430e:	d123      	bne.n	8004358 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fc99 	bl	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e173      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004356:	e145      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	2b02      	cmp	r3, #2
 800435e:	d152      	bne.n	8004406 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	2200      	movs	r2, #0
 8004368:	4906      	ldr	r1, [pc, #24]	; (8004384 <HAL_I2C_Master_Receive+0x23c>)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fb54 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e148      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
 800437a:	bf00      	nop
 800437c:	00100002 	.word	0x00100002
 8004380:	ffff0000 	.word	0xffff0000
 8004384:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004388:	b672      	cpsid	i
}
 800438a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043ce:	b662      	cpsie	i
}
 80043d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004404:	e0ee      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2200      	movs	r2, #0
 800440e:	4981      	ldr	r1, [pc, #516]	; (8004614 <HAL_I2C_Master_Receive+0x4cc>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fb01 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0f5      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004430:	b672      	cpsid	i
}
 8004432:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_I2C_Master_Receive+0x4d0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	4a6b      	ldr	r2, [pc, #428]	; (800461c <HAL_I2C_Master_Receive+0x4d4>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0a1a      	lsrs	r2, r3, #8
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00da      	lsls	r2, r3, #3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	3b01      	subs	r3, #1
 8004484:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d118      	bne.n	80044be <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80044ae:	b662      	cpsie	i
}
 80044b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0a6      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d1d9      	bne.n	8004480 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800450e:	b662      	cpsie	i
}
 8004510:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004544:	e04e      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fb7e 	bl	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e058      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d124      	bne.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d107      	bne.n	80045b2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f ae88 	bne.w	80042fe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3728      	adds	r7, #40	; 0x28
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	00010004 	.word	0x00010004
 8004618:	2000001c 	.word	0x2000001c
 800461c:	14f8b589 	.word	0x14f8b589

08004620 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	460b      	mov	r3, r1
 800462e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004630:	f7fe fb2a 	bl	8002c88 <HAL_GetTick>
 8004634:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b20      	cmp	r3, #32
 8004644:	f040 8111 	bne.w	800486a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2319      	movs	r3, #25
 800464e:	2201      	movs	r2, #1
 8004650:	4988      	ldr	r1, [pc, #544]	; (8004874 <HAL_I2C_IsDeviceReady+0x254>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f9e0 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	e104      	b.n	800486c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_I2C_IsDeviceReady+0x50>
 800466c:	2302      	movs	r3, #2
 800466e:	e0fd      	b.n	800486c <HAL_I2C_IsDeviceReady+0x24c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	d007      	beq.n	8004696 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2224      	movs	r2, #36	; 0x24
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a70      	ldr	r2, [pc, #448]	; (8004878 <HAL_I2C_IsDeviceReady+0x258>)
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f99e 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f0:	d103      	bne.n	80046fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0b6      	b.n	800486c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046fe:	897b      	ldrh	r3, [r7, #10]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800470c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800470e:	f7fe fabb 	bl	8002c88 <HAL_GetTick>
 8004712:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004742:	e025      	b.n	8004790 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004744:	f7fe faa0 	bl	8002c88 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <HAL_I2C_IsDeviceReady+0x13a>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	22a0      	movs	r2, #160	; 0xa0
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b02      	cmp	r3, #2
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2ba0      	cmp	r3, #160	; 0xa0
 800479a:	d005      	beq.n	80047a8 <HAL_I2C_IsDeviceReady+0x188>
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <HAL_I2C_IsDeviceReady+0x188>
 80047a2:	7dbb      	ldrb	r3, [r7, #22]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0cd      	beq.n	8004744 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d129      	bne.n	8004812 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2319      	movs	r3, #25
 80047ea:	2201      	movs	r2, #1
 80047ec:	4921      	ldr	r1, [pc, #132]	; (8004874 <HAL_I2C_IsDeviceReady+0x254>)
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f912 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e036      	b.n	800486c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e02c      	b.n	800486c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800482a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	2319      	movs	r3, #25
 8004832:	2201      	movs	r2, #1
 8004834:	490f      	ldr	r1, [pc, #60]	; (8004874 <HAL_I2C_IsDeviceReady+0x254>)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8ee 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e012      	b.n	800486c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3301      	adds	r3, #1
 800484a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	f4ff af32 	bcc.w	80046ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	00100002 	.word	0x00100002
 8004878:	ffff0000 	.word	0xffff0000

0800487c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	460b      	mov	r3, r1
 800488a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d006      	beq.n	80048b6 <I2C_MasterRequestRead+0x3a>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d003      	beq.n	80048b6 <I2C_MasterRequestRead+0x3a>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b4:	d108      	bne.n	80048c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e00b      	b.n	80048e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	2b11      	cmp	r3, #17
 80048ce:	d107      	bne.n	80048e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f893 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00d      	beq.n	8004914 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004906:	d103      	bne.n	8004910 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e079      	b.n	8004a08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491c:	d108      	bne.n	8004930 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	e05f      	b.n	80049f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004930:	897b      	ldrh	r3, [r7, #10]
 8004932:	11db      	asrs	r3, r3, #7
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0306 	and.w	r3, r3, #6
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f063 030f 	orn	r3, r3, #15
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4930      	ldr	r1, [pc, #192]	; (8004a10 <I2C_MasterRequestRead+0x194>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f8dc 	bl	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e054      	b.n	8004a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4929      	ldr	r1, [pc, #164]	; (8004a14 <I2C_MasterRequestRead+0x198>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8cc 	bl	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e044      	b.n	8004a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f831 	bl	8004a18 <I2C_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00d      	beq.n	80049d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ca:	d103      	bne.n	80049d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e017      	b.n	8004a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049d8:	897b      	ldrh	r3, [r7, #10]
 80049da:	11db      	asrs	r3, r3, #7
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f063 030e 	orn	r3, r3, #14
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4907      	ldr	r1, [pc, #28]	; (8004a14 <I2C_MasterRequestRead+0x198>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f888 	bl	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	00010008 	.word	0x00010008
 8004a14:	00010002 	.word	0x00010002

08004a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a28:	e048      	b.n	8004abc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d044      	beq.n	8004abc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a32:	f7fe f929 	bl	8002c88 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d302      	bcc.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d139      	bne.n	8004abc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10d      	bne.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	e00c      	b.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	43da      	mvns	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d116      	bne.n	8004abc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f043 0220 	orr.w	r2, r3, #32
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e023      	b.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	0c1b      	lsrs	r3, r3, #16
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d10d      	bne.n	8004ae2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	43da      	mvns	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	e00c      	b.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	43da      	mvns	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d093      	beq.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b1a:	e071      	b.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d123      	bne.n	8004b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	f043 0204 	orr.w	r2, r3, #4
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e067      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d041      	beq.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7fe f884 	bl	8002c88 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d136      	bne.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	0c1b      	lsrs	r3, r3, #16
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10c      	bne.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	bf14      	ite	ne
 8004bae:	2301      	movne	r3, #1
 8004bb0:	2300      	moveq	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	e00b      	b.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f043 0220 	orr.w	r2, r3, #32
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e021      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10c      	bne.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	43da      	mvns	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	e00b      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf14      	ite	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	2300      	moveq	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f47f af6d 	bne.w	8004b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c58:	e049      	b.n	8004cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d119      	bne.n	8004c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0210 	mvn.w	r2, #16
 8004c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e030      	b.n	8004cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9c:	f7fd fff4 	bl	8002c88 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11d      	bne.n	8004cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d016      	beq.n	8004cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e007      	b.n	8004cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d1ae      	bne.n	8004c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e272      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8087 	beq.w	8004e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d28:	4b92      	ldr	r3, [pc, #584]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d34:	4b8f      	ldr	r3, [pc, #572]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d112      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
 8004d40:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d10b      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4e:	4b89      	ldr	r3, [pc, #548]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x12c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d168      	bne.n	8004e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e24c      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCC_OscConfig+0x76>
 8004d70:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e02e      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b78      	ldr	r3, [pc, #480]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a77      	ldr	r2, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e01d      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xbc>
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a71      	ldr	r2, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004dc4:	4b6b      	ldr	r3, [pc, #428]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6a      	ldr	r2, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a67      	ldr	r2, [pc, #412]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fd ff50 	bl	8002c88 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fd ff4c 	bl	8002c88 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e200      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b5d      	ldr	r3, [pc, #372]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0xe4>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fd ff3c 	bl	8002c88 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7fd ff38 	bl	8002c88 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1ec      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x10c>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d063      	beq.n	8004f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e42:	4b4c      	ldr	r3, [pc, #304]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d11c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
 8004e5a:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e1c0      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4939      	ldr	r1, [pc, #228]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e92:	e03a      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7fd fef1 	bl	8002c88 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fd feed 	bl	8002c88 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e1a1      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4927      	ldr	r1, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fd fed0 	bl	8002c88 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eec:	f7fd fecc 	bl	8002c88 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e180      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03a      	beq.n	8004f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d019      	beq.n	8004f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7fd feb0 	bl	8002c88 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fd feac 	bl	8002c88 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e160      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 face 	bl	80054ec <RCC_Delay>
 8004f50:	e01c      	b.n	8004f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f58:	f7fd fe96 	bl	8002c88 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fd fe92 	bl	8002c88 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d908      	bls.n	8004f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e146      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	42420000 	.word	0x42420000
 8004f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f80:	4b92      	ldr	r3, [pc, #584]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e9      	bne.n	8004f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a6 	beq.w	80050e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9e:	4b8b      	ldr	r3, [pc, #556]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10d      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	4b88      	ldr	r3, [pc, #544]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4a87      	ldr	r2, [pc, #540]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	61d3      	str	r3, [r2, #28]
 8004fb6:	4b85      	ldr	r3, [pc, #532]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b82      	ldr	r3, [pc, #520]	; (80051d0 <HAL_RCC_OscConfig+0x4c8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d118      	bne.n	8005004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd2:	4b7f      	ldr	r3, [pc, #508]	; (80051d0 <HAL_RCC_OscConfig+0x4c8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a7e      	ldr	r2, [pc, #504]	; (80051d0 <HAL_RCC_OscConfig+0x4c8>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fde:	f7fd fe53 	bl	8002c88 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fd fe4f 	bl	8002c88 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	; 0x64
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e103      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	4b75      	ldr	r3, [pc, #468]	; (80051d0 <HAL_RCC_OscConfig+0x4c8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x312>
 800500c:	4b6f      	ldr	r3, [pc, #444]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a6e      	ldr	r2, [pc, #440]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6213      	str	r3, [r2, #32]
 8005018:	e02d      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x334>
 8005022:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a69      	ldr	r2, [pc, #420]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6213      	str	r3, [r2, #32]
 800502e:	4b67      	ldr	r3, [pc, #412]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4a66      	ldr	r2, [pc, #408]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	6213      	str	r3, [r2, #32]
 800503a:	e01c      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b05      	cmp	r3, #5
 8005042:	d10c      	bne.n	800505e <HAL_RCC_OscConfig+0x356>
 8005044:	4b61      	ldr	r3, [pc, #388]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	4a60      	ldr	r2, [pc, #384]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	6213      	str	r3, [r2, #32]
 8005050:	4b5e      	ldr	r3, [pc, #376]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a5d      	ldr	r2, [pc, #372]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e00b      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800505e:	4b5b      	ldr	r3, [pc, #364]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a5a      	ldr	r2, [pc, #360]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6213      	str	r3, [r2, #32]
 800506a:	4b58      	ldr	r3, [pc, #352]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a57      	ldr	r2, [pc, #348]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507e:	f7fd fe03 	bl	8002c88 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fd fdff 	bl	8002c88 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e0b1      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	4b4b      	ldr	r3, [pc, #300]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ee      	beq.n	8005086 <HAL_RCC_OscConfig+0x37e>
 80050a8:	e014      	b.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fd fded 	bl	8002c88 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fd fde9 	bl	8002c88 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e09b      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c8:	4b40      	ldr	r3, [pc, #256]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ee      	bne.n	80050b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b3c      	ldr	r3, [pc, #240]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	4a3b      	ldr	r2, [pc, #236]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8087 	beq.w	80051fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f0:	4b36      	ldr	r3, [pc, #216]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d061      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d146      	bne.n	8005192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005104:	4b33      	ldr	r3, [pc, #204]	; (80051d4 <HAL_RCC_OscConfig+0x4cc>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7fd fdbd 	bl	8002c88 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fd fdb9 	bl	8002c88 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e06d      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005124:	4b29      	ldr	r3, [pc, #164]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f0      	bne.n	8005112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d108      	bne.n	800514c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4921      	ldr	r1, [pc, #132]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514c:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a19      	ldr	r1, [r3, #32]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	430b      	orrs	r3, r1
 800515e:	491b      	ldr	r1, [pc, #108]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <HAL_RCC_OscConfig+0x4cc>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fd fd8d 	bl	8002c88 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7fd fd89 	bl	8002c88 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e03d      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x46a>
 8005190:	e035      	b.n	80051fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <HAL_RCC_OscConfig+0x4cc>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fd fd76 	bl	8002c88 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fd fd72 	bl	8002c88 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e026      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_OscConfig+0x4c4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x498>
 80051be:	e01e      	b.n	80051fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e019      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40007000 	.word	0x40007000
 80051d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_OscConfig+0x500>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d001      	beq.n	80051fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000

0800520c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0d0      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005220:	4b6a      	ldr	r3, [pc, #424]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d910      	bls.n	8005250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522e:	4b67      	ldr	r3, [pc, #412]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 0207 	bic.w	r2, r3, #7
 8005236:	4965      	ldr	r1, [pc, #404]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523e:	4b63      	ldr	r3, [pc, #396]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0b8      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d020      	beq.n	800529e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005268:	4b59      	ldr	r3, [pc, #356]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a58      	ldr	r2, [pc, #352]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005280:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a52      	ldr	r2, [pc, #328]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005286:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800528a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528c:	4b50      	ldr	r3, [pc, #320]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	494d      	ldr	r1, [pc, #308]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d040      	beq.n	800532c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b2:	4b47      	ldr	r3, [pc, #284]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d115      	bne.n	80052ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e07f      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ca:	4b41      	ldr	r3, [pc, #260]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e073      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052da:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e06b      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f023 0203 	bic.w	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4936      	ldr	r1, [pc, #216]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052fc:	f7fd fcc4 	bl	8002c88 <HAL_GetTick>
 8005300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	e00a      	b.n	800531a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005304:	f7fd fcc0 	bl	8002c88 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e053      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 020c 	and.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	429a      	cmp	r2, r3
 800532a:	d1eb      	bne.n	8005304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b27      	ldr	r3, [pc, #156]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d210      	bcs.n	800535c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 0207 	bic.w	r2, r3, #7
 8005342:	4922      	ldr	r1, [pc, #136]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b20      	ldr	r3, [pc, #128]	; (80053cc <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e032      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005368:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4916      	ldr	r1, [pc, #88]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	490e      	ldr	r1, [pc, #56]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800539a:	f000 f821 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 800539e:	4602      	mov	r2, r0
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	490a      	ldr	r1, [pc, #40]	; (80053d4 <HAL_RCC_ClockConfig+0x1c8>)
 80053ac:	5ccb      	ldrb	r3, [r1, r3]
 80053ae:	fa22 f303 	lsr.w	r3, r2, r3
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <HAL_RCC_ClockConfig+0x1cc>)
 80053b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCC_ClockConfig+0x1d0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fd fc22 	bl	8002c04 <HAL_InitTick>

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40021000 	.word	0x40021000
 80053d4:	08007e88 	.word	0x08007e88
 80053d8:	2000001c 	.word	0x2000001c
 80053dc:	20000020 	.word	0x20000020

080053e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	2300      	movs	r3, #0
 80053f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053fa:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <HAL_RCC_GetSysClockFreq+0x94>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b04      	cmp	r3, #4
 8005408:	d002      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x30>
 800540a:	2b08      	cmp	r3, #8
 800540c:	d003      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0x36>
 800540e:	e027      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCC_GetSysClockFreq+0x98>)
 8005412:	613b      	str	r3, [r7, #16]
      break;
 8005414:	e027      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	0c9b      	lsrs	r3, r3, #18
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005420:	5cd3      	ldrb	r3, [r2, r3]
 8005422:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <HAL_RCC_GetSysClockFreq+0x94>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	0c5b      	lsrs	r3, r3, #17
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	4a11      	ldr	r2, [pc, #68]	; (8005480 <HAL_RCC_GetSysClockFreq+0xa0>)
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <HAL_RCC_GetSysClockFreq+0x98>)
 8005442:	fb03 f202 	mul.w	r2, r3, r2
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	fbb2 f3f3 	udiv	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e004      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005454:	fb02 f303 	mul.w	r3, r2, r3
 8005458:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	613b      	str	r3, [r7, #16]
      break;
 800545e:	e002      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetSysClockFreq+0x98>)
 8005462:	613b      	str	r3, [r7, #16]
      break;
 8005464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005466:	693b      	ldr	r3, [r7, #16]
}
 8005468:	4618      	mov	r0, r3
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000
 8005478:	007a1200 	.word	0x007a1200
 800547c:	08007ea0 	.word	0x08007ea0
 8005480:	08007eb0 	.word	0x08007eb0
 8005484:	003d0900 	.word	0x003d0900

08005488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800548c:	4b02      	ldr	r3, [pc, #8]	; (8005498 <HAL_RCC_GetHCLKFreq+0x10>)
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	2000001c 	.word	0x2000001c

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054a0:	f7ff fff2 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4903      	ldr	r1, [pc, #12]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021000 	.word	0x40021000
 80054c0:	08007e98 	.word	0x08007e98

080054c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054c8:	f7ff ffde 	bl	8005488 <HAL_RCC_GetHCLKFreq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	0adb      	lsrs	r3, r3, #11
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	4903      	ldr	r1, [pc, #12]	; (80054e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054da:	5ccb      	ldrb	r3, [r1, r3]
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000
 80054e8:	08007e98 	.word	0x08007e98

080054ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <RCC_Delay+0x34>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <RCC_Delay+0x38>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	0a5b      	lsrs	r3, r3, #9
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005508:	bf00      	nop
  }
  while (Delay --);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	60fa      	str	r2, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f9      	bne.n	8005508 <RCC_Delay+0x1c>
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr
 8005520:	2000001c 	.word	0x2000001c
 8005524:	10624dd3 	.word	0x10624dd3

08005528 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d07d      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005544:	2300      	movs	r3, #0
 8005546:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005548:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005554:	4b4c      	ldr	r3, [pc, #304]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4a4b      	ldr	r2, [pc, #300]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555e:	61d3      	str	r3, [r2, #28]
 8005560:	4b49      	ldr	r3, [pc, #292]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	4b46      	ldr	r3, [pc, #280]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d118      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557c:	4b43      	ldr	r3, [pc, #268]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a42      	ldr	r2, [pc, #264]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005588:	f7fd fb7e 	bl	8002c88 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558e:	e008      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005590:	f7fd fb7a 	bl	8002c88 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e06d      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a2:	4b3a      	ldr	r3, [pc, #232]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055ae:	4b36      	ldr	r3, [pc, #216]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02e      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d027      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055cc:	4b2e      	ldr	r3, [pc, #184]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055d6:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055d8:	2201      	movs	r2, #1
 80055da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055dc:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055e2:	4a29      	ldr	r2, [pc, #164]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d014      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f2:	f7fd fb49 	bl	8002c88 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f8:	e00a      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fa:	f7fd fb45 	bl	8002c88 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f241 3288 	movw	r2, #5000	; 0x1388
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e036      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005610:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ee      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4917      	ldr	r1, [pc, #92]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562a:	4313      	orrs	r3, r2
 800562c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800564c:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	490b      	ldr	r1, [pc, #44]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	4904      	ldr	r1, [pc, #16]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	40007000 	.word	0x40007000
 8005690:	42420440 	.word	0x42420440

08005694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e076      	b.n	8005794 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d009      	beq.n	80056cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	e005      	b.n	80056cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc fc02 	bl	8001ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	ea42 0103 	orr.w	r1, r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	0c1a      	lsrs	r2, r3, #16
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f002 0204 	and.w	r2, r2, #4
 8005772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69da      	ldr	r2, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e041      	b.n	8005832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fc ff58 	bl	8002678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f000 fe82 	bl	80064e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d001      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e044      	b.n	80058de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1d      	ldr	r2, [pc, #116]	; (80058e8 <HAL_TIM_Base_Start_IT+0xac>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <HAL_TIM_Base_Start_IT+0xb0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d00e      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x6c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x6c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <HAL_TIM_Base_Start_IT+0xbc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d111      	bne.n	80058cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d010      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	e007      	b.n	80058dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800
 80058f8:	40000c00 	.word	0x40000c00

080058fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e041      	b.n	8005992 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f839 	bl	800599a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fdd2 	bl	80064e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start+0x24>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e022      	b.n	8005a16 <HAL_TIM_PWM_Start+0x6a>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d109      	bne.n	80059ea <HAL_TIM_PWM_Start+0x3e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	bf14      	ite	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	2300      	moveq	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	e015      	b.n	8005a16 <HAL_TIM_PWM_Start+0x6a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d109      	bne.n	8005a04 <HAL_TIM_PWM_Start+0x58>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	bf14      	ite	ne
 80059fc:	2301      	movne	r3, #1
 80059fe:	2300      	moveq	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e008      	b.n	8005a16 <HAL_TIM_PWM_Start+0x6a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e072      	b.n	8005b04 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x82>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	e013      	b.n	8005a56 <HAL_TIM_PWM_Start+0xaa>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d104      	bne.n	8005a3e <HAL_TIM_PWM_Start+0x92>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3c:	e00b      	b.n	8005a56 <HAL_TIM_PWM_Start+0xaa>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_PWM_Start+0xa2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	e003      	b.n	8005a56 <HAL_TIM_PWM_Start+0xaa>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fffc 	bl	8006a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <HAL_TIM_PWM_Start+0x160>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIM_PWM_Start+0xcc>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <HAL_TIM_PWM_Start+0x164>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_PWM_Start+0xd0>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <HAL_TIM_PWM_Start+0xd2>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_TIM_PWM_Start+0x160>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_TIM_PWM_Start+0x122>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <HAL_TIM_PWM_Start+0x164>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_TIM_PWM_Start+0x122>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aae:	d00e      	beq.n	8005ace <HAL_TIM_PWM_Start+0x122>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <HAL_TIM_PWM_Start+0x168>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_TIM_PWM_Start+0x122>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <HAL_TIM_PWM_Start+0x16c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIM_PWM_Start+0x122>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <HAL_TIM_PWM_Start+0x170>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b06      	cmp	r3, #6
 8005ade:	d010      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af0:	e007      	b.n	8005b02 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00

08005b20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 ff92 	bl	8006a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2e      	ldr	r2, [pc, #184]	; (8005bf8 <HAL_TIM_PWM_Stop+0xd8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <HAL_TIM_PWM_Stop+0x2c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <HAL_TIM_PWM_Stop+0xdc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIM_PWM_Stop+0x30>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <HAL_TIM_PWM_Stop+0x32>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d017      	beq.n	8005b86 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <HAL_TIM_PWM_Stop+0x66>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	f240 4344 	movw	r3, #1092	; 0x444
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_TIM_PWM_Stop+0x66>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10f      	bne.n	8005bb6 <HAL_TIM_PWM_Stop+0x96>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	f240 4344 	movw	r3, #1092	; 0x444
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <HAL_TIM_PWM_Stop+0x96>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <HAL_TIM_PWM_Stop+0xa6>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc4:	e013      	b.n	8005bee <HAL_TIM_PWM_Stop+0xce>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d104      	bne.n	8005bd6 <HAL_TIM_PWM_Stop+0xb6>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd4:	e00b      	b.n	8005bee <HAL_TIM_PWM_Stop+0xce>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d104      	bne.n	8005be6 <HAL_TIM_PWM_Stop+0xc6>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be4:	e003      	b.n	8005bee <HAL_TIM_PWM_Stop+0xce>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40013400 	.word	0x40013400

08005c00 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_TIM_PWM_Start_IT+0x28>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e022      	b.n	8005c6e <HAL_TIM_PWM_Start_IT+0x6e>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d109      	bne.n	8005c42 <HAL_TIM_PWM_Start_IT+0x42>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e015      	b.n	8005c6e <HAL_TIM_PWM_Start_IT+0x6e>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d109      	bne.n	8005c5c <HAL_TIM_PWM_Start_IT+0x5c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e008      	b.n	8005c6e <HAL_TIM_PWM_Start_IT+0x6e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0bd      	b.n	8005df2 <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start_IT+0x86>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c84:	e013      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0xae>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start_IT+0x96>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c94:	e00b      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0xae>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start_IT+0xa6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	e003      	b.n	8005cae <HAL_TIM_PWM_Start_IT+0xae>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b0c      	cmp	r3, #12
 8005cb2:	d841      	bhi.n	8005d38 <HAL_TIM_PWM_Start_IT+0x138>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <HAL_TIM_PWM_Start_IT+0xbc>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005d39 	.word	0x08005d39
 8005cc4:	08005d39 	.word	0x08005d39
 8005cc8:	08005d39 	.word	0x08005d39
 8005ccc:	08005d03 	.word	0x08005d03
 8005cd0:	08005d39 	.word	0x08005d39
 8005cd4:	08005d39 	.word	0x08005d39
 8005cd8:	08005d39 	.word	0x08005d39
 8005cdc:	08005d15 	.word	0x08005d15
 8005ce0:	08005d39 	.word	0x08005d39
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005d39 	.word	0x08005d39
 8005cec:	08005d27 	.word	0x08005d27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0202 	orr.w	r2, r2, #2
 8005cfe:	60da      	str	r2, [r3, #12]
      break;
 8005d00:	e01d      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0204 	orr.w	r2, r2, #4
 8005d10:	60da      	str	r2, [r3, #12]
      break;
 8005d12:	e014      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0208 	orr.w	r2, r2, #8
 8005d22:	60da      	str	r2, [r3, #12]
      break;
 8005d24:	e00b      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0210 	orr.w	r2, r2, #16
 8005d34:	60da      	str	r2, [r3, #12]
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d155      	bne.n	8005df0 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fe85 	bl	8006a5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a29      	ldr	r2, [pc, #164]	; (8005dfc <HAL_TIM_PWM_Start_IT+0x1fc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIM_PWM_Start_IT+0x166>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a27      	ldr	r2, [pc, #156]	; (8005e00 <HAL_TIM_PWM_Start_IT+0x200>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_PWM_Start_IT+0x16a>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <HAL_TIM_PWM_Start_IT+0x16c>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <HAL_TIM_PWM_Start_IT+0x1fc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d018      	beq.n	8005dbc <HAL_TIM_PWM_Start_IT+0x1bc>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <HAL_TIM_PWM_Start_IT+0x200>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d013      	beq.n	8005dbc <HAL_TIM_PWM_Start_IT+0x1bc>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d00e      	beq.n	8005dbc <HAL_TIM_PWM_Start_IT+0x1bc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIM_PWM_Start_IT+0x204>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_TIM_PWM_Start_IT+0x1bc>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <HAL_TIM_PWM_Start_IT+0x208>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_PWM_Start_IT+0x1bc>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <HAL_TIM_PWM_Start_IT+0x20c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d111      	bne.n	8005de0 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	d010      	beq.n	8005df0 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dde:	e007      	b.n	8005df0 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00

08005e10 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b0c      	cmp	r3, #12
 8005e22:	d841      	bhi.n	8005ea8 <HAL_TIM_PWM_Stop_IT+0x98>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e61 	.word	0x08005e61
 8005e30:	08005ea9 	.word	0x08005ea9
 8005e34:	08005ea9 	.word	0x08005ea9
 8005e38:	08005ea9 	.word	0x08005ea9
 8005e3c:	08005e73 	.word	0x08005e73
 8005e40:	08005ea9 	.word	0x08005ea9
 8005e44:	08005ea9 	.word	0x08005ea9
 8005e48:	08005ea9 	.word	0x08005ea9
 8005e4c:	08005e85 	.word	0x08005e85
 8005e50:	08005ea9 	.word	0x08005ea9
 8005e54:	08005ea9 	.word	0x08005ea9
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	08005e97 	.word	0x08005e97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0202 	bic.w	r2, r2, #2
 8005e6e:	60da      	str	r2, [r3, #12]
      break;
 8005e70:	e01d      	b.n	8005eae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0204 	bic.w	r2, r2, #4
 8005e80:	60da      	str	r2, [r3, #12]
      break;
 8005e82:	e014      	b.n	8005eae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0208 	bic.w	r2, r2, #8
 8005e92:	60da      	str	r2, [r3, #12]
      break;
 8005e94:	e00b      	b.n	8005eae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0210 	bic.w	r2, r2, #16
 8005ea4:	60da      	str	r2, [r3, #12]
      break;
 8005ea6:	e002      	b.n	8005eae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005eac:	bf00      	nop
  }

  if (status == HAL_OK)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d161      	bne.n	8005f78 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fdcd 	bl	8006a5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2f      	ldr	r2, [pc, #188]	; (8005f84 <HAL_TIM_PWM_Stop_IT+0x174>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIM_PWM_Stop_IT+0xc6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a2d      	ldr	r2, [pc, #180]	; (8005f88 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_PWM_Stop_IT+0xca>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_PWM_Stop_IT+0xcc>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d017      	beq.n	8005f10 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10f      	bne.n	8005f10 <HAL_TIM_PWM_Stop_IT+0x100>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6a1a      	ldr	r2, [r3, #32]
 8005ef6:	f240 4344 	movw	r3, #1092	; 0x444
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <HAL_TIM_PWM_Stop_IT+0x100>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6a1a      	ldr	r2, [r3, #32]
 8005f16:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10f      	bne.n	8005f40 <HAL_TIM_PWM_Stop_IT+0x130>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a1a      	ldr	r2, [r3, #32]
 8005f26:	f240 4344 	movw	r3, #1092	; 0x444
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <HAL_TIM_PWM_Stop_IT+0x130>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <HAL_TIM_PWM_Stop_IT+0x140>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4e:	e013      	b.n	8005f78 <HAL_TIM_PWM_Stop_IT+0x168>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d104      	bne.n	8005f60 <HAL_TIM_PWM_Stop_IT+0x150>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f5e:	e00b      	b.n	8005f78 <HAL_TIM_PWM_Stop_IT+0x168>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d104      	bne.n	8005f70 <HAL_TIM_PWM_Stop_IT+0x160>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f6e:	e003      	b.n	8005f78 <HAL_TIM_PWM_Stop_IT+0x168>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400

08005f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0202 	mvn.w	r2, #2
 8005fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa76 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa69 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fc f805 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d122      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d11b      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0204 	mvn.w	r2, #4
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa4c 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa3f 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fb ffdb 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b08      	cmp	r3, #8
 8006048:	d122      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0208 	mvn.w	r2, #8
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2204      	movs	r2, #4
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa22 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 800607c:	e005      	b.n	800608a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa15 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fb ffb1 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d122      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d11b      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0210 	mvn.w	r2, #16
 80060b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2208      	movs	r2, #8
 80060ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9f8 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9eb 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fb ff87 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10e      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0201 	mvn.w	r2, #1
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb fbaf 	bl	800186e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d10e      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d107      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fd7a 	bl	8006c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d10e      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d107      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9b5 	bl	80064d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d10e      	bne.n	8006194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b20      	cmp	r3, #32
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0220 	mvn.w	r2, #32
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fd45 	bl	8006c1e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0ae      	b.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	f200 809f 	bhi.w	8006308 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061ca:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	08006205 	.word	0x08006205
 80061d4:	08006309 	.word	0x08006309
 80061d8:	08006309 	.word	0x08006309
 80061dc:	08006309 	.word	0x08006309
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006309 	.word	0x08006309
 80061e8:	08006309 	.word	0x08006309
 80061ec:	08006309 	.word	0x08006309
 80061f0:	08006287 	.word	0x08006287
 80061f4:	08006309 	.word	0x08006309
 80061f8:	08006309 	.word	0x08006309
 80061fc:	08006309 	.word	0x08006309
 8006200:	080062c7 	.word	0x080062c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f9e4 	bl	80065d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0208 	orr.w	r2, r2, #8
 800621e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	619a      	str	r2, [r3, #24]
      break;
 8006242:	e064      	b.n	800630e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fa34 	bl	80066b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	021a      	lsls	r2, r3, #8
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	619a      	str	r2, [r3, #24]
      break;
 8006284:	e043      	b.n	800630e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fa87 	bl	80067a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0208 	orr.w	r2, r2, #8
 80062a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0204 	bic.w	r2, r2, #4
 80062b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69d9      	ldr	r1, [r3, #28]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	61da      	str	r2, [r3, #28]
      break;
 80062c4:	e023      	b.n	800630e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fadb 	bl	8006888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69d9      	ldr	r1, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	021a      	lsls	r2, r3, #8
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	61da      	str	r2, [r3, #28]
      break;
 8006306:	e002      	b.n	800630e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
      break;
 800630c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_TIM_ConfigClockSource+0x1c>
 8006338:	2302      	movs	r3, #2
 800633a:	e0b4      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x186>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800635a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006374:	d03e      	beq.n	80063f4 <HAL_TIM_ConfigClockSource+0xd4>
 8006376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637a:	f200 8087 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x16c>
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006382:	f000 8086 	beq.w	8006492 <HAL_TIM_ConfigClockSource+0x172>
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638a:	d87f      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b70      	cmp	r3, #112	; 0x70
 800638e:	d01a      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0xa6>
 8006390:	2b70      	cmp	r3, #112	; 0x70
 8006392:	d87b      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
 8006394:	2b60      	cmp	r3, #96	; 0x60
 8006396:	d050      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x11a>
 8006398:	2b60      	cmp	r3, #96	; 0x60
 800639a:	d877      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
 800639c:	2b50      	cmp	r3, #80	; 0x50
 800639e:	d03c      	beq.n	800641a <HAL_TIM_ConfigClockSource+0xfa>
 80063a0:	2b50      	cmp	r3, #80	; 0x50
 80063a2:	d873      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	d058      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x13a>
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	d86f      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d064      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x15a>
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d86b      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d060      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x15a>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d867      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05c      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x15a>
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d05a      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	e062      	b.n	800648c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063d6:	f000 fb22 	bl	8006a1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	609a      	str	r2, [r3, #8]
      break;
 80063f2:	e04f      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006404:	f000 fb0b 	bl	8006a1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006416:	609a      	str	r2, [r3, #8]
      break;
 8006418:	e03c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006426:	461a      	mov	r2, r3
 8006428:	f000 fa82 	bl	8006930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2150      	movs	r1, #80	; 0x50
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fad9 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006438:	e02c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006446:	461a      	mov	r2, r3
 8006448:	f000 faa0 	bl	800698c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2160      	movs	r1, #96	; 0x60
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fac9 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006458:	e01c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006466:	461a      	mov	r2, r3
 8006468:	f000 fa62 	bl	8006930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2140      	movs	r1, #64	; 0x40
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fab9 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006478:	e00c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f000 fab0 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 800648a:	e003      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
      break;
 8006490:	e000      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr

080064d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a33      	ldr	r2, [pc, #204]	; (80065c4 <TIM_Base_SetConfig+0xe0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <TIM_Base_SetConfig+0xe4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a2f      	ldr	r2, [pc, #188]	; (80065cc <TIM_Base_SetConfig+0xe8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <TIM_Base_SetConfig+0xec>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <TIM_Base_SetConfig+0xf0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <TIM_Base_SetConfig+0xe0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <TIM_Base_SetConfig+0xe4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d00b      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <TIM_Base_SetConfig+0xe8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <TIM_Base_SetConfig+0xec>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <TIM_Base_SetConfig+0xf0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <TIM_Base_SetConfig+0xe0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_Base_SetConfig+0xc8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a08      	ldr	r2, [pc, #32]	; (80065c8 <TIM_Base_SetConfig+0xe4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d103      	bne.n	80065b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	615a      	str	r2, [r3, #20]
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40013400 	.word	0x40013400
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00

080065d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f023 0201 	bic.w	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 0302 	bic.w	r3, r3, #2
 8006620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a20      	ldr	r2, [pc, #128]	; (80066b0 <TIM_OC1_SetConfig+0xd8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC1_SetConfig+0x64>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <TIM_OC1_SetConfig+0xdc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10c      	bne.n	8006656 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0308 	bic.w	r3, r3, #8
 8006642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f023 0304 	bic.w	r3, r3, #4
 8006654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <TIM_OC1_SetConfig+0xd8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_OC1_SetConfig+0x8e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a14      	ldr	r2, [pc, #80]	; (80066b4 <TIM_OC1_SetConfig+0xdc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d111      	bne.n	800668a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800666c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400

080066b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f023 0210 	bic.w	r2, r3, #16
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0320 	bic.w	r3, r3, #32
 8006702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a21      	ldr	r2, [pc, #132]	; (8006798 <TIM_OC2_SetConfig+0xe0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_OC2_SetConfig+0x68>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a20      	ldr	r2, [pc, #128]	; (800679c <TIM_OC2_SetConfig+0xe4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d10d      	bne.n	800673c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <TIM_OC2_SetConfig+0xe0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_OC2_SetConfig+0x94>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <TIM_OC2_SetConfig+0xe4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d113      	bne.n	8006774 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800675a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40013400 	.word	0x40013400

080067a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a21      	ldr	r2, [pc, #132]	; (8006880 <TIM_OC3_SetConfig+0xe0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC3_SetConfig+0x66>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a20      	ldr	r2, [pc, #128]	; (8006884 <TIM_OC3_SetConfig+0xe4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10d      	bne.n	8006822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a16      	ldr	r2, [pc, #88]	; (8006880 <TIM_OC3_SetConfig+0xe0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC3_SetConfig+0x92>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <TIM_OC3_SetConfig+0xe4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d113      	bne.n	800685a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	621a      	str	r2, [r3, #32]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400

08006888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	031b      	lsls	r3, r3, #12
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a11      	ldr	r2, [pc, #68]	; (8006928 <TIM_OC4_SetConfig+0xa0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_OC4_SetConfig+0x68>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a10      	ldr	r2, [pc, #64]	; (800692c <TIM_OC4_SetConfig+0xa4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d109      	bne.n	8006904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	019b      	lsls	r3, r3, #6
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40013400 	.word	0x40013400

08006930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f023 0201 	bic.w	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800695a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f023 030a 	bic.w	r3, r3, #10
 800696c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0210 	bic.w	r2, r3, #16
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	031b      	lsls	r3, r3, #12
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	621a      	str	r2, [r3, #32]
}
 80069e0:	bf00      	nop
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr

080069ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f043 0307 	orr.w	r3, r3, #7
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	609a      	str	r2, [r3, #8]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b087      	sub	sp, #28
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	021a      	lsls	r2, r3, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	609a      	str	r2, [r3, #8]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2201      	movs	r2, #1
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	43db      	mvns	r3, r3
 8006a7e:	401a      	ands	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	fa01 f303 	lsl.w	r3, r1, r3
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e050      	b.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b12:	d00e      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a14      	ldr	r2, [pc, #80]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a12      	ldr	r2, [pc, #72]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d10c      	bne.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00

08006b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e03d      	b.n	8006c14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr

08006c1e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e042      	b.n	8006cda <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fb fefb 	bl	8002a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2224      	movs	r2, #36	; 0x24
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fc80 	bl	800758c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006caa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b0ba      	sub	sp, #232	; 0xe8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10f      	bne.n	8006d4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <HAL_UART_IRQHandler+0x66>
 8006d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fb63 	bl	800740e <UART_Receive_IT>
      return;
 8006d48:	e25b      	b.n	8007202 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80de 	beq.w	8006f10 <HAL_UART_IRQHandler+0x22c>
 8006d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80d1 	beq.w	8006f10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <HAL_UART_IRQHandler+0xae>
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8a:	f043 0201 	orr.w	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_UART_IRQHandler+0xd2>
 8006d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	f043 0202 	orr.w	r2, r3, #2
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <HAL_UART_IRQHandler+0xf6>
 8006dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	f043 0204 	orr.w	r2, r3, #4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d011      	beq.n	8006e0a <HAL_UART_IRQHandler+0x126>
 8006de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	f043 0208 	orr.w	r2, r3, #8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 81f2 	beq.w	80071f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_UART_IRQHandler+0x14e>
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 faee 	bl	800740e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bf14      	ite	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	2300      	moveq	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <HAL_UART_IRQHandler+0x17a>
 8006e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d04f      	beq.n	8006efe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9f8 	bl	8007254 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d041      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3314      	adds	r3, #20
 8006e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1d9      	bne.n	8006e72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d013      	beq.n	8006eee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	4a7e      	ldr	r2, [pc, #504]	; (80070c4 <HAL_UART_IRQHandler+0x3e0>)
 8006ecc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fc faea 	bl	80034ac <HAL_DMA_Abort_IT>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d016      	beq.n	8006f0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	e00e      	b.n	8006f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f99c 	bl	800722c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	e00a      	b.n	8006f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f998 	bl	800722c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006efc:	e006      	b.n	8006f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f994 	bl	800722c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f0a:	e175      	b.n	80071f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f0c:	bf00      	nop
    return;
 8006f0e:	e173      	b.n	80071f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	f040 814f 	bne.w	80071b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8148 	beq.w	80071b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 8141 	beq.w	80071b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f36:	2300      	movs	r3, #0
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60bb      	str	r3, [r7, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60bb      	str	r3, [r7, #8]
 8006f4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80b6 	beq.w	80070c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8145 	beq.w	80071fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	f080 813e 	bcs.w	80071fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	f000 8088 	beq.w	80070a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fc0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1d9      	bne.n	8006f94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3314      	adds	r3, #20
 8007000:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007004:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007008:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800700c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e1      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3314      	adds	r3, #20
 8007022:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800702c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800702e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007040:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007042:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007046:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800704e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e3      	bne.n	800701c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007074:	f023 0310 	bic.w	r3, r3, #16
 8007078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007086:	65ba      	str	r2, [r7, #88]	; 0x58
 8007088:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800708c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e3      	bne.n	8007062 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fc f9c8 	bl	8003434 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f8bf 	bl	800723e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070c0:	e09c      	b.n	80071fc <HAL_UART_IRQHandler+0x518>
 80070c2:	bf00      	nop
 80070c4:	08007319 	.word	0x08007319
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 808e 	beq.w	8007200 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8089 	beq.w	8007200 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007112:	647a      	str	r2, [r7, #68]	; 0x44
 8007114:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e3      	bne.n	80070ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3314      	adds	r3, #20
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	623b      	str	r3, [r7, #32]
   return(result);
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3314      	adds	r3, #20
 8007146:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800714a:	633a      	str	r2, [r7, #48]	; 0x30
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e3      	bne.n	8007126 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	60fb      	str	r3, [r7, #12]
   return(result);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0310 	bic.w	r3, r3, #16
 8007182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	330c      	adds	r3, #12
 800718c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007190:	61fa      	str	r2, [r7, #28]
 8007192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	69b9      	ldr	r1, [r7, #24]
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	617b      	str	r3, [r7, #20]
   return(result);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e3      	bne.n	800716c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f844 	bl	800723e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071b6:	e023      	b.n	8007200 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <HAL_UART_IRQHandler+0x4f4>
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8b5 	bl	8007340 <UART_Transmit_IT>
    return;
 80071d6:	e014      	b.n	8007202 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00e      	beq.n	8007202 <HAL_UART_IRQHandler+0x51e>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8f4 	bl	80073de <UART_EndTransmit_IT>
    return;
 80071f6:	e004      	b.n	8007202 <HAL_UART_IRQHandler+0x51e>
    return;
 80071f8:	bf00      	nop
 80071fa:	e002      	b.n	8007202 <HAL_UART_IRQHandler+0x51e>
      return;
 80071fc:	bf00      	nop
 80071fe:	e000      	b.n	8007202 <HAL_UART_IRQHandler+0x51e>
      return;
 8007200:	bf00      	nop
  }
}
 8007202:	37e8      	adds	r7, #232	; 0xe8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr

0800722c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b095      	sub	sp, #84	; 0x54
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	330c      	adds	r3, #12
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	330c      	adds	r3, #12
 800727a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800727c:	643a      	str	r2, [r7, #64]	; 0x40
 800727e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e5      	bne.n	800725c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3314      	adds	r3, #20
 8007296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	61fb      	str	r3, [r7, #28]
   return(result);
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f023 0301 	bic.w	r3, r3, #1
 80072a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e5      	bne.n	8007290 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d119      	bne.n	8007300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	60bb      	str	r3, [r7, #8]
   return(result);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f023 0310 	bic.w	r3, r3, #16
 80072e2:	647b      	str	r3, [r7, #68]	; 0x44
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ec:	61ba      	str	r2, [r7, #24]
 80072ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6979      	ldr	r1, [r7, #20]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	613b      	str	r3, [r7, #16]
   return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800730e:	bf00      	nop
 8007310:	3754      	adds	r7, #84	; 0x54
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff ff7a 	bl	800722c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007338:	bf00      	nop
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b21      	cmp	r3, #33	; 0x21
 8007352:	d13e      	bne.n	80073d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735c:	d114      	bne.n	8007388 <UART_Transmit_IT+0x48>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d110      	bne.n	8007388 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800737a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	1c9a      	adds	r2, r3, #2
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	621a      	str	r2, [r3, #32]
 8007386:	e008      	b.n	800739a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	1c59      	adds	r1, r3, #1
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6211      	str	r1, [r2, #32]
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10f      	bne.n	80073ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e000      	b.n	80073d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr

080073de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff ff02 	bl	8007208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b08c      	sub	sp, #48	; 0x30
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b22      	cmp	r3, #34	; 0x22
 8007420:	f040 80ae 	bne.w	8007580 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742c:	d117      	bne.n	800745e <UART_Receive_IT+0x50>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d113      	bne.n	800745e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744c:	b29a      	uxth	r2, r3
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	1c9a      	adds	r2, r3, #2
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
 800745c:	e026      	b.n	80074ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007470:	d007      	beq.n	8007482 <UART_Receive_IT+0x74>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10a      	bne.n	8007490 <UART_Receive_IT+0x82>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	b2da      	uxtb	r2, r3
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	e008      	b.n	80074a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749c:	b2da      	uxtb	r2, r3
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4619      	mov	r1, r3
 80074ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d15d      	bne.n	800757c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0220 	bic.w	r2, r2, #32
 80074ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0201 	bic.w	r2, r2, #1
 80074ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	2b01      	cmp	r3, #1
 8007504:	d135      	bne.n	8007572 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	613b      	str	r3, [r7, #16]
   return(result);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f023 0310 	bic.w	r3, r3, #16
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752c:	623a      	str	r2, [r7, #32]
 800752e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	69f9      	ldr	r1, [r7, #28]
 8007532:	6a3a      	ldr	r2, [r7, #32]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	61bb      	str	r3, [r7, #24]
   return(result);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e5      	bne.n	800750c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b10      	cmp	r3, #16
 800754c:	d10a      	bne.n	8007564 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fe67 	bl	800723e <HAL_UARTEx_RxEventCallback>
 8007570:	e002      	b.n	8007578 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fe51 	bl	800721a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	e002      	b.n	8007582 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007580:	2302      	movs	r3, #2
  }
}
 8007582:	4618      	mov	r0, r3
 8007584:	3730      	adds	r7, #48	; 0x30
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80075c6:	f023 030c 	bic.w	r3, r3, #12
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	430b      	orrs	r3, r1
 80075d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2c      	ldr	r2, [pc, #176]	; (80076a0 <UART_SetConfig+0x114>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d103      	bne.n	80075fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075f4:	f7fd ff66 	bl	80054c4 <HAL_RCC_GetPCLK2Freq>
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	e002      	b.n	8007602 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075fc:	f7fd ff4e 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8007600:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	009a      	lsls	r2, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	fbb2 f3f3 	udiv	r3, r2, r3
 8007618:	4a22      	ldr	r2, [pc, #136]	; (80076a4 <UART_SetConfig+0x118>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	0119      	lsls	r1, r3, #4
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	009a      	lsls	r2, r3, #2
 800762c:	441a      	add	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	fbb2 f2f3 	udiv	r2, r2, r3
 8007638:	4b1a      	ldr	r3, [pc, #104]	; (80076a4 <UART_SetConfig+0x118>)
 800763a:	fba3 0302 	umull	r0, r3, r3, r2
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	2064      	movs	r0, #100	; 0x64
 8007642:	fb00 f303 	mul.w	r3, r0, r3
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	3332      	adds	r3, #50	; 0x32
 800764c:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <UART_SetConfig+0x118>)
 800764e:	fba2 2303 	umull	r2, r3, r2, r3
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007658:	4419      	add	r1, r3
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009a      	lsls	r2, r3, #2
 8007664:	441a      	add	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <UART_SetConfig+0x118>)
 8007672:	fba3 0302 	umull	r0, r3, r3, r2
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	2064      	movs	r0, #100	; 0x64
 800767a:	fb00 f303 	mul.w	r3, r0, r3
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	3332      	adds	r3, #50	; 0x32
 8007684:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <UART_SetConfig+0x118>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	f003 020f 	and.w	r2, r3, #15
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	440a      	add	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40013800 	.word	0x40013800
 80076a4:	51eb851f 	.word	0x51eb851f

080076a8 <memset>:
 80076a8:	4603      	mov	r3, r0
 80076aa:	4402      	add	r2, r0
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d100      	bne.n	80076b2 <memset+0xa>
 80076b0:	4770      	bx	lr
 80076b2:	f803 1b01 	strb.w	r1, [r3], #1
 80076b6:	e7f9      	b.n	80076ac <memset+0x4>

080076b8 <__errno>:
 80076b8:	4b01      	ldr	r3, [pc, #4]	; (80076c0 <__errno+0x8>)
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20000074 	.word	0x20000074

080076c4 <__libc_init_array>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	2600      	movs	r6, #0
 80076c8:	4d0c      	ldr	r5, [pc, #48]	; (80076fc <__libc_init_array+0x38>)
 80076ca:	4c0d      	ldr	r4, [pc, #52]	; (8007700 <__libc_init_array+0x3c>)
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	42a6      	cmp	r6, r4
 80076d2:	d109      	bne.n	80076e8 <__libc_init_array+0x24>
 80076d4:	f000 fb86 	bl	8007de4 <_init>
 80076d8:	2600      	movs	r6, #0
 80076da:	4d0a      	ldr	r5, [pc, #40]	; (8007704 <__libc_init_array+0x40>)
 80076dc:	4c0a      	ldr	r4, [pc, #40]	; (8007708 <__libc_init_array+0x44>)
 80076de:	1b64      	subs	r4, r4, r5
 80076e0:	10a4      	asrs	r4, r4, #2
 80076e2:	42a6      	cmp	r6, r4
 80076e4:	d105      	bne.n	80076f2 <__libc_init_array+0x2e>
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ec:	4798      	blx	r3
 80076ee:	3601      	adds	r6, #1
 80076f0:	e7ee      	b.n	80076d0 <__libc_init_array+0xc>
 80076f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f6:	4798      	blx	r3
 80076f8:	3601      	adds	r6, #1
 80076fa:	e7f2      	b.n	80076e2 <__libc_init_array+0x1e>
 80076fc:	08007f28 	.word	0x08007f28
 8007700:	08007f28 	.word	0x08007f28
 8007704:	08007f28 	.word	0x08007f28
 8007708:	08007f2c 	.word	0x08007f2c

0800770c <memcpy>:
 800770c:	440a      	add	r2, r1
 800770e:	4291      	cmp	r1, r2
 8007710:	f100 33ff 	add.w	r3, r0, #4294967295
 8007714:	d100      	bne.n	8007718 <memcpy+0xc>
 8007716:	4770      	bx	lr
 8007718:	b510      	push	{r4, lr}
 800771a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771e:	4291      	cmp	r1, r2
 8007720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007724:	d1f9      	bne.n	800771a <memcpy+0xe>
 8007726:	bd10      	pop	{r4, pc}

08007728 <atan2>:
 8007728:	f000 b8fe 	b.w	8007928 <__ieee754_atan2>

0800772c <sqrt>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	4606      	mov	r6, r0
 8007730:	460f      	mov	r7, r1
 8007732:	f000 f81f 	bl	8007774 <__ieee754_sqrt>
 8007736:	4632      	mov	r2, r6
 8007738:	4604      	mov	r4, r0
 800773a:	460d      	mov	r5, r1
 800773c:	463b      	mov	r3, r7
 800773e:	4630      	mov	r0, r6
 8007740:	4639      	mov	r1, r7
 8007742:	f7f9 f9c7 	bl	8000ad4 <__aeabi_dcmpun>
 8007746:	b990      	cbnz	r0, 800776e <sqrt+0x42>
 8007748:	2200      	movs	r2, #0
 800774a:	2300      	movs	r3, #0
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f7f9 f998 	bl	8000a84 <__aeabi_dcmplt>
 8007754:	b158      	cbz	r0, 800776e <sqrt+0x42>
 8007756:	f7ff ffaf 	bl	80076b8 <__errno>
 800775a:	2321      	movs	r3, #33	; 0x21
 800775c:	2200      	movs	r2, #0
 800775e:	6003      	str	r3, [r0, #0]
 8007760:	2300      	movs	r3, #0
 8007762:	4610      	mov	r0, r2
 8007764:	4619      	mov	r1, r3
 8007766:	f7f9 f845 	bl	80007f4 <__aeabi_ddiv>
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007774 <__ieee754_sqrt>:
 8007774:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007918 <__ieee754_sqrt+0x1a4>
 8007778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007780:	460b      	mov	r3, r1
 8007782:	4606      	mov	r6, r0
 8007784:	460d      	mov	r5, r1
 8007786:	460a      	mov	r2, r1
 8007788:	4604      	mov	r4, r0
 800778a:	d10e      	bne.n	80077aa <__ieee754_sqrt+0x36>
 800778c:	4602      	mov	r2, r0
 800778e:	f7f8 ff07 	bl	80005a0 <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4630      	mov	r0, r6
 8007798:	4629      	mov	r1, r5
 800779a:	f7f8 fd4b 	bl	8000234 <__adddf3>
 800779e:	4606      	mov	r6, r0
 80077a0:	460d      	mov	r5, r1
 80077a2:	4630      	mov	r0, r6
 80077a4:	4629      	mov	r1, r5
 80077a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	2900      	cmp	r1, #0
 80077ac:	dc0d      	bgt.n	80077ca <__ieee754_sqrt+0x56>
 80077ae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80077b2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80077b6:	d0f4      	beq.n	80077a2 <__ieee754_sqrt+0x2e>
 80077b8:	b139      	cbz	r1, 80077ca <__ieee754_sqrt+0x56>
 80077ba:	4602      	mov	r2, r0
 80077bc:	f7f8 fd38 	bl	8000230 <__aeabi_dsub>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	f7f9 f816 	bl	80007f4 <__aeabi_ddiv>
 80077c8:	e7e9      	b.n	800779e <__ieee754_sqrt+0x2a>
 80077ca:	1512      	asrs	r2, r2, #20
 80077cc:	f000 8089 	beq.w	80078e2 <__ieee754_sqrt+0x16e>
 80077d0:	2500      	movs	r5, #0
 80077d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80077da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077de:	07d2      	lsls	r2, r2, #31
 80077e0:	bf5c      	itt	pl
 80077e2:	005b      	lslpl	r3, r3, #1
 80077e4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80077e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077ec:	bf58      	it	pl
 80077ee:	0064      	lslpl	r4, r4, #1
 80077f0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80077f4:	0062      	lsls	r2, r4, #1
 80077f6:	2016      	movs	r0, #22
 80077f8:	4629      	mov	r1, r5
 80077fa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80077fe:	1076      	asrs	r6, r6, #1
 8007800:	190f      	adds	r7, r1, r4
 8007802:	429f      	cmp	r7, r3
 8007804:	bfde      	ittt	le
 8007806:	1bdb      	suble	r3, r3, r7
 8007808:	1939      	addle	r1, r7, r4
 800780a:	192d      	addle	r5, r5, r4
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	3801      	subs	r0, #1
 8007810:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007814:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007818:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800781c:	d1f0      	bne.n	8007800 <__ieee754_sqrt+0x8c>
 800781e:	4604      	mov	r4, r0
 8007820:	2720      	movs	r7, #32
 8007822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007826:	428b      	cmp	r3, r1
 8007828:	eb0c 0e00 	add.w	lr, ip, r0
 800782c:	dc02      	bgt.n	8007834 <__ieee754_sqrt+0xc0>
 800782e:	d113      	bne.n	8007858 <__ieee754_sqrt+0xe4>
 8007830:	4596      	cmp	lr, r2
 8007832:	d811      	bhi.n	8007858 <__ieee754_sqrt+0xe4>
 8007834:	f1be 0f00 	cmp.w	lr, #0
 8007838:	eb0e 000c 	add.w	r0, lr, ip
 800783c:	da56      	bge.n	80078ec <__ieee754_sqrt+0x178>
 800783e:	2800      	cmp	r0, #0
 8007840:	db54      	blt.n	80078ec <__ieee754_sqrt+0x178>
 8007842:	f101 0801 	add.w	r8, r1, #1
 8007846:	1a5b      	subs	r3, r3, r1
 8007848:	4641      	mov	r1, r8
 800784a:	4596      	cmp	lr, r2
 800784c:	bf88      	it	hi
 800784e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007852:	eba2 020e 	sub.w	r2, r2, lr
 8007856:	4464      	add	r4, ip
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	3f01      	subs	r7, #1
 800785c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007860:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007864:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007868:	d1dd      	bne.n	8007826 <__ieee754_sqrt+0xb2>
 800786a:	4313      	orrs	r3, r2
 800786c:	d01b      	beq.n	80078a6 <__ieee754_sqrt+0x132>
 800786e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800791c <__ieee754_sqrt+0x1a8>
 8007872:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007920 <__ieee754_sqrt+0x1ac>
 8007876:	e9da 0100 	ldrd	r0, r1, [sl]
 800787a:	e9db 2300 	ldrd	r2, r3, [fp]
 800787e:	f7f8 fcd7 	bl	8000230 <__aeabi_dsub>
 8007882:	e9da 8900 	ldrd	r8, r9, [sl]
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4640      	mov	r0, r8
 800788c:	4649      	mov	r1, r9
 800788e:	f7f9 f903 	bl	8000a98 <__aeabi_dcmple>
 8007892:	b140      	cbz	r0, 80078a6 <__ieee754_sqrt+0x132>
 8007894:	e9da 0100 	ldrd	r0, r1, [sl]
 8007898:	e9db 2300 	ldrd	r2, r3, [fp]
 800789c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80078a0:	d126      	bne.n	80078f0 <__ieee754_sqrt+0x17c>
 80078a2:	463c      	mov	r4, r7
 80078a4:	3501      	adds	r5, #1
 80078a6:	106b      	asrs	r3, r5, #1
 80078a8:	0864      	lsrs	r4, r4, #1
 80078aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80078ae:	07ea      	lsls	r2, r5, #31
 80078b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80078b4:	bf48      	it	mi
 80078b6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80078ba:	4620      	mov	r0, r4
 80078bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80078c0:	e76d      	b.n	800779e <__ieee754_sqrt+0x2a>
 80078c2:	0ae3      	lsrs	r3, r4, #11
 80078c4:	3915      	subs	r1, #21
 80078c6:	0564      	lsls	r4, r4, #21
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0fa      	beq.n	80078c2 <__ieee754_sqrt+0x14e>
 80078cc:	02d8      	lsls	r0, r3, #11
 80078ce:	d50a      	bpl.n	80078e6 <__ieee754_sqrt+0x172>
 80078d0:	f1c2 0020 	rsb	r0, r2, #32
 80078d4:	fa24 f000 	lsr.w	r0, r4, r0
 80078d8:	1e55      	subs	r5, r2, #1
 80078da:	4094      	lsls	r4, r2
 80078dc:	4303      	orrs	r3, r0
 80078de:	1b4a      	subs	r2, r1, r5
 80078e0:	e776      	b.n	80077d0 <__ieee754_sqrt+0x5c>
 80078e2:	4611      	mov	r1, r2
 80078e4:	e7f0      	b.n	80078c8 <__ieee754_sqrt+0x154>
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	3201      	adds	r2, #1
 80078ea:	e7ef      	b.n	80078cc <__ieee754_sqrt+0x158>
 80078ec:	4688      	mov	r8, r1
 80078ee:	e7aa      	b.n	8007846 <__ieee754_sqrt+0xd2>
 80078f0:	f7f8 fca0 	bl	8000234 <__adddf3>
 80078f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4640      	mov	r0, r8
 80078fe:	4649      	mov	r1, r9
 8007900:	f7f9 f8c0 	bl	8000a84 <__aeabi_dcmplt>
 8007904:	b120      	cbz	r0, 8007910 <__ieee754_sqrt+0x19c>
 8007906:	1ca1      	adds	r1, r4, #2
 8007908:	bf08      	it	eq
 800790a:	3501      	addeq	r5, #1
 800790c:	3402      	adds	r4, #2
 800790e:	e7ca      	b.n	80078a6 <__ieee754_sqrt+0x132>
 8007910:	3401      	adds	r4, #1
 8007912:	f024 0401 	bic.w	r4, r4, #1
 8007916:	e7c6      	b.n	80078a6 <__ieee754_sqrt+0x132>
 8007918:	7ff00000 	.word	0x7ff00000
 800791c:	20000078 	.word	0x20000078
 8007920:	20000080 	.word	0x20000080
 8007924:	00000000 	.word	0x00000000

08007928 <__ieee754_atan2>:
 8007928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	4617      	mov	r7, r2
 800792e:	4692      	mov	sl, r2
 8007930:	4699      	mov	r9, r3
 8007932:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007936:	427b      	negs	r3, r7
 8007938:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007ab8 <__ieee754_atan2+0x190>
 800793c:	433b      	orrs	r3, r7
 800793e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007942:	4543      	cmp	r3, r8
 8007944:	4604      	mov	r4, r0
 8007946:	460d      	mov	r5, r1
 8007948:	d809      	bhi.n	800795e <__ieee754_atan2+0x36>
 800794a:	4246      	negs	r6, r0
 800794c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007950:	4306      	orrs	r6, r0
 8007952:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007956:	4546      	cmp	r6, r8
 8007958:	468e      	mov	lr, r1
 800795a:	4683      	mov	fp, r0
 800795c:	d908      	bls.n	8007970 <__ieee754_atan2+0x48>
 800795e:	4652      	mov	r2, sl
 8007960:	464b      	mov	r3, r9
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	f7f8 fc65 	bl	8000234 <__adddf3>
 800796a:	4604      	mov	r4, r0
 800796c:	460d      	mov	r5, r1
 800796e:	e019      	b.n	80079a4 <__ieee754_atan2+0x7c>
 8007970:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007974:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007978:	433e      	orrs	r6, r7
 800797a:	d103      	bne.n	8007984 <__ieee754_atan2+0x5c>
 800797c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	f000 b8a2 	b.w	8007ac8 <atan>
 8007984:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007988:	f006 0602 	and.w	r6, r6, #2
 800798c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8007990:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007994:	d10a      	bne.n	80079ac <__ieee754_atan2+0x84>
 8007996:	2e02      	cmp	r6, #2
 8007998:	d067      	beq.n	8007a6a <__ieee754_atan2+0x142>
 800799a:	2e03      	cmp	r6, #3
 800799c:	d102      	bne.n	80079a4 <__ieee754_atan2+0x7c>
 800799e:	a53a      	add	r5, pc, #232	; (adr r5, 8007a88 <__ieee754_atan2+0x160>)
 80079a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ac:	4317      	orrs	r7, r2
 80079ae:	d106      	bne.n	80079be <__ieee754_atan2+0x96>
 80079b0:	f1be 0f00 	cmp.w	lr, #0
 80079b4:	da64      	bge.n	8007a80 <__ieee754_atan2+0x158>
 80079b6:	a536      	add	r5, pc, #216	; (adr r5, 8007a90 <__ieee754_atan2+0x168>)
 80079b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079bc:	e7f2      	b.n	80079a4 <__ieee754_atan2+0x7c>
 80079be:	4542      	cmp	r2, r8
 80079c0:	d10f      	bne.n	80079e2 <__ieee754_atan2+0xba>
 80079c2:	4293      	cmp	r3, r2
 80079c4:	f106 36ff 	add.w	r6, r6, #4294967295
 80079c8:	d107      	bne.n	80079da <__ieee754_atan2+0xb2>
 80079ca:	2e02      	cmp	r6, #2
 80079cc:	d851      	bhi.n	8007a72 <__ieee754_atan2+0x14a>
 80079ce:	4b3b      	ldr	r3, [pc, #236]	; (8007abc <__ieee754_atan2+0x194>)
 80079d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80079d8:	e7e4      	b.n	80079a4 <__ieee754_atan2+0x7c>
 80079da:	2e02      	cmp	r6, #2
 80079dc:	d84d      	bhi.n	8007a7a <__ieee754_atan2+0x152>
 80079de:	4b38      	ldr	r3, [pc, #224]	; (8007ac0 <__ieee754_atan2+0x198>)
 80079e0:	e7f6      	b.n	80079d0 <__ieee754_atan2+0xa8>
 80079e2:	4543      	cmp	r3, r8
 80079e4:	d0e4      	beq.n	80079b0 <__ieee754_atan2+0x88>
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80079ec:	ea4f 5223 	mov.w	r2, r3, asr #20
 80079f0:	da21      	bge.n	8007a36 <__ieee754_atan2+0x10e>
 80079f2:	f1b9 0f00 	cmp.w	r9, #0
 80079f6:	da01      	bge.n	80079fc <__ieee754_atan2+0xd4>
 80079f8:	323c      	adds	r2, #60	; 0x3c
 80079fa:	db20      	blt.n	8007a3e <__ieee754_atan2+0x116>
 80079fc:	4652      	mov	r2, sl
 80079fe:	464b      	mov	r3, r9
 8007a00:	4620      	mov	r0, r4
 8007a02:	4629      	mov	r1, r5
 8007a04:	f7f8 fef6 	bl	80007f4 <__aeabi_ddiv>
 8007a08:	f000 f9e8 	bl	8007ddc <fabs>
 8007a0c:	f000 f85c 	bl	8007ac8 <atan>
 8007a10:	4604      	mov	r4, r0
 8007a12:	460d      	mov	r5, r1
 8007a14:	2e01      	cmp	r6, #1
 8007a16:	d015      	beq.n	8007a44 <__ieee754_atan2+0x11c>
 8007a18:	2e02      	cmp	r6, #2
 8007a1a:	d017      	beq.n	8007a4c <__ieee754_atan2+0x124>
 8007a1c:	2e00      	cmp	r6, #0
 8007a1e:	d0c1      	beq.n	80079a4 <__ieee754_atan2+0x7c>
 8007a20:	a31d      	add	r3, pc, #116	; (adr r3, 8007a98 <__ieee754_atan2+0x170>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f8 fc01 	bl	8000230 <__aeabi_dsub>
 8007a2e:	a31c      	add	r3, pc, #112	; (adr r3, 8007aa0 <__ieee754_atan2+0x178>)
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	e016      	b.n	8007a64 <__ieee754_atan2+0x13c>
 8007a36:	a51c      	add	r5, pc, #112	; (adr r5, 8007aa8 <__ieee754_atan2+0x180>)
 8007a38:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a3c:	e7ea      	b.n	8007a14 <__ieee754_atan2+0xec>
 8007a3e:	2400      	movs	r4, #0
 8007a40:	2500      	movs	r5, #0
 8007a42:	e7e7      	b.n	8007a14 <__ieee754_atan2+0xec>
 8007a44:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007a48:	461d      	mov	r5, r3
 8007a4a:	e7ab      	b.n	80079a4 <__ieee754_atan2+0x7c>
 8007a4c:	a312      	add	r3, pc, #72	; (adr r3, 8007a98 <__ieee754_atan2+0x170>)
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	4620      	mov	r0, r4
 8007a54:	4629      	mov	r1, r5
 8007a56:	f7f8 fbeb 	bl	8000230 <__aeabi_dsub>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	a110      	add	r1, pc, #64	; (adr r1, 8007aa0 <__ieee754_atan2+0x178>)
 8007a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a64:	f7f8 fbe4 	bl	8000230 <__aeabi_dsub>
 8007a68:	e77f      	b.n	800796a <__ieee754_atan2+0x42>
 8007a6a:	a50d      	add	r5, pc, #52	; (adr r5, 8007aa0 <__ieee754_atan2+0x178>)
 8007a6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a70:	e798      	b.n	80079a4 <__ieee754_atan2+0x7c>
 8007a72:	a50f      	add	r5, pc, #60	; (adr r5, 8007ab0 <__ieee754_atan2+0x188>)
 8007a74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a78:	e794      	b.n	80079a4 <__ieee754_atan2+0x7c>
 8007a7a:	2400      	movs	r4, #0
 8007a7c:	2500      	movs	r5, #0
 8007a7e:	e791      	b.n	80079a4 <__ieee754_atan2+0x7c>
 8007a80:	a509      	add	r5, pc, #36	; (adr r5, 8007aa8 <__ieee754_atan2+0x180>)
 8007a82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a86:	e78d      	b.n	80079a4 <__ieee754_atan2+0x7c>
 8007a88:	54442d18 	.word	0x54442d18
 8007a8c:	c00921fb 	.word	0xc00921fb
 8007a90:	54442d18 	.word	0x54442d18
 8007a94:	bff921fb 	.word	0xbff921fb
 8007a98:	33145c07 	.word	0x33145c07
 8007a9c:	3ca1a626 	.word	0x3ca1a626
 8007aa0:	54442d18 	.word	0x54442d18
 8007aa4:	400921fb 	.word	0x400921fb
 8007aa8:	54442d18 	.word	0x54442d18
 8007aac:	3ff921fb 	.word	0x3ff921fb
 8007ab0:	54442d18 	.word	0x54442d18
 8007ab4:	3fe921fb 	.word	0x3fe921fb
 8007ab8:	7ff00000 	.word	0x7ff00000
 8007abc:	08007eb8 	.word	0x08007eb8
 8007ac0:	08007ed0 	.word	0x08007ed0
 8007ac4:	00000000 	.word	0x00000000

08007ac8 <atan>:
 8007ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	4bb6      	ldr	r3, [pc, #728]	; (8007da8 <atan+0x2e0>)
 8007ace:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007ad2:	429e      	cmp	r6, r3
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	468b      	mov	fp, r1
 8007ada:	dd17      	ble.n	8007b0c <atan+0x44>
 8007adc:	4bb3      	ldr	r3, [pc, #716]	; (8007dac <atan+0x2e4>)
 8007ade:	429e      	cmp	r6, r3
 8007ae0:	dc01      	bgt.n	8007ae6 <atan+0x1e>
 8007ae2:	d109      	bne.n	8007af8 <atan+0x30>
 8007ae4:	b140      	cbz	r0, 8007af8 <atan+0x30>
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	4620      	mov	r0, r4
 8007aec:	4629      	mov	r1, r5
 8007aee:	f7f8 fba1 	bl	8000234 <__adddf3>
 8007af2:	4604      	mov	r4, r0
 8007af4:	460d      	mov	r5, r1
 8007af6:	e005      	b.n	8007b04 <atan+0x3c>
 8007af8:	f1bb 0f00 	cmp.w	fp, #0
 8007afc:	4cac      	ldr	r4, [pc, #688]	; (8007db0 <atan+0x2e8>)
 8007afe:	f300 8121 	bgt.w	8007d44 <atan+0x27c>
 8007b02:	4dac      	ldr	r5, [pc, #688]	; (8007db4 <atan+0x2ec>)
 8007b04:	4620      	mov	r0, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	4baa      	ldr	r3, [pc, #680]	; (8007db8 <atan+0x2f0>)
 8007b0e:	429e      	cmp	r6, r3
 8007b10:	dc11      	bgt.n	8007b36 <atan+0x6e>
 8007b12:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007b16:	429e      	cmp	r6, r3
 8007b18:	dc0a      	bgt.n	8007b30 <atan+0x68>
 8007b1a:	a38b      	add	r3, pc, #556	; (adr r3, 8007d48 <atan+0x280>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 fb88 	bl	8000234 <__adddf3>
 8007b24:	2200      	movs	r2, #0
 8007b26:	4ba5      	ldr	r3, [pc, #660]	; (8007dbc <atan+0x2f4>)
 8007b28:	f7f8 ffca 	bl	8000ac0 <__aeabi_dcmpgt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d1e9      	bne.n	8007b04 <atan+0x3c>
 8007b30:	f04f 3aff 	mov.w	sl, #4294967295
 8007b34:	e027      	b.n	8007b86 <atan+0xbe>
 8007b36:	f000 f951 	bl	8007ddc <fabs>
 8007b3a:	4ba1      	ldr	r3, [pc, #644]	; (8007dc0 <atan+0x2f8>)
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	429e      	cmp	r6, r3
 8007b40:	460d      	mov	r5, r1
 8007b42:	f300 80b8 	bgt.w	8007cb6 <atan+0x1ee>
 8007b46:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007b4a:	429e      	cmp	r6, r3
 8007b4c:	f300 809c 	bgt.w	8007c88 <atan+0x1c0>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	f7f8 fb6e 	bl	8000234 <__adddf3>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4b98      	ldr	r3, [pc, #608]	; (8007dbc <atan+0x2f4>)
 8007b5c:	f7f8 fb68 	bl	8000230 <__aeabi_dsub>
 8007b60:	2200      	movs	r2, #0
 8007b62:	4606      	mov	r6, r0
 8007b64:	460f      	mov	r7, r1
 8007b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	f7f8 fb61 	bl	8000234 <__adddf3>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	f7f8 fe3b 	bl	80007f4 <__aeabi_ddiv>
 8007b7e:	f04f 0a00 	mov.w	sl, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	460d      	mov	r5, r1
 8007b86:	4622      	mov	r2, r4
 8007b88:	462b      	mov	r3, r5
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7f8 fd07 	bl	80005a0 <__aeabi_dmul>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4680      	mov	r8, r0
 8007b98:	4689      	mov	r9, r1
 8007b9a:	f7f8 fd01 	bl	80005a0 <__aeabi_dmul>
 8007b9e:	a36c      	add	r3, pc, #432	; (adr r3, 8007d50 <atan+0x288>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	f7f8 fcfa 	bl	80005a0 <__aeabi_dmul>
 8007bac:	a36a      	add	r3, pc, #424	; (adr r3, 8007d58 <atan+0x290>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fb3f 	bl	8000234 <__adddf3>
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	463b      	mov	r3, r7
 8007bba:	f7f8 fcf1 	bl	80005a0 <__aeabi_dmul>
 8007bbe:	a368      	add	r3, pc, #416	; (adr r3, 8007d60 <atan+0x298>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fb36 	bl	8000234 <__adddf3>
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	f7f8 fce8 	bl	80005a0 <__aeabi_dmul>
 8007bd0:	a365      	add	r3, pc, #404	; (adr r3, 8007d68 <atan+0x2a0>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fb2d 	bl	8000234 <__adddf3>
 8007bda:	4632      	mov	r2, r6
 8007bdc:	463b      	mov	r3, r7
 8007bde:	f7f8 fcdf 	bl	80005a0 <__aeabi_dmul>
 8007be2:	a363      	add	r3, pc, #396	; (adr r3, 8007d70 <atan+0x2a8>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fb24 	bl	8000234 <__adddf3>
 8007bec:	4632      	mov	r2, r6
 8007bee:	463b      	mov	r3, r7
 8007bf0:	f7f8 fcd6 	bl	80005a0 <__aeabi_dmul>
 8007bf4:	a360      	add	r3, pc, #384	; (adr r3, 8007d78 <atan+0x2b0>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fb1b 	bl	8000234 <__adddf3>
 8007bfe:	4642      	mov	r2, r8
 8007c00:	464b      	mov	r3, r9
 8007c02:	f7f8 fccd 	bl	80005a0 <__aeabi_dmul>
 8007c06:	a35e      	add	r3, pc, #376	; (adr r3, 8007d80 <atan+0x2b8>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4689      	mov	r9, r1
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 fcc4 	bl	80005a0 <__aeabi_dmul>
 8007c18:	a35b      	add	r3, pc, #364	; (adr r3, 8007d88 <atan+0x2c0>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fb07 	bl	8000230 <__aeabi_dsub>
 8007c22:	4632      	mov	r2, r6
 8007c24:	463b      	mov	r3, r7
 8007c26:	f7f8 fcbb 	bl	80005a0 <__aeabi_dmul>
 8007c2a:	a359      	add	r3, pc, #356	; (adr r3, 8007d90 <atan+0x2c8>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fafe 	bl	8000230 <__aeabi_dsub>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	f7f8 fcb2 	bl	80005a0 <__aeabi_dmul>
 8007c3c:	a356      	add	r3, pc, #344	; (adr r3, 8007d98 <atan+0x2d0>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f7f8 faf5 	bl	8000230 <__aeabi_dsub>
 8007c46:	4632      	mov	r2, r6
 8007c48:	463b      	mov	r3, r7
 8007c4a:	f7f8 fca9 	bl	80005a0 <__aeabi_dmul>
 8007c4e:	a354      	add	r3, pc, #336	; (adr r3, 8007da0 <atan+0x2d8>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f7f8 faec 	bl	8000230 <__aeabi_dsub>
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	f7f8 fca0 	bl	80005a0 <__aeabi_dmul>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4640      	mov	r0, r8
 8007c66:	4649      	mov	r1, r9
 8007c68:	f7f8 fae4 	bl	8000234 <__adddf3>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fc96 	bl	80005a0 <__aeabi_dmul>
 8007c74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	d144      	bne.n	8007d08 <atan+0x240>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	4629      	mov	r1, r5
 8007c82:	f7f8 fad5 	bl	8000230 <__aeabi_dsub>
 8007c86:	e734      	b.n	8007af2 <atan+0x2a>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4b4c      	ldr	r3, [pc, #304]	; (8007dbc <atan+0x2f4>)
 8007c8c:	f7f8 fad0 	bl	8000230 <__aeabi_dsub>
 8007c90:	2200      	movs	r2, #0
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4b48      	ldr	r3, [pc, #288]	; (8007dbc <atan+0x2f4>)
 8007c9c:	f7f8 faca 	bl	8000234 <__adddf3>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 fda4 	bl	80007f4 <__aeabi_ddiv>
 8007cac:	f04f 0a01 	mov.w	sl, #1
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	e767      	b.n	8007b86 <atan+0xbe>
 8007cb6:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <atan+0x2fc>)
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	da1a      	bge.n	8007cf2 <atan+0x22a>
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4b42      	ldr	r3, [pc, #264]	; (8007dc8 <atan+0x300>)
 8007cc0:	f7f8 fab6 	bl	8000230 <__aeabi_dsub>
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	460f      	mov	r7, r1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4b3e      	ldr	r3, [pc, #248]	; (8007dc8 <atan+0x300>)
 8007cd0:	f7f8 fc66 	bl	80005a0 <__aeabi_dmul>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4b39      	ldr	r3, [pc, #228]	; (8007dbc <atan+0x2f4>)
 8007cd8:	f7f8 faac 	bl	8000234 <__adddf3>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 fd86 	bl	80007f4 <__aeabi_ddiv>
 8007ce8:	f04f 0a02 	mov.w	sl, #2
 8007cec:	4604      	mov	r4, r0
 8007cee:	460d      	mov	r5, r1
 8007cf0:	e749      	b.n	8007b86 <atan+0xbe>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	4934      	ldr	r1, [pc, #208]	; (8007dcc <atan+0x304>)
 8007cfa:	f7f8 fd7b 	bl	80007f4 <__aeabi_ddiv>
 8007cfe:	f04f 0a03 	mov.w	sl, #3
 8007d02:	4604      	mov	r4, r0
 8007d04:	460d      	mov	r5, r1
 8007d06:	e73e      	b.n	8007b86 <atan+0xbe>
 8007d08:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <atan+0x308>)
 8007d0a:	4e32      	ldr	r6, [pc, #200]	; (8007dd4 <atan+0x30c>)
 8007d0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fa8c 	bl	8000230 <__aeabi_dsub>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	f7f8 fa88 	bl	8000230 <__aeabi_dsub>
 8007d20:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007d2c:	f7f8 fa80 	bl	8000230 <__aeabi_dsub>
 8007d30:	f1bb 0f00 	cmp.w	fp, #0
 8007d34:	4604      	mov	r4, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	f6bf aee4 	bge.w	8007b04 <atan+0x3c>
 8007d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d40:	461d      	mov	r5, r3
 8007d42:	e6df      	b.n	8007b04 <atan+0x3c>
 8007d44:	4d24      	ldr	r5, [pc, #144]	; (8007dd8 <atan+0x310>)
 8007d46:	e6dd      	b.n	8007b04 <atan+0x3c>
 8007d48:	8800759c 	.word	0x8800759c
 8007d4c:	7e37e43c 	.word	0x7e37e43c
 8007d50:	e322da11 	.word	0xe322da11
 8007d54:	3f90ad3a 	.word	0x3f90ad3a
 8007d58:	24760deb 	.word	0x24760deb
 8007d5c:	3fa97b4b 	.word	0x3fa97b4b
 8007d60:	a0d03d51 	.word	0xa0d03d51
 8007d64:	3fb10d66 	.word	0x3fb10d66
 8007d68:	c54c206e 	.word	0xc54c206e
 8007d6c:	3fb745cd 	.word	0x3fb745cd
 8007d70:	920083ff 	.word	0x920083ff
 8007d74:	3fc24924 	.word	0x3fc24924
 8007d78:	5555550d 	.word	0x5555550d
 8007d7c:	3fd55555 	.word	0x3fd55555
 8007d80:	2c6a6c2f 	.word	0x2c6a6c2f
 8007d84:	bfa2b444 	.word	0xbfa2b444
 8007d88:	52defd9a 	.word	0x52defd9a
 8007d8c:	3fadde2d 	.word	0x3fadde2d
 8007d90:	af749a6d 	.word	0xaf749a6d
 8007d94:	3fb3b0f2 	.word	0x3fb3b0f2
 8007d98:	fe231671 	.word	0xfe231671
 8007d9c:	3fbc71c6 	.word	0x3fbc71c6
 8007da0:	9998ebc4 	.word	0x9998ebc4
 8007da4:	3fc99999 	.word	0x3fc99999
 8007da8:	440fffff 	.word	0x440fffff
 8007dac:	7ff00000 	.word	0x7ff00000
 8007db0:	54442d18 	.word	0x54442d18
 8007db4:	bff921fb 	.word	0xbff921fb
 8007db8:	3fdbffff 	.word	0x3fdbffff
 8007dbc:	3ff00000 	.word	0x3ff00000
 8007dc0:	3ff2ffff 	.word	0x3ff2ffff
 8007dc4:	40038000 	.word	0x40038000
 8007dc8:	3ff80000 	.word	0x3ff80000
 8007dcc:	bff00000 	.word	0xbff00000
 8007dd0:	08007f08 	.word	0x08007f08
 8007dd4:	08007ee8 	.word	0x08007ee8
 8007dd8:	3ff921fb 	.word	0x3ff921fb

08007ddc <fabs>:
 8007ddc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007de0:	4619      	mov	r1, r3
 8007de2:	4770      	bx	lr

08007de4 <_init>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr

08007df0 <_fini>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr
