
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008144  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008330  08008330  00018330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008458  08008458  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008458  08008458  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008458  08008458  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008460  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000098  080084f8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  080084f8  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fa5  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b99  00000000  00000000  000360a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  00039c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001004  00000000  00000000  0003b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9af  00000000  00000000  0003c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6bb  00000000  00000000  00058a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2c6d  00000000  00000000  0007514e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005814  00000000  00000000  00117dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0011d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000098 	.word	0x20000098
 8000204:	00000000 	.word	0x00000000
 8000208:	08008314 	.word	0x08008314

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000009c 	.word	0x2000009c
 8000224:	08008314 	.word	0x08008314

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b60:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b62:	4a4b      	ldr	r2, [pc, #300]	; (8000c90 <MX_ADC1_Init+0x140>)
 8000b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b88:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8e:	483f      	ldr	r0, [pc, #252]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b90:	f002 f956 	bl	8002e40 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b9a:	f000 ff43 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bb0:	f002 fa30 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 ff33 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bcc:	f002 fa22 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 ff25 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4829      	ldr	r0, [pc, #164]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000be8:	f002 fa14 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 ff17 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c04:	f002 fa06 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c0e:	f000 ff09 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c12:	230c      	movs	r3, #12
 8000c14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c20:	f002 f9f8 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c2a:	f000 fefb 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c2e:	230d      	movs	r3, #13
 8000c30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c32:	2306      	movs	r3, #6
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c3c:	f002 f9ea 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c46:	f000 feed 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c58:	f002 f9dc 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c62:	f000 fedf 	bl	8001a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c66:	230f      	movs	r3, #15
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c74:	f002 f9ce 	bl	8003014 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c7e:	f000 fed1 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000b4 	.word	0x200000b4
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <HAL_ADC_MspInit+0xe8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d15f      	bne.n	8000d74 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cfc:	233f      	movs	r3, #63	; 0x3f
 8000cfe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481e      	ldr	r0, [pc, #120]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000d0c:	f002 ffc0 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <HAL_ADC_MspInit+0xf4>)
 8000d20:	f002 ffb6 	bl	8003c90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d5a:	f002 fba3 	bl	80034a4 <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000d64:	f000 fe5e 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d6c:	621a      	str	r2, [r3, #32]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012400 	.word	0x40012400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40010c00 	.word	0x40010c00
 8000d8c:	200000e4 	.word	0x200000e4
 8000d90:	40020008 	.word	0x40020008

08000d94 <display_init>:
uint8_t display_7seg_map[10] = { 0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41,
		0x1f, 0x01, 0x09 }; // 0->9
uint16_t display_index = 0;
uint8_t spi_buffer = 0xff;

void display_init() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9e:	4802      	ldr	r0, [pc, #8]	; (8000da8 <display_init+0x14>)
 8000da0:	f003 f90a 	bl	8003fb8 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40011000 	.word	0x40011000

08000dac <display_run>:

void display_run() {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

	spi_buffer = display_buffer[display_index];
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <display_run+0xe4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <display_run+0xe8>)
 8000db8:	5c9a      	ldrb	r2, [r3, r2]
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <display_run+0xec>)
 8000dbc:	701a      	strb	r2, [r3, #0]
	switch (display_index) {
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <display_run+0xe4>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d02c      	beq.n	8000e20 <display_run+0x74>
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	dc3d      	bgt.n	8000e46 <display_run+0x9a>
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <display_run+0x28>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d013      	beq.n	8000dfa <display_run+0x4e>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
		break;
	default:
		break;
 8000dd2:	e038      	b.n	8000e46 <display_run+0x9a>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dda:	4830      	ldr	r0, [pc, #192]	; (8000e9c <display_run+0xf0>)
 8000ddc:	f003 f8ec 	bl	8003fb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de6:	482d      	ldr	r0, [pc, #180]	; (8000e9c <display_run+0xf0>)
 8000de8:	f003 f8e6 	bl	8003fb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	482a      	ldr	r0, [pc, #168]	; (8000e9c <display_run+0xf0>)
 8000df4:	f003 f8e0 	bl	8003fb8 <HAL_GPIO_WritePin>
		break;
 8000df8:	e026      	b.n	8000e48 <display_run+0x9c>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e00:	4826      	ldr	r0, [pc, #152]	; (8000e9c <display_run+0xf0>)
 8000e02:	f003 f8d9 	bl	8003fb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0c:	4823      	ldr	r0, [pc, #140]	; (8000e9c <display_run+0xf0>)
 8000e0e:	f003 f8d3 	bl	8003fb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	4820      	ldr	r0, [pc, #128]	; (8000e9c <display_run+0xf0>)
 8000e1a:	f003 f8cd 	bl	8003fb8 <HAL_GPIO_WritePin>
		break;
 8000e1e:	e013      	b.n	8000e48 <display_run+0x9c>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <display_run+0xf0>)
 8000e28:	f003 f8c6 	bl	8003fb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e32:	481a      	ldr	r0, [pc, #104]	; (8000e9c <display_run+0xf0>)
 8000e34:	f003 f8c0 	bl	8003fb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	4817      	ldr	r0, [pc, #92]	; (8000e9c <display_run+0xf0>)
 8000e40:	f003 f8ba 	bl	8003fb8 <HAL_GPIO_WritePin>
		break;
 8000e44:	e000      	b.n	8000e48 <display_run+0x9c>
		break;
 8000e46:	bf00      	nop
	}

	display_index = (display_index + 1) % 3;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <display_run+0xe4>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <display_run+0xf4>)
 8000e50:	fb83 3102 	smull	r3, r1, r3, r2
 8000e54:	17d3      	asrs	r3, r2, #31
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	460b      	mov	r3, r1
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	440b      	add	r3, r1
 8000e5e:	1ad1      	subs	r1, r2, r3
 8000e60:	b28a      	uxth	r2, r1
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <display_run+0xe4>)
 8000e64:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <display_run+0xf8>)
 8000e6e:	f003 f8a3 	bl	8003fb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 1, 1);
 8000e72:	2301      	movs	r3, #1
 8000e74:	2201      	movs	r2, #1
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <display_run+0xec>)
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <display_run+0xfc>)
 8000e7a:	f004 fd3d 	bl	80058f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <display_run+0xf8>)
 8000e86:	f003 f897 	bl	8003fb8 <HAL_GPIO_WritePin>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000012c 	.word	0x2000012c
 8000e94:	20000128 	.word	0x20000128
 8000e98:	2000000a 	.word	0x2000000a
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	55555556 	.word	0x55555556
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	20000280 	.word	0x20000280

08000eac <display_7seg>:

void display_7seg(int num){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	display_buffer[0] = display_7seg_map[num/10];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <display_7seg+0x48>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1092      	asrs	r2, r2, #2
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <display_7seg+0x4c>)
 8000ec4:	5cd2      	ldrb	r2, [r2, r3]
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <display_7seg+0x50>)
 8000ec8:	701a      	strb	r2, [r3, #0]
	display_buffer[1] = display_7seg_map[num%10];
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <display_7seg+0x48>)
 8000ece:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed2:	109a      	asrs	r2, r3, #2
 8000ed4:	17cb      	asrs	r3, r1, #31
 8000ed6:	1ad2      	subs	r2, r2, r3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1aca      	subs	r2, r1, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <display_7seg+0x4c>)
 8000ee4:	5c9a      	ldrb	r2, [r3, r2]
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <display_7seg+0x50>)
 8000ee8:	705a      	strb	r2, [r3, #1]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	66666667 	.word	0x66666667
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000128 	.word	0x20000128

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_DMA_Init+0x38>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <MX_DMA_Init+0x38>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_DMA_Init+0x38>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200b      	movs	r0, #11
 8000f24:	f002 fa87 	bl	8003436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f28:	200b      	movs	r0, #11
 8000f2a:	f002 faa0 	bl	800346e <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <gamepad_init>:
uint8_t m1 = 0;
uint8_t m2 = 0;
uint8_t thumbl = 0;
uint8_t thumbr = 0;

int gamepad_init(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, _GAMEPAD_RECEIVER_ADDR, 10, 100) != HAL_OK) return 0;
 8000f40:	2364      	movs	r3, #100	; 0x64
 8000f42:	220a      	movs	r2, #10
 8000f44:	21aa      	movs	r1, #170	; 0xaa
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <gamepad_init+0x34>)
 8000f48:	f003 fc18 	bl	800477c <HAL_I2C_IsDeviceReady>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <gamepad_init+0x1a>
 8000f52:	2300      	movs	r3, #0
 8000f54:	e009      	b.n	8000f6a <gamepad_init+0x2e>
	is_receiver_connect = 1;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <gamepad_init+0x38>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <gamepad_init+0x3c>)
 8000f64:	f003 f828 	bl	8003fb8 <HAL_GPIO_WritePin>
	return 1;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000184 	.word	0x20000184
 8000f74:	20000130 	.word	0x20000130
 8000f78:	40011000 	.word	0x40011000

08000f7c <_read_16>:

int16_t _read_16(uint8_t b1,uint8_t b2){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
    // Read and return a 16-bit signed little endian value from 2 bytes
    int16_t raw = (b1 << 8) | b2;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	81fb      	strh	r3, [r7, #14]
    if (raw & (1 << 15)){
 8000f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da02      	bge.n	8000fa8 <_read_16+0x2c>
        return (raw - (1 << 16));
 8000fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa6:	e001      	b.n	8000fac <_read_16+0x30>
    	// sign bit is set
    } else{
    	return raw;
 8000fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    }
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <_read_32>:

int32_t _read_32(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4){
 8000fb6:	b490      	push	{r4, r7}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71bb      	strb	r3, [r7, #6]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	717b      	strb	r3, [r7, #5]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	713b      	strb	r3, [r7, #4]
    // Read and return a 32-bit signed little endian value from 2 bytes
    int32_t raw = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	061a      	lsls	r2, r3, #24
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
    if (raw & (1 << 31)){
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da01      	bge.n	8000ff4 <_read_32+0x3e>
        return (raw - (1 << 32));
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	e000      	b.n	8000ff6 <_read_32+0x40>
    	// sign bit is set
    } else{
    	return raw;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc90      	pop	{r4, r7}
 8000ffe:	4770      	bx	lr

08001000 <_convert_data>:

void _convert_data(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	dpad_left = (dpad >> _DPAD_LEFT) & 1;
 8001004:	4b57      	ldr	r3, [pc, #348]	; (8001164 <_convert_data+0x164>)
 8001006:	f993 3000 	ldrsb.w	r3, [r3]
 800100a:	10db      	asrs	r3, r3, #3
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b54      	ldr	r3, [pc, #336]	; (8001168 <_convert_data+0x168>)
 8001018:	701a      	strb	r2, [r3, #0]
	dpad_up = (dpad >> _DPAD_UP) & 1;
 800101a:	4b52      	ldr	r3, [pc, #328]	; (8001164 <_convert_data+0x164>)
 800101c:	f993 3000 	ldrsb.w	r3, [r3]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b50      	ldr	r3, [pc, #320]	; (800116c <_convert_data+0x16c>)
 800102a:	701a      	strb	r2, [r3, #0]
	dpad_down = (dpad >> _DPAD_DOWN) & 1;
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <_convert_data+0x164>)
 800102e:	f993 3000 	ldrsb.w	r3, [r3]
 8001032:	105b      	asrs	r3, r3, #1
 8001034:	b25b      	sxtb	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <_convert_data+0x170>)
 8001040:	701a      	strb	r2, [r3, #0]
	dpad_right = (dpad >> _DPAD_RIGHT) & 1;
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <_convert_data+0x164>)
 8001044:	f993 3000 	ldrsb.w	r3, [r3]
 8001048:	109b      	asrs	r3, r3, #2
 800104a:	b25b      	sxtb	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b47      	ldr	r3, [pc, #284]	; (8001174 <_convert_data+0x174>)
 8001056:	701a      	strb	r2, [r3, #0]
	thumbl = (buttons >> _BUTTON_THUMB_L) & 1;
 8001058:	4b47      	ldr	r3, [pc, #284]	; (8001178 <_convert_data+0x178>)
 800105a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105e:	121b      	asrs	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b44      	ldr	r3, [pc, #272]	; (800117c <_convert_data+0x17c>)
 800106c:	701a      	strb	r2, [r3, #0]
	thumbr = (buttons >> _BUTTON_THUMB_R) & 1;
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <_convert_data+0x178>)
 8001070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001074:	125b      	asrs	r3, r3, #9
 8001076:	b21b      	sxth	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <_convert_data+0x180>)
 8001082:	701a      	strb	r2, [r3, #0]
	a = (buttons >> _BUTTON_A) & 1;
 8001084:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <_convert_data+0x178>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <_convert_data+0x184>)
 8001094:	701a      	strb	r2, [r3, #0]
	b = (buttons >> _BUTTON_B) & 1;
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <_convert_data+0x178>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	105b      	asrs	r3, r3, #1
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <_convert_data+0x188>)
 80010aa:	701a      	strb	r2, [r3, #0]
	x = (buttons >> _BUTTON_X) & 1;
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <_convert_data+0x178>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	109b      	asrs	r3, r3, #2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <_convert_data+0x18c>)
 80010c0:	701a      	strb	r2, [r3, #0]
	y = (buttons >> _BUTTON_Y) & 1;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <_convert_data+0x178>)
 80010c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c8:	10db      	asrs	r3, r3, #3
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <_convert_data+0x190>)
 80010d6:	701a      	strb	r2, [r3, #0]
	l1 = (buttons >> _BUTTON_SHOULDER_L) & 1;
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <_convert_data+0x178>)
 80010da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010de:	111b      	asrs	r3, r3, #4
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <_convert_data+0x194>)
 80010ec:	701a      	strb	r2, [r3, #0]
	r1 = (buttons >> _BUTTON_SHOULDER_R) & 1;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <_convert_data+0x178>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	115b      	asrs	r3, r3, #5
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <_convert_data+0x198>)
 8001102:	701a      	strb	r2, [r3, #0]
	l2 = (buttons >> _BUTTON_TRIGGER_L) & 1;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <_convert_data+0x178>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	119b      	asrs	r3, r3, #6
 800110c:	b21b      	sxth	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <_convert_data+0x19c>)
 8001118:	701a      	strb	r2, [r3, #0]
	r2 = (buttons >> _BUTTON_TRIGGER_R) & 1;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <_convert_data+0x178>)
 800111c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001120:	11db      	asrs	r3, r3, #7
 8001122:	b21b      	sxth	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <_convert_data+0x1a0>)
 800112e:	701a      	strb	r2, [r3, #0]
	m1 = (buttons >> _MISC_BUTTON_M1) & 1;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_convert_data+0x178>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	105b      	asrs	r3, r3, #1
 8001138:	b21b      	sxth	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <_convert_data+0x1a4>)
 8001144:	701a      	strb	r2, [r3, #0]
	m2 = (buttons >> _MISC_BUTTON_M2) & 1;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <_convert_data+0x178>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	109b      	asrs	r3, r3, #2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_convert_data+0x1a8>)
 800115a:	701a      	strb	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000156 	.word	0x20000156
 8001168:	20000174 	.word	0x20000174
 800116c:	20000175 	.word	0x20000175
 8001170:	20000176 	.word	0x20000176
 8001174:	20000177 	.word	0x20000177
 8001178:	20000170 	.word	0x20000170
 800117c:	20000182 	.word	0x20000182
 8001180:	20000183 	.word	0x20000183
 8001184:	20000178 	.word	0x20000178
 8001188:	20000179 	.word	0x20000179
 800118c:	2000017a 	.word	0x2000017a
 8001190:	2000017b 	.word	0x2000017b
 8001194:	2000017c 	.word	0x2000017c
 8001198:	2000017d 	.word	0x2000017d
 800119c:	2000017e 	.word	0x2000017e
 80011a0:	2000017f 	.word	0x2000017f
 80011a4:	20000180 	.word	0x20000180
 80011a8:	20000181 	.word	0x20000181

080011ac <gamepad_update>:

void gamepad_update(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af02      	add	r7, sp, #8
	if(is_receiver_connect == 0) return;
 80011b2:	4b46      	ldr	r3, [pc, #280]	; (80012cc <gamepad_update+0x120>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8085 	beq.w	80012c6 <gamepad_update+0x11a>
	HAL_I2C_Master_Receive(&hi2c2, _GAMEPAD_RECEIVER_ADDR, result, 30, 50);
 80011bc:	2332      	movs	r3, #50	; 0x32
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	231e      	movs	r3, #30
 80011c2:	4a43      	ldr	r2, [pc, #268]	; (80012d0 <gamepad_update+0x124>)
 80011c4:	21aa      	movs	r1, #170	; 0xaa
 80011c6:	4843      	ldr	r0, [pc, #268]	; (80012d4 <gamepad_update+0x128>)
 80011c8:	f003 f86c 	bl	80042a4 <HAL_I2C_Master_Receive>
	if(result[0] == 1) is_gamepad_connect = 1;
 80011cc:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <gamepad_update+0x124>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d103      	bne.n	80011dc <gamepad_update+0x30>
 80011d4:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <gamepad_update+0x12c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e002      	b.n	80011e2 <gamepad_update+0x36>
	else is_gamepad_connect = 0;
 80011dc:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <gamepad_update+0x12c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]

	if(is_gamepad_connect == 1){
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <gamepad_update+0x12c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d16a      	bne.n	80012c0 <gamepad_update+0x114>
		dpad = result[1];
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <gamepad_update+0x124>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <gamepad_update+0x130>)
 80011f2:	701a      	strb	r2, [r3, #0]
		aLX = _read_32(result[2], result[3], result[4], result[5]);
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <gamepad_update+0x124>)
 80011f6:	7898      	ldrb	r0, [r3, #2]
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <gamepad_update+0x124>)
 80011fa:	78d9      	ldrb	r1, [r3, #3]
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <gamepad_update+0x124>)
 80011fe:	791a      	ldrb	r2, [r3, #4]
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <gamepad_update+0x124>)
 8001202:	795b      	ldrb	r3, [r3, #5]
 8001204:	f7ff fed7 	bl	8000fb6 <_read_32>
 8001208:	4603      	mov	r3, r0
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <gamepad_update+0x134>)
 800120c:	6013      	str	r3, [r2, #0]
		aLY = _read_32(result[6], result[7], result[8], result[9]);
 800120e:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <gamepad_update+0x124>)
 8001210:	7998      	ldrb	r0, [r3, #6]
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <gamepad_update+0x124>)
 8001214:	79d9      	ldrb	r1, [r3, #7]
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <gamepad_update+0x124>)
 8001218:	7a1a      	ldrb	r2, [r3, #8]
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <gamepad_update+0x124>)
 800121c:	7a5b      	ldrb	r3, [r3, #9]
 800121e:	f7ff feca 	bl	8000fb6 <_read_32>
 8001222:	4603      	mov	r3, r0
 8001224:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <gamepad_update+0x138>)
 8001226:	6013      	str	r3, [r2, #0]
		aRX = _read_32(result[10], result[11], result[12], result[13]);
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <gamepad_update+0x124>)
 800122a:	7a98      	ldrb	r0, [r3, #10]
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <gamepad_update+0x124>)
 800122e:	7ad9      	ldrb	r1, [r3, #11]
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <gamepad_update+0x124>)
 8001232:	7b1a      	ldrb	r2, [r3, #12]
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <gamepad_update+0x124>)
 8001236:	7b5b      	ldrb	r3, [r3, #13]
 8001238:	f7ff febd 	bl	8000fb6 <_read_32>
 800123c:	4603      	mov	r3, r0
 800123e:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <gamepad_update+0x13c>)
 8001240:	6013      	str	r3, [r2, #0]
		aRY = _read_32(result[14], result[15], result[16], result[17]);
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <gamepad_update+0x124>)
 8001244:	7b98      	ldrb	r0, [r3, #14]
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <gamepad_update+0x124>)
 8001248:	7bd9      	ldrb	r1, [r3, #15]
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <gamepad_update+0x124>)
 800124c:	7c1a      	ldrb	r2, [r3, #16]
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <gamepad_update+0x124>)
 8001250:	7c5b      	ldrb	r3, [r3, #17]
 8001252:	f7ff feb0 	bl	8000fb6 <_read_32>
 8001256:	4603      	mov	r3, r0
 8001258:	4a24      	ldr	r2, [pc, #144]	; (80012ec <gamepad_update+0x140>)
 800125a:	6013      	str	r3, [r2, #0]
		al2 = _read_32(result[18], result[19], result[20], result[21]);
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <gamepad_update+0x124>)
 800125e:	7c98      	ldrb	r0, [r3, #18]
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <gamepad_update+0x124>)
 8001262:	7cd9      	ldrb	r1, [r3, #19]
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <gamepad_update+0x124>)
 8001266:	7d1a      	ldrb	r2, [r3, #20]
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <gamepad_update+0x124>)
 800126a:	7d5b      	ldrb	r3, [r3, #21]
 800126c:	f7ff fea3 	bl	8000fb6 <_read_32>
 8001270:	4603      	mov	r3, r0
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <gamepad_update+0x144>)
 8001274:	6013      	str	r3, [r2, #0]
		ar2 = _read_32(result[22], result[23], result[24], result[25]);
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <gamepad_update+0x124>)
 8001278:	7d98      	ldrb	r0, [r3, #22]
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <gamepad_update+0x124>)
 800127c:	7dd9      	ldrb	r1, [r3, #23]
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <gamepad_update+0x124>)
 8001280:	7e1a      	ldrb	r2, [r3, #24]
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <gamepad_update+0x124>)
 8001284:	7e5b      	ldrb	r3, [r3, #25]
 8001286:	f7ff fe96 	bl	8000fb6 <_read_32>
 800128a:	4603      	mov	r3, r0
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <gamepad_update+0x148>)
 800128e:	6013      	str	r3, [r2, #0]
		buttons = _read_16(result[26], result[27]);
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <gamepad_update+0x124>)
 8001292:	7e9b      	ldrb	r3, [r3, #26]
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <gamepad_update+0x124>)
 8001296:	7ed2      	ldrb	r2, [r2, #27]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe6e 	bl	8000f7c <_read_16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <gamepad_update+0x14c>)
 80012a6:	801a      	strh	r2, [r3, #0]
		misc_buttons = _read_16(result[28], result[29]);
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <gamepad_update+0x124>)
 80012aa:	7f1b      	ldrb	r3, [r3, #28]
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <gamepad_update+0x124>)
 80012ae:	7f52      	ldrb	r2, [r2, #29]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe62 	bl	8000f7c <_read_16>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <gamepad_update+0x150>)
 80012be:	801a      	strh	r2, [r3, #0]
	}
	_convert_data();
 80012c0:	f7ff fe9e 	bl	8001000 <_convert_data>
 80012c4:	e000      	b.n	80012c8 <gamepad_update+0x11c>
	if(is_receiver_connect == 0) return;
 80012c6:	bf00      	nop
}
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000130 	.word	0x20000130
 80012d0:	20000138 	.word	0x20000138
 80012d4:	20000184 	.word	0x20000184
 80012d8:	20000134 	.word	0x20000134
 80012dc:	20000156 	.word	0x20000156
 80012e0:	20000158 	.word	0x20000158
 80012e4:	2000015c 	.word	0x2000015c
 80012e8:	20000160 	.word	0x20000160
 80012ec:	20000164 	.word	0x20000164
 80012f0:	20000168 	.word	0x20000168
 80012f4:	2000016c 	.word	0x2000016c
 80012f8:	20000170 	.word	0x20000170
 80012fc:	20000172 	.word	0x20000172

08001300 <gamepad_calculate_leff_joystick>:

int gamepad_calculate_leff_joystick(){
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
	if(is_gamepad_connect == 0) return -1;
 8001306:	4b60      	ldr	r3, [pc, #384]	; (8001488 <gamepad_calculate_leff_joystick+0x188>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <gamepad_calculate_leff_joystick+0x14>
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e0ae      	b.n	8001472 <gamepad_calculate_leff_joystick+0x172>
    int dir = -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	60fb      	str	r3, [r7, #12]

    int distance = (int)(sqrt(aLX*aLX + aLY*aLY));
 800131a:	4b5c      	ldr	r3, [pc, #368]	; (800148c <gamepad_calculate_leff_joystick+0x18c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a5b      	ldr	r2, [pc, #364]	; (800148c <gamepad_calculate_leff_joystick+0x18c>)
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	fb03 f202 	mul.w	r2, r3, r2
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <gamepad_calculate_leff_joystick+0x190>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4959      	ldr	r1, [pc, #356]	; (8001490 <gamepad_calculate_leff_joystick+0x190>)
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	4413      	add	r3, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8c9 	bl	80004cc <__aeabi_i2d>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f006 fc8b 	bl	8007c5c <sqrt>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fbd7 	bl	8000b00 <__aeabi_d2iz>
 8001352:	4603      	mov	r3, r0
 8001354:	607b      	str	r3, [r7, #4]

    if (distance < 15){
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0e      	cmp	r3, #14
 800135a:	dc06      	bgt.n	800136a <gamepad_calculate_leff_joystick+0x6a>
        distance = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
        dir = -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	60fb      	str	r3, [r7, #12]
        return dir;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	e083      	b.n	8001472 <gamepad_calculate_leff_joystick+0x172>
    }else if (distance > 100){
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	dd01      	ble.n	8001374 <gamepad_calculate_leff_joystick+0x74>
    	distance = 100;
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	607b      	str	r3, [r7, #4]
    }

    int angle = (int)(atan2(aLY, aLX) * 180 / 3.14);
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <gamepad_calculate_leff_joystick+0x190>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8a7 	bl	80004cc <__aeabi_i2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	4b42      	ldr	r3, [pc, #264]	; (800148c <gamepad_calculate_leff_joystick+0x18c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8a0 	bl	80004cc <__aeabi_i2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4620      	mov	r0, r4
 8001392:	4629      	mov	r1, r5
 8001394:	f006 fc60 	bl	8007c58 <atan2>
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <gamepad_calculate_leff_joystick+0x194>)
 800139e:	f7ff f8ff 	bl	80005a0 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	a335      	add	r3, pc, #212	; (adr r3, 8001480 <gamepad_calculate_leff_joystick+0x180>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa20 	bl	80007f4 <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fba0 	bl	8000b00 <__aeabi_d2iz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60bb      	str	r3, [r7, #8]

    if (angle < 0) angle += 360;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da03      	bge.n	80013d2 <gamepad_calculate_leff_joystick+0xd2>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013d0:	60bb      	str	r3, [r7, #8]

    if ((0 <= angle && angle < 10) || angle >= 350)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db02      	blt.n	80013de <gamepad_calculate_leff_joystick+0xde>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b09      	cmp	r3, #9
 80013dc:	dd03      	ble.n	80013e6 <gamepad_calculate_leff_joystick+0xe6>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80013e4:	db02      	blt.n	80013ec <gamepad_calculate_leff_joystick+0xec>
        dir = ROBOT_DIR_SR;
 80013e6:	2308      	movs	r3, #8
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e041      	b.n	8001470 <gamepad_calculate_leff_joystick+0x170>
    else if (15 <= angle && angle < 75)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b0e      	cmp	r3, #14
 80013f0:	dd05      	ble.n	80013fe <gamepad_calculate_leff_joystick+0xfe>
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	2b4a      	cmp	r3, #74	; 0x4a
 80013f6:	dc02      	bgt.n	80013fe <gamepad_calculate_leff_joystick+0xfe>
        dir = ROBOT_DIR_RB;
 80013f8:	2306      	movs	r3, #6
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e038      	b.n	8001470 <gamepad_calculate_leff_joystick+0x170>
    else if (80 <= angle && angle < 110)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b4f      	cmp	r3, #79	; 0x4f
 8001402:	dd05      	ble.n	8001410 <gamepad_calculate_leff_joystick+0x110>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b6d      	cmp	r3, #109	; 0x6d
 8001408:	dc02      	bgt.n	8001410 <gamepad_calculate_leff_joystick+0x110>
        dir = ROBOT_DIR_BW;
 800140a:	2309      	movs	r3, #9
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e02f      	b.n	8001470 <gamepad_calculate_leff_joystick+0x170>
    else if (115 <= angle && angle < 165)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b72      	cmp	r3, #114	; 0x72
 8001414:	dd05      	ble.n	8001422 <gamepad_calculate_leff_joystick+0x122>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2ba4      	cmp	r3, #164	; 0xa4
 800141a:	dc02      	bgt.n	8001422 <gamepad_calculate_leff_joystick+0x122>
        dir = ROBOT_DIR_LB;
 800141c:	2305      	movs	r3, #5
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e026      	b.n	8001470 <gamepad_calculate_leff_joystick+0x170>
    else if (170 <= angle && angle < 190)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2ba9      	cmp	r3, #169	; 0xa9
 8001426:	dd05      	ble.n	8001434 <gamepad_calculate_leff_joystick+0x134>
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2bbd      	cmp	r3, #189	; 0xbd
 800142c:	dc02      	bgt.n	8001434 <gamepad_calculate_leff_joystick+0x134>
        dir = ROBOT_DIR_SL;
 800142e:	2307      	movs	r3, #7
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e01d      	b.n	8001470 <gamepad_calculate_leff_joystick+0x170>
    else if (195 <= angle && angle < 255)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2bc2      	cmp	r3, #194	; 0xc2
 8001438:	dd05      	ble.n	8001446 <gamepad_calculate_leff_joystick+0x146>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2bfe      	cmp	r3, #254	; 0xfe
 800143e:	dc02      	bgt.n	8001446 <gamepad_calculate_leff_joystick+0x146>
        dir = ROBOT_DIR_LF;
 8001440:	2304      	movs	r3, #4
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e014      	b.n	8001470 <gamepad_calculate_leff_joystick+0x170>
    else if (260 <= angle && angle < 280)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800144c:	db06      	blt.n	800145c <gamepad_calculate_leff_joystick+0x15c>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001454:	da02      	bge.n	800145c <gamepad_calculate_leff_joystick+0x15c>
        dir = ROBOT_DIR_FW;
 8001456:	2303      	movs	r3, #3
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e009      	b.n	8001470 <gamepad_calculate_leff_joystick+0x170>
    else if (285 <= angle && angle < 345)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001462:	dd05      	ble.n	8001470 <gamepad_calculate_leff_joystick+0x170>
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800146a:	dc01      	bgt.n	8001470 <gamepad_calculate_leff_joystick+0x170>
        dir = ROBOT_DIR_RF;
 800146c:	2302      	movs	r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
    return dir;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bdb0      	pop	{r4, r5, r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	40091eb8 	.word	0x40091eb8
 8001488:	20000134 	.word	0x20000134
 800148c:	20000158 	.word	0x20000158
 8001490:	2000015c 	.word	0x2000015c
 8001494:	40668000 	.word	0x40668000

08001498 <gamepad_run_tele>:

int sm_pos = 1;
void gamepad_run_tele(int accel){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	static int last_dir = -1;
	int my_dir = -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	60fb      	str	r3, [r7, #12]
	my_dir = gamepad_calculate_leff_joystick();
 80014a6:	f7ff ff2b 	bl	8001300 <gamepad_calculate_leff_joystick>
 80014aa:	60f8      	str	r0, [r7, #12]
	if(b) {
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <gamepad_run_tele+0x100>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <gamepad_run_tele+0x24>
		servo_set_angle(SERVO1, 0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fd08 	bl	8001ecc <servo_set_angle>
	}
	if(x){
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <gamepad_run_tele+0x104>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <gamepad_run_tele+0x34>
		servo_set_angle(SERVO1, 45);
 80014c4:	212d      	movs	r1, #45	; 0x2d
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 fd00 	bl	8001ecc <servo_set_angle>
	}
	if(a){
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <gamepad_run_tele+0x108>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00a      	beq.n	80014ea <gamepad_run_tele+0x52>
		if(sm_pos == 1){
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <gamepad_run_tele+0x10c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <gamepad_run_tele+0x52>
			sm_pos = 0;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <gamepad_run_tele+0x10c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			moveSM(-4);
 80014e2:	f06f 0003 	mvn.w	r0, #3
 80014e6:	f000 fdfb 	bl	80020e0 <moveSM>
		}
	}
	if(y){
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <gamepad_run_tele+0x110>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <gamepad_run_tele+0x6e>
		if(sm_pos == 0){
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <gamepad_run_tele+0x10c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <gamepad_run_tele+0x6e>
			sm_pos = 1;
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <gamepad_run_tele+0x10c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
			moveSM(4);
 8001500:	2004      	movs	r0, #4
 8001502:	f000 fded 	bl	80020e0 <moveSM>
		}
	}
	if(dpad_up){
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <gamepad_run_tele+0x114>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <gamepad_run_tele+0x7a>
		my_dir = ROBOT_DIR_FW;
 800150e:	2303      	movs	r3, #3
 8001510:	60fb      	str	r3, [r7, #12]
	}
	if(dpad_down){
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <gamepad_run_tele+0x118>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <gamepad_run_tele+0x86>
		my_dir = ROBOT_DIR_BW;
 800151a:	2309      	movs	r3, #9
 800151c:	60fb      	str	r3, [r7, #12]
	}
	if(dpad_left){
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <gamepad_run_tele+0x11c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <gamepad_run_tele+0x92>
		my_dir = ROBOT_DIR_L;
 8001526:	230a      	movs	r3, #10
 8001528:	60fb      	str	r3, [r7, #12]
	}
	if(dpad_right){
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <gamepad_run_tele+0x120>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <gamepad_run_tele+0x9e>
		my_dir = ROBOT_DIR_R;
 8001532:	2301      	movs	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
	}
	if (my_dir != last_dir) // got new direction command
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <gamepad_run_tele+0x124>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d006      	beq.n	800154e <gamepad_run_tele+0xb6>
	{
        run_speed = MIN_SPEED; // reset speed
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <gamepad_run_tele+0x128>)
 8001542:	221e      	movs	r2, #30
 8001544:	601a      	str	r2, [r3, #0]
        turn_speed = MIN_SPEED;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <gamepad_run_tele+0x12c>)
 8001548:	221e      	movs	r2, #30
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e01d      	b.n	800158a <gamepad_run_tele+0xf2>
	}else {
		run_speed = run_speed + accel;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <gamepad_run_tele+0x128>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a1a      	ldr	r2, [pc, #104]	; (80015c0 <gamepad_run_tele+0x128>)
 8001558:	6013      	str	r3, [r2, #0]
		if(run_speed > MAX_SPEED) run_speed = MAX_SPEED;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <gamepad_run_tele+0x128>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b28      	cmp	r3, #40	; 0x28
 8001560:	dd02      	ble.n	8001568 <gamepad_run_tele+0xd0>
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <gamepad_run_tele+0x128>)
 8001564:	2228      	movs	r2, #40	; 0x28
 8001566:	601a      	str	r2, [r3, #0]
		turn_speed = turn_speed + accel/2;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0fda      	lsrs	r2, r3, #31
 800156c:	4413      	add	r3, r2
 800156e:	105b      	asrs	r3, r3, #1
 8001570:	461a      	mov	r2, r3
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <gamepad_run_tele+0x12c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <gamepad_run_tele+0x12c>)
 800157a:	6013      	str	r3, [r2, #0]
		if(turn_speed > MAX_SPEED) turn_speed = MAX_SPEED;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <gamepad_run_tele+0x12c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b28      	cmp	r3, #40	; 0x28
 8001582:	dd02      	ble.n	800158a <gamepad_run_tele+0xf2>
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <gamepad_run_tele+0x12c>)
 8001586:	2228      	movs	r2, #40	; 0x28
 8001588:	601a      	str	r2, [r3, #0]
	}
	runDir(my_dir);
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fc44 	bl	8001e18 <runDir>
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000179 	.word	0x20000179
 800159c:	2000017a 	.word	0x2000017a
 80015a0:	20000178 	.word	0x20000178
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	2000017b 	.word	0x2000017b
 80015ac:	20000175 	.word	0x20000175
 80015b0:	20000176 	.word	0x20000176
 80015b4:	20000174 	.word	0x20000174
 80015b8:	20000177 	.word	0x20000177
 80015bc:	20000010 	.word	0x20000010
 80015c0:	20000014 	.word	0x20000014
 80015c4:	20000018 	.word	0x20000018

080015c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015dc:	4b52      	ldr	r3, [pc, #328]	; (8001728 <MX_GPIO_Init+0x160>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a51      	ldr	r2, [pc, #324]	; (8001728 <MX_GPIO_Init+0x160>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <MX_GPIO_Init+0x160>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <MX_GPIO_Init+0x160>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a4b      	ldr	r2, [pc, #300]	; (8001728 <MX_GPIO_Init+0x160>)
 80015fa:	f043 0320 	orr.w	r3, r3, #32
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b49      	ldr	r3, [pc, #292]	; (8001728 <MX_GPIO_Init+0x160>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b46      	ldr	r3, [pc, #280]	; (8001728 <MX_GPIO_Init+0x160>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a45      	ldr	r2, [pc, #276]	; (8001728 <MX_GPIO_Init+0x160>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b43      	ldr	r3, [pc, #268]	; (8001728 <MX_GPIO_Init+0x160>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <MX_GPIO_Init+0x160>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a3f      	ldr	r2, [pc, #252]	; (8001728 <MX_GPIO_Init+0x160>)
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <MX_GPIO_Init+0x160>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001642:	483a      	ldr	r0, [pc, #232]	; (800172c <MX_GPIO_Init+0x164>)
 8001644:	f002 fcb8 	bl	8003fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8001648:	2200      	movs	r2, #0
 800164a:	f649 1102 	movw	r1, #39170	; 0x9902
 800164e:	4838      	ldr	r0, [pc, #224]	; (8001730 <MX_GPIO_Init+0x168>)
 8001650:	f002 fcb2 	bl	8003fb8 <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2124      	movs	r1, #36	; 0x24
 8001658:	4836      	ldr	r0, [pc, #216]	; (8001734 <MX_GPIO_Init+0x16c>)
 800165a:	f002 fcad 	bl	8003fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 800165e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2302      	movs	r3, #2
 800166e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	482d      	ldr	r0, [pc, #180]	; (800172c <MX_GPIO_Init+0x164>)
 8001678:	f002 fb0a 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 800167c:	f649 1302 	movw	r3, #39170	; 0x9902
 8001680:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2302      	movs	r3, #2
 800168c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4619      	mov	r1, r3
 8001694:	4826      	ldr	r0, [pc, #152]	; (8001730 <MX_GPIO_Init+0x168>)
 8001696:	f002 fafb 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin;
 800169a:	2304      	movs	r3, #4
 800169c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_DIR_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4619      	mov	r1, r3
 80016b0:	4820      	ldr	r0, [pc, #128]	; (8001734 <MX_GPIO_Init+0x16c>)
 80016b2:	f002 faed 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80016b6:	f24f 2308 	movw	r3, #61960	; 0xf208
 80016ba:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	481a      	ldr	r0, [pc, #104]	; (8001734 <MX_GPIO_Init+0x16c>)
 80016cc:	f002 fae0 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80016d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	4619      	mov	r1, r3
 80016e4:	4811      	ldr	r0, [pc, #68]	; (800172c <MX_GPIO_Init+0x164>)
 80016e6:	f002 fad3 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 80016ea:	2304      	movs	r3, #4
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	480e      	ldr	r0, [pc, #56]	; (8001738 <MX_GPIO_Init+0x170>)
 80016fe:	f002 fac7 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SM_DIR_Pin;
 8001702:	2320      	movs	r3, #32
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_DIR_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_GPIO_Init+0x16c>)
 800171a:	f002 fab9 	bl	8003c90 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40011000 	.word	0x40011000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011400 	.word	0x40011400

0800173c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C2_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <MX_I2C2_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C2_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_I2C2_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C2_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_I2C2_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_I2C2_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_I2C2_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_I2C2_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_I2C2_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_I2C2_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_I2C2_Init+0x50>)
 800177a:	f002 fc4f 	bl	800401c <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 f94e 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000184 	.word	0x20000184
 8001790:	40005800 	.word	0x40005800
 8001794:	000186a0 	.word	0x000186a0

08001798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a16      	ldr	r2, [pc, #88]	; (800180c <HAL_I2C_MspInit+0x74>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d124      	bne.n	8001802 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_I2C_MspInit+0x78>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_I2C_MspInit+0x78>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_I2C_MspInit+0x78>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	480b      	ldr	r0, [pc, #44]	; (8001814 <HAL_I2C_MspInit+0x7c>)
 80017e6:	f002 fa53 	bl	8003c90 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_I2C_MspInit+0x78>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_I2C_MspInit+0x78>)
 80017f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_I2C_MspInit+0x78>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40005800 	.word	0x40005800
 8001810:	40021000 	.word	0x40021000
 8001814:	40010c00 	.word	0x40010c00

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0a4      	sub	sp, #144	; 0x90
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181e:	f001 fa89 	bl	8002d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001822:	f000 f873 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001826:	f7ff fecf 	bl	80015c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800182a:	f7ff fb69 	bl	8000f00 <MX_DMA_Init>
  MX_ADC1_Init();
 800182e:	f7ff f98f 	bl	8000b50 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001832:	f001 f971 	bl	8002b18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001836:	f001 f999 	bl	8002b6c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800183a:	f7ff ff7f 	bl	800173c <MX_I2C2_Init>
  MX_SPI1_Init();
 800183e:	f000 fbcf 	bl	8001fe0 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001842:	f000 ff03 	bl	800264c <MX_TIM8_Init>
  MX_TIM4_Init();
 8001846:	f000 fdfd 	bl	8002444 <MX_TIM4_Init>
  MX_TIM5_Init();
 800184a:	f000 fe89 	bl	8002560 <MX_TIM5_Init>
  MX_TIM2_Init();
 800184e:	f000 fd37 	bl	80022c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001852:	f000 fd81 	bl	8002358 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001856:	4828      	ldr	r0, [pc, #160]	; (80018f8 <main+0xe0>)
 8001858:	f004 fa88 	bl	8005d6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800185c:	2100      	movs	r1, #0
 800185e:	4827      	ldr	r0, [pc, #156]	; (80018fc <main+0xe4>)
 8001860:	f004 fb3c 	bl	8005edc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001864:	2104      	movs	r1, #4
 8001866:	4825      	ldr	r0, [pc, #148]	; (80018fc <main+0xe4>)
 8001868:	f004 fb38 	bl	8005edc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800186c:	2108      	movs	r1, #8
 800186e:	4823      	ldr	r0, [pc, #140]	; (80018fc <main+0xe4>)
 8001870:	f004 fb34 	bl	8005edc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001874:	210c      	movs	r1, #12
 8001876:	4821      	ldr	r0, [pc, #132]	; (80018fc <main+0xe4>)
 8001878:	f004 fb30 	bl	8005edc <HAL_TIM_PWM_Start>
  setTimer(0, 10);
 800187c:	210a      	movs	r1, #10
 800187e:	2000      	movs	r0, #0
 8001880:	f000 fb6e 	bl	8001f60 <setTimer>
  setTimer(1, 1000);
 8001884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001888:	2001      	movs	r0, #1
 800188a:	f000 fb69 	bl	8001f60 <setTimer>
  servo_init(SERVO1);
 800188e:	2000      	movs	r0, #0
 8001890:	f000 fb08 	bl	8001ea4 <servo_init>
  gamepad_init();
 8001894:	f7ff fb52 	bl	8000f3c <gamepad_init>
  display_init();
 8001898:	f7ff fa7c 	bl	8000d94 <display_init>
  display_7seg(69);
 800189c:	2045      	movs	r0, #69	; 0x45
 800189e:	f7ff fb05 	bl	8000eac <display_7seg>
  int len = 17;
 80018a2:	2311      	movs	r3, #17
 80018a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int note[17] = { NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <main+0xe8>)
 80018aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ae:	4611      	mov	r1, r2
 80018b0:	2244      	movs	r2, #68	; 0x44
 80018b2:	4618      	mov	r0, r3
 80018b4:	f006 f9c2 	bl	8007c3c <memcpy>
		  	  	  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5};
  int dur[17] = { 1000, 500, 500, 500, 200,
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <main+0xec>)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4611      	mov	r1, r2
 80018be:	2244      	movs	r2, #68	; 0x44
 80018c0:	4618      	mov	r0, r3
 80018c2:	f006 f9bb 	bl	8007c3c <memcpy>
		  500, 500, 500, 500, 200,
		  500, 500, 500, 200,
		  500, 500, 500};

  tone_play(note, dur, len);
 80018c6:	1d39      	adds	r1, r7, #4
 80018c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 f8f9 	bl	8002ac8 <tone_play>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <main+0xf0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d1fb      	bne.n	80018d6 <main+0xbe>
		  setTimer(0, 10);
 80018de:	210a      	movs	r1, #10
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 fb3d 	bl	8001f60 <setTimer>
		  ledBlink();
 80018e6:	f000 f883 	bl	80019f0 <ledBlink>
		  gamepad_update();
 80018ea:	f7ff fc5f 	bl	80011ac <gamepad_update>
		  gamepad_run_tele(2);
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7ff fdd2 	bl	8001498 <gamepad_run_tele>
	  if(timer_flag[0] == 1){
 80018f4:	e7ef      	b.n	80018d6 <main+0xbe>
 80018f6:	bf00      	nop
 80018f8:	200002dc 	.word	0x200002dc
 80018fc:	200003fc 	.word	0x200003fc
 8001900:	08008330 	.word	0x08008330
 8001904:	08008374 	.word	0x08008374
 8001908:	20000230 	.word	0x20000230

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b096      	sub	sp, #88	; 0x58
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001916:	2228      	movs	r2, #40	; 0x28
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f006 f95c 	bl	8007bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001940:	2301      	movs	r3, #1
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194e:	2301      	movs	r3, #1
 8001950:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001952:	2302      	movs	r3, #2
 8001954:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800195a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800195c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001960:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fa7c 	bl	8004e64 <HAL_RCC_OscConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001972:	f000 f857 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001976:	230f      	movs	r3, #15
 8001978:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	2102      	movs	r1, #2
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fce8 	bl	8005368 <HAL_RCC_ClockConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800199e:	f000 f841 	bl	8001a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019a2:	2302      	movs	r3, #2
 80019a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fe68 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80019ba:	f000 f833 	bl	8001a24 <Error_Handler>
  }
}
 80019be:	bf00      	nop
 80019c0:	3758      	adds	r7, #88	; 0x58
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d6:	d107      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x22>
		timerRun(0);
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 fad9 	bl	8001f90 <timerRun>
		timerRun(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fad6 	bl	8001f90 <timerRun>
		display_run();
 80019e4:	f7ff f9e2 	bl	8000dac <display_run>
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <ledBlink>:



int led_debug_count = 0;
void ledBlink(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	led_debug_count++;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <ledBlink+0x2c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <ledBlink+0x2c>)
 80019fc:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <ledBlink+0x2c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d107      	bne.n	8001a16 <ledBlink+0x26>
		led_debug_count = 0;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <ledBlink+0x2c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <ledBlink+0x30>)
 8001a12:	f002 fae9 	bl	8003fe8 <HAL_GPIO_TogglePin>
	}
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001d8 	.word	0x200001d8
 8001a20:	40011000 	.word	0x40011000

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>
	...

08001a30 <setSpeed>:
int run_speed = MIN_SPEED;
int turn_speed = MIN_SPEED;

uint8_t speed_duty_cycle = 0;

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
	speed_duty_cycle = duty_cycle;
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <setSpeed+0x70>)
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	7013      	strb	r3, [r2, #0]
	switch (dc){
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d822      	bhi.n	8001a94 <setSpeed+0x64>
 8001a4e:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <setSpeed+0x24>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a71 	.word	0x08001a71
 8001a5c:	08001a7d 	.word	0x08001a7d
 8001a60:	08001a89 	.word	0x08001a89
	case 1:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, speed_duty_cycle);
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <setSpeed+0x70>)
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <setSpeed+0x74>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001a6e:	e011      	b.n	8001a94 <setSpeed+0x64>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, speed_duty_cycle);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <setSpeed+0x70>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <setSpeed+0x74>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001a7a:	e00b      	b.n	8001a94 <setSpeed+0x64>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, speed_duty_cycle);
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <setSpeed+0x70>)
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <setSpeed+0x74>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001a86:	e005      	b.n	8001a94 <setSpeed+0x64>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, speed_duty_cycle);
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <setSpeed+0x70>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <setSpeed+0x74>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001a92:	bf00      	nop
	}
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200001dc 	.word	0x200001dc
 8001aa4:	200003fc 	.word	0x200003fc

08001aa8 <dc1Move>:

void dc1Move(int duty_cycle){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001abc:	480e      	ldr	r0, [pc, #56]	; (8001af8 <dc1Move+0x50>)
 8001abe:	f002 fa7b 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff ffb1 	bl	8001a30 <setSpeed>
	}
	if(duty_cycle < 0){
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da0d      	bge.n	8001af0 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <dc1Move+0x50>)
 8001adc:	f002 fa6c 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff ffa0 	bl	8001a30 <setSpeed>
	}
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40011000 	.word	0x40011000

08001afc <dc2Move>:

void dc2Move(int duty_cycle){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <dc2Move+0x50>)
 8001b12:	f002 fa51 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f7ff ff87 	bl	8001a30 <setSpeed>
	}
	if(duty_cycle < 0){
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0d      	bge.n	8001b44 <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <dc2Move+0x50>)
 8001b30:	f002 fa42 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	425b      	negs	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f7ff ff76 	bl	8001a30 <setSpeed>
	}
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40011000 	.word	0x40011000

08001b50 <dc3Move>:

void dc3Move(int duty_cycle){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0a      	blt.n	8001b74 <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2104      	movs	r1, #4
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <dc3Move+0x4c>)
 8001b64:	f002 fa28 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f7ff ff5e 	bl	8001a30 <setSpeed>
	}
	if(duty_cycle < 0){
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da0c      	bge.n	8001b94 <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <dc3Move+0x4c>)
 8001b80:	f002 fa1a 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	425b      	negs	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f7ff ff4e 	bl	8001a30 <setSpeed>
	}
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <dc4Move>:

void dc4Move(int duty_cycle){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0a      	blt.n	8001bc4 <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <dc4Move+0x4c>)
 8001bb4:	f002 fa00 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2004      	movs	r0, #4
 8001bc0:	f7ff ff36 	bl	8001a30 <setSpeed>
	}
	if(duty_cycle < 0){
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da0c      	bge.n	8001be4 <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <dc4Move+0x4c>)
 8001bd0:	f002 f9f2 	bl	8003fb8 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	425b      	negs	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2004      	movs	r0, #4
 8001be0:	f7ff ff26 	bl	8001a30 <setSpeed>
	}
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40010800 	.word	0x40010800

08001bf0 <stop>:


void stop(){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	dc1Move(0);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff ff57 	bl	8001aa8 <dc1Move>
	dc2Move(0);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff ff7e 	bl	8001afc <dc2Move>
	dc3Move(0);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff ffa5 	bl	8001b50 <dc3Move>
	dc4Move(0);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff ffca 	bl	8001ba0 <dc4Move>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <forward>:

void forward(){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	dc1Move(run_speed);
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <forward+0x30>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff45 	bl	8001aa8 <dc1Move>
	dc2Move(run_speed);
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <forward+0x30>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff6a 	bl	8001afc <dc2Move>
	dc3Move(run_speed);
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <forward+0x30>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff8f 	bl	8001b50 <dc3Move>
	dc4Move(run_speed);
 8001c32:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <forward+0x30>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ffb2 	bl	8001ba0 <dc4Move>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000014 	.word	0x20000014

08001c44 <backwards>:

void backwards(){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	dc1Move(-run_speed);
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <backwards+0x38>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff2a 	bl	8001aa8 <dc1Move>
	dc2Move(-run_speed);
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <backwards+0x38>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	425b      	negs	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff4e 	bl	8001afc <dc2Move>
	dc3Move(-run_speed);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <backwards+0x38>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	425b      	negs	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff72 	bl	8001b50 <dc3Move>
	dc4Move(-run_speed);
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <backwards+0x38>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	425b      	negs	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff94 	bl	8001ba0 <dc4Move>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000014 	.word	0x20000014

08001c80 <frontLeft>:

void frontLeft(){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff ff0f 	bl	8001aa8 <dc1Move>
	dc2Move(run_speed);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <frontLeft+0x28>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff34 	bl	8001afc <dc2Move>
	dc3Move(run_speed);
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <frontLeft+0x28>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff59 	bl	8001b50 <dc3Move>
	dc4Move(0); //stop
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff ff7e 	bl	8001ba0 <dc4Move>
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000014 	.word	0x20000014

08001cac <frontRight>:

void frontRight(){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	dc1Move(run_speed);
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <frontRight+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fef7 	bl	8001aa8 <dc1Move>
	dc2Move(0); //stop
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7ff ff1e 	bl	8001afc <dc2Move>
	dc3Move(0); //stop
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff ff45 	bl	8001b50 <dc3Move>
	dc4Move(run_speed);
 8001cc6:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <frontRight+0x28>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff68 	bl	8001ba0 <dc4Move>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000014 	.word	0x20000014

08001cd8 <backRight>:
void backRight(){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	dc1Move(0); //stop
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff fee3 	bl	8001aa8 <dc1Move>
	dc2Move(-run_speed);
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <backRight+0x2c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff07 	bl	8001afc <dc2Move>
	dc3Move(-run_speed);
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <backRight+0x2c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff2b 	bl	8001b50 <dc3Move>
	dc4Move(0); //stop
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff ff50 	bl	8001ba0 <dc4Move>
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000014 	.word	0x20000014

08001d08 <backLeft>:

void backLeft(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	dc1Move(-run_speed);
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <backLeft+0x2c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	425b      	negs	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fec8 	bl	8001aa8 <dc1Move>
	dc2Move(0); //stop
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff feef 	bl	8001afc <dc2Move>
	dc3Move(0); //stop
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff ff16 	bl	8001b50 <dc3Move>
	dc4Move(-run_speed);
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <backLeft+0x2c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	425b      	negs	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff38 	bl	8001ba0 <dc4Move>

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000014 	.word	0x20000014

08001d38 <right>:

void right(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	dc1Move(run_speed);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <right+0x34>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff feb1 	bl	8001aa8 <dc1Move>
	dc2Move(-run_speed);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <right+0x34>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	425b      	negs	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fed5 	bl	8001afc <dc2Move>
	dc3Move(-run_speed);
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <right+0x34>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	425b      	negs	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fef9 	bl	8001b50 <dc3Move>
	dc4Move(run_speed);
 8001d5e:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <right+0x34>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff1c 	bl	8001ba0 <dc4Move>
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000014 	.word	0x20000014

08001d70 <left>:

void left(){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	dc1Move(-run_speed);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <left+0x34>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	425b      	negs	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fe94 	bl	8001aa8 <dc1Move>
	dc2Move(run_speed);
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <left+0x34>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff feb9 	bl	8001afc <dc2Move>
	dc3Move(run_speed);
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <left+0x34>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fede 	bl	8001b50 <dc3Move>
	dc4Move(-run_speed);
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <left+0x34>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	425b      	negs	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff00 	bl	8001ba0 <dc4Move>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000014 	.word	0x20000014

08001da8 <rotateLeft>:

void rotateLeft(){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	dc1Move(-turn_speed);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <rotateLeft+0x34>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	425b      	negs	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fe78 	bl	8001aa8 <dc1Move>
	dc2Move(-turn_speed);
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <rotateLeft+0x34>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fe9c 	bl	8001afc <dc2Move>
	dc3Move(turn_speed);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <rotateLeft+0x34>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fec1 	bl	8001b50 <dc3Move>
	dc4Move(turn_speed);
 8001dce:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <rotateLeft+0x34>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fee4 	bl	8001ba0 <dc4Move>
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000018 	.word	0x20000018

08001de0 <rotateRight>:

void rotateRight(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	dc1Move(turn_speed);
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <rotateRight+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fe5d 	bl	8001aa8 <dc1Move>
	dc2Move(turn_speed);
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <rotateRight+0x34>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe82 	bl	8001afc <dc2Move>
	dc3Move(-turn_speed);
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <rotateRight+0x34>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	425b      	negs	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fea6 	bl	8001b50 <dc3Move>
	dc4Move(-turn_speed);
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <rotateRight+0x34>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	425b      	negs	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fec8 	bl	8001ba0 <dc4Move>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000018 	.word	0x20000018

08001e18 <runDir>:
	else
		count_test = 10;

}

void runDir(int dir){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	switch (dir) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d835      	bhi.n	8001e94 <runDir+0x7c>
 8001e28:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <runDir+0x18>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001e71 	.word	0x08001e71
 8001e34:	08001e89 	.word	0x08001e89
 8001e38:	08001e59 	.word	0x08001e59
 8001e3c:	08001e83 	.word	0x08001e83
 8001e40:	08001e77 	.word	0x08001e77
 8001e44:	08001e7d 	.word	0x08001e7d
 8001e48:	08001e65 	.word	0x08001e65
 8001e4c:	08001e5f 	.word	0x08001e5f
 8001e50:	08001e8f 	.word	0x08001e8f
 8001e54:	08001e6b 	.word	0x08001e6b
		case ROBOT_DIR_FW:
			forward();
 8001e58:	f7ff feda 	bl	8001c10 <forward>
			break;
 8001e5c:	e01d      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_SR:
			right();
 8001e5e:	f7ff ff6b 	bl	8001d38 <right>
			break;
 8001e62:	e01a      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_SL:
			left();
 8001e64:	f7ff ff84 	bl	8001d70 <left>
			break;
 8001e68:	e017      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_L:
			rotateLeft();
 8001e6a:	f7ff ff9d 	bl	8001da8 <rotateLeft>
			break;
 8001e6e:	e014      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_R:
			rotateRight();
 8001e70:	f7ff ffb6 	bl	8001de0 <rotateRight>
			break;
 8001e74:	e011      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_LB:
			backLeft();
 8001e76:	f7ff ff47 	bl	8001d08 <backLeft>
			break;
 8001e7a:	e00e      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_RB:
			backRight();
 8001e7c:	f7ff ff2c 	bl	8001cd8 <backRight>
			break;
 8001e80:	e00b      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_LF:
			frontLeft();
 8001e82:	f7ff fefd 	bl	8001c80 <frontLeft>
			break;
 8001e86:	e008      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_RF:
			frontRight();
 8001e88:	f7ff ff10 	bl	8001cac <frontRight>
			break;
 8001e8c:	e005      	b.n	8001e9a <runDir+0x82>
		case ROBOT_DIR_BW:
			backwards();
 8001e8e:	f7ff fed9 	bl	8001c44 <backwards>
			break;
 8001e92:	e002      	b.n	8001e9a <runDir+0x82>
		default:
			stop();
 8001e94:	f7ff feac 	bl	8001bf0 <stop>
			break;
 8001e98:	bf00      	nop
	}
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop

08001ea4 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8001eac:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <servo_init+0x20>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <servo_init+0x24>)
 8001eb8:	f004 f810 	bl	8005edc <HAL_TIM_PWM_Start>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000001c 	.word	0x2000001c
 8001ec8:	2000036c 	.word	0x2000036c

08001ecc <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db35      	blt.n	8001f48 <servo_set_angle+0x7c>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2bb4      	cmp	r3, #180	; 0xb4
 8001ee0:	dc32      	bgt.n	8001f48 <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2264      	movs	r2, #100	; 0x64
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <servo_set_angle+0x88>)
 8001eec:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef0:	441a      	add	r2, r3
 8001ef2:	11d2      	asrs	r2, r2, #7
 8001ef4:	17db      	asrs	r3, r3, #31
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	3319      	adds	r3, #25
 8001efa:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 8001efc:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <servo_set_angle+0x8c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <servo_set_angle+0x46>
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <servo_set_angle+0x90>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f10:	e01b      	b.n	8001f4a <servo_set_angle+0x7e>
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <servo_set_angle+0x8c>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d104      	bne.n	8001f28 <servo_set_angle+0x5c>
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <servo_set_angle+0x90>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6393      	str	r3, [r2, #56]	; 0x38
 8001f26:	e010      	b.n	8001f4a <servo_set_angle+0x7e>
 8001f28:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <servo_set_angle+0x8c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d104      	bne.n	8001f3e <servo_set_angle+0x72>
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <servo_set_angle+0x90>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001f3c:	e005      	b.n	8001f4a <servo_set_angle+0x7e>
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <servo_set_angle+0x90>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	e000      	b.n	8001f4a <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 8001f48:	bf00      	nop
}
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	b60b60b7 	.word	0xb60b60b7
 8001f58:	2000001c 	.word	0x2000001c
 8001f5c:	2000036c 	.word	0x2000036c

08001f60 <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8001f6a:	4907      	ldr	r1, [pc, #28]	; (8001f88 <setTimer+0x28>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001f74:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <setTimer+0x2c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	200001e0 	.word	0x200001e0
 8001f8c:	20000230 	.word	0x20000230

08001f90 <timerRun>:

void timerRun(int index){
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <timerRun+0x48>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	dd13      	ble.n	8001fcc <timerRun+0x3c>
		timer_counter[index]--;
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <timerRun+0x48>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	490a      	ldr	r1, [pc, #40]	; (8001fd8 <timerRun+0x48>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <timerRun+0x48>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	dc04      	bgt.n	8001fcc <timerRun+0x3c>
			timer_flag[index] = 1;
 8001fc2:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <timerRun+0x4c>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200001e0 	.word	0x200001e0
 8001fdc:	20000230 	.word	0x20000230

08001fe0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_SPI1_Init+0x64>)
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <MX_SPI1_Init+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_SPI1_Init+0x64>)
 8001fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_SPI1_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_SPI1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_SPI1_Init+0x64>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_SPI1_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_SPI1_Init+0x64>)
 800200c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_SPI1_Init+0x64>)
 8002014:	2208      	movs	r2, #8
 8002016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_SPI1_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_SPI1_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <MX_SPI1_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_SPI1_Init+0x64>)
 800202c:	220a      	movs	r2, #10
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_SPI1_Init+0x64>)
 8002032:	f003 fbdd 	bl	80057f0 <HAL_SPI_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800203c:	f7ff fcf2 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000280 	.word	0x20000280
 8002048:	40013000 	.word	0x40013000

0800204c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_SPI_MspInit+0x88>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d12f      	bne.n	80020cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_SPI_MspInit+0x8c>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_SPI_MspInit+0x8c>)
 8002072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_SPI_MspInit+0x8c>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_SPI_MspInit+0x8c>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_SPI_MspInit+0x8c>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_SPI_MspInit+0x8c>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800209c:	23b0      	movs	r3, #176	; 0xb0
 800209e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4619      	mov	r1, r3
 80020ae:	480b      	ldr	r0, [pc, #44]	; (80020dc <HAL_SPI_MspInit+0x90>)
 80020b0:	f001 fdee 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020b4:	2340      	movs	r3, #64	; 0x40
 80020b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_SPI_MspInit+0x90>)
 80020c8:	f001 fde2 	bl	8003c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020cc:	bf00      	nop
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40013000 	.word	0x40013000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010800 	.word	0x40010800

080020e0 <moveSM>:
#define DUTY	50
#define SPR		200

int count_spr = 0;

void moveSM(int cycle){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	if(cycle >= 0){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0a      	blt.n	8002104 <moveSM+0x24>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2120      	movs	r1, #32
 80020f2:	4812      	ldr	r0, [pc, #72]	; (800213c <moveSM+0x5c>)
 80020f4:	f001 ff60 	bl	8003fb8 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	22c8      	movs	r2, #200	; 0xc8
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <moveSM+0x60>)
 8002102:	6013      	str	r3, [r2, #0]
	}
	if(cycle < 0){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	da0b      	bge.n	8002122 <moveSM+0x42>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	2120      	movs	r1, #32
 800210e:	480b      	ldr	r0, [pc, #44]	; (800213c <moveSM+0x5c>)
 8002110:	f001 ff52 	bl	8003fb8 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle * -1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <moveSM+0x60>)
 8002120:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY);
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <moveSM+0x64>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2232      	movs	r2, #50	; 0x32
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800212a:	2100      	movs	r1, #0
 800212c:	4805      	ldr	r0, [pc, #20]	; (8002144 <moveSM+0x64>)
 800212e:	f003 ffff 	bl	8006130 <HAL_TIM_PWM_Start_IT>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40010c00 	.word	0x40010c00
 8002140:	200002d8 	.word	0x200002d8
 8002144:	20000324 	.word	0x20000324

08002148 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10c      	bne.n	8002174 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		count_spr--;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3b01      	subs	r3, #1
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002162:	6013      	str	r3, [r2, #0]
		if(count_spr <= 0)
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	dc03      	bgt.n	8002174 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 800216c:	2100      	movs	r1, #0
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8002170:	f004 f8e6 	bl	8006340 <HAL_TIM_PWM_Stop_IT>
	}
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40000400 	.word	0x40000400
 8002180:	200002d8 	.word	0x200002d8
 8002184:	20000324 	.word	0x20000324

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_MspInit+0x5c>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_MspInit+0x5c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6193      	str	r3, [r2, #24]
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_MspInit+0x5c>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_MspInit+0x5c>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_MspInit+0x5c>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_MspInit+0x5c>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_MspInit+0x60>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_MspInit+0x60>)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f0:	e7fe      	b.n	80021f0 <NMI_Handler+0x4>

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002232:	f000 fdc5 	bl	8002dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA1_Channel1_IRQHandler+0x10>)
 8002242:	f001 fae9 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200000e4 	.word	0x200000e4

08002250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM2_IRQHandler+0x10>)
 8002256:	f004 f931 	bl	80064bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200002dc 	.word	0x200002dc

08002264 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM3_IRQHandler+0x10>)
 800226a:	f004 f927 	bl	80064bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000324 	.word	0x20000324

08002278 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USART1_IRQHandler+0x10>)
 800227e:	f004 ffc9 	bl	8007214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000444 	.word	0x20000444

0800228c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USART2_IRQHandler+0x10>)
 8002292:	f004 ffbf 	bl	8007214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000048c 	.word	0x2000048c

080022a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM5_IRQHandler+0x10>)
 80022a6:	f004 f909 	bl	80064bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200003b4 	.word	0x200003b4

080022b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <MX_TIM2_Init+0x94>)
 80022de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <MX_TIM2_Init+0x94>)
 80022e6:	2247      	movs	r2, #71	; 0x47
 80022e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_TIM2_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <MX_TIM2_Init+0x94>)
 80022f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <MX_TIM2_Init+0x94>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_TIM2_Init+0x94>)
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002304:	4813      	ldr	r0, [pc, #76]	; (8002354 <MX_TIM2_Init+0x94>)
 8002306:	f003 fce1 	bl	8005ccc <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002310:	f7ff fb88 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4619      	mov	r1, r3
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <MX_TIM2_Init+0x94>)
 8002322:	f004 fa95 	bl	8006850 <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800232c:	f7ff fb7a 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_TIM2_Init+0x94>)
 800233e:	f004 fe49 	bl	8006fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002348:	f7ff fb6c 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200002dc 	.word	0x200002dc

08002358 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
 8002384:	615a      	str	r2, [r3, #20]
 8002386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <MX_TIM3_Init+0xe4>)
 800238a:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <MX_TIM3_Init+0xe8>)
 800238c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <MX_TIM3_Init+0xe4>)
 8002390:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002394:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <MX_TIM3_Init+0xe4>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <MX_TIM3_Init+0xe4>)
 800239e:	2263      	movs	r2, #99	; 0x63
 80023a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <MX_TIM3_Init+0xe4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <MX_TIM3_Init+0xe4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ae:	4823      	ldr	r0, [pc, #140]	; (800243c <MX_TIM3_Init+0xe4>)
 80023b0:	f003 fc8c 	bl	8005ccc <HAL_TIM_Base_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023ba:	f7ff fb33 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c8:	4619      	mov	r1, r3
 80023ca:	481c      	ldr	r0, [pc, #112]	; (800243c <MX_TIM3_Init+0xe4>)
 80023cc:	f004 fa40 	bl	8006850 <HAL_TIM_ConfigClockSource>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023d6:	f7ff fb25 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023da:	4818      	ldr	r0, [pc, #96]	; (800243c <MX_TIM3_Init+0xe4>)
 80023dc:	f003 fd26 	bl	8005e2c <HAL_TIM_PWM_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023e6:	f7ff fb1d 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f2:	f107 0320 	add.w	r3, r7, #32
 80023f6:	4619      	mov	r1, r3
 80023f8:	4810      	ldr	r0, [pc, #64]	; (800243c <MX_TIM3_Init+0xe4>)
 80023fa:	f004 fdeb 	bl	8006fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002404:	f7ff fb0e 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002408:	2360      	movs	r3, #96	; 0x60
 800240a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2200      	movs	r2, #0
 800241c:	4619      	mov	r1, r3
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <MX_TIM3_Init+0xe4>)
 8002420:	f004 f954 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800242a:	f7ff fafb 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800242e:	4803      	ldr	r0, [pc, #12]	; (800243c <MX_TIM3_Init+0xe4>)
 8002430:	f000 fa54 	bl	80028dc <HAL_TIM_MspPostInit>

}
 8002434:	bf00      	nop
 8002436:	3738      	adds	r7, #56	; 0x38
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000324 	.word	0x20000324
 8002440:	40000400 	.word	0x40000400

08002444 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0320 	add.w	r3, r7, #32
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	615a      	str	r2, [r3, #20]
 8002472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002474:	4b38      	ldr	r3, [pc, #224]	; (8002558 <MX_TIM4_Init+0x114>)
 8002476:	4a39      	ldr	r2, [pc, #228]	; (800255c <MX_TIM4_Init+0x118>)
 8002478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <MX_TIM4_Init+0x114>)
 800247c:	f240 529f 	movw	r2, #1439	; 0x59f
 8002480:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002482:	4b35      	ldr	r3, [pc, #212]	; (8002558 <MX_TIM4_Init+0x114>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002488:	4b33      	ldr	r3, [pc, #204]	; (8002558 <MX_TIM4_Init+0x114>)
 800248a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800248e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <MX_TIM4_Init+0x114>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <MX_TIM4_Init+0x114>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800249c:	482e      	ldr	r0, [pc, #184]	; (8002558 <MX_TIM4_Init+0x114>)
 800249e:	f003 fc15 	bl	8005ccc <HAL_TIM_Base_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80024a8:	f7ff fabc 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b6:	4619      	mov	r1, r3
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <MX_TIM4_Init+0x114>)
 80024ba:	f004 f9c9 	bl	8006850 <HAL_TIM_ConfigClockSource>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80024c4:	f7ff faae 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024c8:	4823      	ldr	r0, [pc, #140]	; (8002558 <MX_TIM4_Init+0x114>)
 80024ca:	f003 fcaf 	bl	8005e2c <HAL_TIM_PWM_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80024d4:	f7ff faa6 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024e0:	f107 0320 	add.w	r3, r7, #32
 80024e4:	4619      	mov	r1, r3
 80024e6:	481c      	ldr	r0, [pc, #112]	; (8002558 <MX_TIM4_Init+0x114>)
 80024e8:	f004 fd74 	bl	8006fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80024f2:	f7ff fa97 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f6:	2360      	movs	r3, #96	; 0x60
 80024f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 80024fa:	2319      	movs	r3, #25
 80024fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	2200      	movs	r2, #0
 800250a:	4619      	mov	r1, r3
 800250c:	4812      	ldr	r0, [pc, #72]	; (8002558 <MX_TIM4_Init+0x114>)
 800250e:	f004 f8dd 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002518:	f7ff fa84 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2204      	movs	r2, #4
 8002520:	4619      	mov	r1, r3
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <MX_TIM4_Init+0x114>)
 8002524:	f004 f8d2 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800252e:	f7ff fa79 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2208      	movs	r2, #8
 8002536:	4619      	mov	r1, r3
 8002538:	4807      	ldr	r0, [pc, #28]	; (8002558 <MX_TIM4_Init+0x114>)
 800253a:	f004 f8c7 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8002544:	f7ff fa6e 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002548:	4803      	ldr	r0, [pc, #12]	; (8002558 <MX_TIM4_Init+0x114>)
 800254a:	f000 f9c7 	bl	80028dc <HAL_TIM_MspPostInit>

}
 800254e:	bf00      	nop
 8002550:	3738      	adds	r7, #56	; 0x38
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000036c 	.word	0x2000036c
 800255c:	40000800 	.word	0x40000800

08002560 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	; 0x38
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002574:	f107 0320 	add.w	r3, r7, #32
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	615a      	str	r2, [r3, #20]
 800258e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002590:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <MX_TIM5_Init+0xe4>)
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <MX_TIM5_Init+0xe8>)
 8002594:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <MX_TIM5_Init+0xe4>)
 8002598:	f240 22cf 	movw	r2, #719	; 0x2cf
 800259c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <MX_TIM5_Init+0xe4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <MX_TIM5_Init+0xe4>)
 80025a6:	2263      	movs	r2, #99	; 0x63
 80025a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <MX_TIM5_Init+0xe4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <MX_TIM5_Init+0xe4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025b6:	4823      	ldr	r0, [pc, #140]	; (8002644 <MX_TIM5_Init+0xe4>)
 80025b8:	f003 fb88 	bl	8005ccc <HAL_TIM_Base_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80025c2:	f7ff fa2f 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d0:	4619      	mov	r1, r3
 80025d2:	481c      	ldr	r0, [pc, #112]	; (8002644 <MX_TIM5_Init+0xe4>)
 80025d4:	f004 f93c 	bl	8006850 <HAL_TIM_ConfigClockSource>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80025de:	f7ff fa21 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80025e2:	4818      	ldr	r0, [pc, #96]	; (8002644 <MX_TIM5_Init+0xe4>)
 80025e4:	f003 fc22 	bl	8005e2c <HAL_TIM_PWM_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80025ee:	f7ff fa19 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025fa:	f107 0320 	add.w	r3, r7, #32
 80025fe:	4619      	mov	r1, r3
 8002600:	4810      	ldr	r0, [pc, #64]	; (8002644 <MX_TIM5_Init+0xe4>)
 8002602:	f004 fce7 	bl	8006fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800260c:	f7ff fa0a 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002610:	2360      	movs	r3, #96	; 0x60
 8002612:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2200      	movs	r2, #0
 8002624:	4619      	mov	r1, r3
 8002626:	4807      	ldr	r0, [pc, #28]	; (8002644 <MX_TIM5_Init+0xe4>)
 8002628:	f004 f850 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002632:	f7ff f9f7 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002636:	4803      	ldr	r0, [pc, #12]	; (8002644 <MX_TIM5_Init+0xe4>)
 8002638:	f000 f950 	bl	80028dc <HAL_TIM_MspPostInit>

}
 800263c:	bf00      	nop
 800263e:	3738      	adds	r7, #56	; 0x38
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200003b4 	.word	0x200003b4
 8002648:	40000c00 	.word	0x40000c00

0800264c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b096      	sub	sp, #88	; 0x58
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002660:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800266a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2220      	movs	r2, #32
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f005 faa7 	bl	8007bd8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800268a:	4b50      	ldr	r3, [pc, #320]	; (80027cc <MX_TIM8_Init+0x180>)
 800268c:	4a50      	ldr	r2, [pc, #320]	; (80027d0 <MX_TIM8_Init+0x184>)
 800268e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 8002690:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <MX_TIM8_Init+0x180>)
 8002692:	f240 1267 	movw	r2, #359	; 0x167
 8002696:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <MX_TIM8_Init+0x180>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <MX_TIM8_Init+0x180>)
 80026a0:	2263      	movs	r2, #99	; 0x63
 80026a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a4:	4b49      	ldr	r3, [pc, #292]	; (80027cc <MX_TIM8_Init+0x180>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <MX_TIM8_Init+0x180>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b0:	4b46      	ldr	r3, [pc, #280]	; (80027cc <MX_TIM8_Init+0x180>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026b6:	4845      	ldr	r0, [pc, #276]	; (80027cc <MX_TIM8_Init+0x180>)
 80026b8:	f003 fb08 	bl	8005ccc <HAL_TIM_Base_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80026c2:	f7ff f9af 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026d0:	4619      	mov	r1, r3
 80026d2:	483e      	ldr	r0, [pc, #248]	; (80027cc <MX_TIM8_Init+0x180>)
 80026d4:	f004 f8bc 	bl	8006850 <HAL_TIM_ConfigClockSource>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80026de:	f7ff f9a1 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026e2:	483a      	ldr	r0, [pc, #232]	; (80027cc <MX_TIM8_Init+0x180>)
 80026e4:	f003 fba2 	bl	8005e2c <HAL_TIM_PWM_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80026ee:	f7ff f999 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026fe:	4619      	mov	r1, r3
 8002700:	4832      	ldr	r0, [pc, #200]	; (80027cc <MX_TIM8_Init+0x180>)
 8002702:	f004 fc67 	bl	8006fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800270c:	f7ff f98a 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002710:	2360      	movs	r3, #96	; 0x60
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002730:	2200      	movs	r2, #0
 8002732:	4619      	mov	r1, r3
 8002734:	4825      	ldr	r0, [pc, #148]	; (80027cc <MX_TIM8_Init+0x180>)
 8002736:	f003 ffc9 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002740:	f7ff f970 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	2204      	movs	r2, #4
 800274a:	4619      	mov	r1, r3
 800274c:	481f      	ldr	r0, [pc, #124]	; (80027cc <MX_TIM8_Init+0x180>)
 800274e:	f003 ffbd 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002758:	f7ff f964 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800275c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002760:	2208      	movs	r2, #8
 8002762:	4619      	mov	r1, r3
 8002764:	4819      	ldr	r0, [pc, #100]	; (80027cc <MX_TIM8_Init+0x180>)
 8002766:	f003 ffb1 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002770:	f7ff f958 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002778:	220c      	movs	r2, #12
 800277a:	4619      	mov	r1, r3
 800277c:	4813      	ldr	r0, [pc, #76]	; (80027cc <MX_TIM8_Init+0x180>)
 800277e:	f003 ffa5 	bl	80066cc <HAL_TIM_PWM_ConfigChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002788:	f7ff f94c 	bl	8001a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	4619      	mov	r1, r3
 80027ae:	4807      	ldr	r0, [pc, #28]	; (80027cc <MX_TIM8_Init+0x180>)
 80027b0:	f004 fc7c 	bl	80070ac <HAL_TIMEx_ConfigBreakDeadTime>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80027ba:	f7ff f933 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80027be:	4803      	ldr	r0, [pc, #12]	; (80027cc <MX_TIM8_Init+0x180>)
 80027c0:	f000 f88c 	bl	80028dc <HAL_TIM_MspPostInit>

}
 80027c4:	bf00      	nop
 80027c6:	3758      	adds	r7, #88	; 0x58
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200003fc 	.word	0x200003fc
 80027d0:	40013400 	.word	0x40013400

080027d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d114      	bne.n	8002810 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4a37      	ldr	r2, [pc, #220]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	61d3      	str	r3, [r2, #28]
 80027f2:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	201c      	movs	r0, #28
 8002804:	f000 fe17 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002808:	201c      	movs	r0, #28
 800280a:	f000 fe30 	bl	800346e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800280e:	e056      	b.n	80028be <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2d      	ldr	r2, [pc, #180]	; (80028cc <HAL_TIM_Base_MspInit+0xf8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d114      	bne.n	8002844 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	61d3      	str	r3, [r2, #28]
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2101      	movs	r1, #1
 8002836:	201d      	movs	r0, #29
 8002838:	f000 fdfd 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800283c:	201d      	movs	r0, #29
 800283e:	f000 fe16 	bl	800346e <HAL_NVIC_EnableIRQ>
}
 8002842:	e03c      	b.n	80028be <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM4)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a21      	ldr	r2, [pc, #132]	; (80028d0 <HAL_TIM_Base_MspInit+0xfc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]
}
 8002866:	e02a      	b.n	80028be <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM5)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <HAL_TIM_Base_MspInit+0x100>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d114      	bne.n	800289c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	61d3      	str	r3, [r2, #28]
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2032      	movs	r0, #50	; 0x32
 8002890:	f000 fdd1 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002894:	2032      	movs	r0, #50	; 0x32
 8002896:	f000 fdea 	bl	800346e <HAL_NVIC_EnableIRQ>
}
 800289a:	e010      	b.n	80028be <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_TIM_Base_MspInit+0x104>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10b      	bne.n	80028be <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 80028ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028b0:	6193      	str	r3, [r2, #24]
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_TIM_Base_MspInit+0xf4>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
}
 80028be:	bf00      	nop
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800
 80028d4:	40000c00 	.word	0x40000c00
 80028d8:	40013400 	.word	0x40013400

080028dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a46      	ldr	r2, [pc, #280]	; (8002a10 <HAL_TIM_MspPostInit+0x134>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12a      	bne.n	8002952 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a44      	ldr	r2, [pc, #272]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b42      	ldr	r3, [pc, #264]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 8002914:	2310      	movs	r3, #16
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2302      	movs	r3, #2
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	483c      	ldr	r0, [pc, #240]	; (8002a18 <HAL_TIM_MspPostInit+0x13c>)
 8002928:	f001 f9b2 	bl	8003c90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800292c:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_TIM_MspPostInit+0x140>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294a:	4a34      	ldr	r2, [pc, #208]	; (8002a1c <HAL_TIM_MspPostInit+0x140>)
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002950:	e05a      	b.n	8002a08 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a32      	ldr	r2, [pc, #200]	; (8002a20 <HAL_TIM_MspPostInit+0x144>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d119      	bne.n	8002990 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6193      	str	r3, [r2, #24]
 8002968:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8002974:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2302      	movs	r3, #2
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	4823      	ldr	r0, [pc, #140]	; (8002a18 <HAL_TIM_MspPostInit+0x13c>)
 800298a:	f001 f981 	bl	8003c90 <HAL_GPIO_Init>
}
 800298e:	e03b      	b.n	8002a08 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_TIM_MspPostInit+0x148>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d118      	bne.n	80029cc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6193      	str	r3, [r2, #24]
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2302      	movs	r3, #2
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	4818      	ldr	r0, [pc, #96]	; (8002a28 <HAL_TIM_MspPostInit+0x14c>)
 80029c6:	f001 f963 	bl	8003c90 <HAL_GPIO_Init>
}
 80029ca:	e01d      	b.n	8002a08 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIM_MspPostInit+0x150>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d118      	bne.n	8002a08 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	6193      	str	r3, [r2, #24]
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_TIM_MspPostInit+0x138>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 80029ee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	480b      	ldr	r0, [pc, #44]	; (8002a30 <HAL_TIM_MspPostInit+0x154>)
 8002a04:	f001 f944 	bl	8003c90 <HAL_GPIO_Init>
}
 8002a08:	bf00      	nop
 8002a0a:	3730      	adds	r7, #48	; 0x30
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010c00 	.word	0x40010c00
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	40013400 	.word	0x40013400
 8002a30:	40011000 	.word	0x40011000

08002a34 <buzzer_start_freq>:
 *      Author: phamv
 */

#include "tone.h"

void buzzer_start_freq(uint32_t frequency){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	if(frequency == 0) return;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d030      	beq.n	8002aa4 <buzzer_start_freq+0x70>
	uint32_t timer_clock = 72000000;  // Example for APB1 timer
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <buzzer_start_freq+0x78>)
 8002a44:	60fb      	str	r3, [r7, #12]
	uint32_t prescaler = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
	uint32_t period = (timer_clock / frequency) - 1;
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	613b      	str	r3, [r7, #16]

	// Adjust prescaler if period is too large for 16-bit timer
	while (period > 65535) {
 8002a56:	e00c      	b.n	8002a72 <buzzer_start_freq+0x3e>
		prescaler++;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
		period = (timer_clock / (prescaler + 1) / frequency) - 1;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
	while (period > 65535) {
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d2ee      	bcs.n	8002a58 <buzzer_start_freq+0x24>
	}

	__HAL_TIM_SET_PRESCALER(&htim5, prescaler);
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <buzzer_start_freq+0x7c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim5, period);
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <buzzer_start_freq+0x7c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <buzzer_start_freq+0x7c>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,period/2);
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <buzzer_start_freq+0x7c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	0852      	lsrs	r2, r2, #1
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); // Re-start PWM to apply changes
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <buzzer_start_freq+0x7c>)
 8002a9e:	f003 fa1d 	bl	8005edc <HAL_TIM_PWM_Start>
 8002aa2:	e000      	b.n	8002aa6 <buzzer_start_freq+0x72>
	if(frequency == 0) return;
 8002aa4:	bf00      	nop
}
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	044aa200 	.word	0x044aa200
 8002ab0:	200003b4 	.word	0x200003b4

08002ab4 <buzzer_stop>:

void buzzer_stop(){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <buzzer_stop+0x10>)
 8002abc:	f003 fac8 	bl	8006050 <HAL_TIM_PWM_Stop>
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200003b4 	.word	0x200003b4

08002ac8 <tone_play>:

//blocking function
void tone_play(int* note, int* dur, int len){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e014      	b.n	8002b04 <tone_play+0x3c>
		buzzer_start_freq(note[i]);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ffa5 	bl	8002a34 <buzzer_start_freq>
		HAL_Delay(dur[i]);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4413      	add	r3, r2
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f97f 	bl	8002df8 <HAL_Delay>
		buzzer_stop();
 8002afa:	f7ff ffdb 	bl	8002ab4 <buzzer_stop>
	for(int i = 0; i < len; i++){
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	dbe6      	blt.n	8002ada <tone_play+0x12>
	}
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <MX_USART1_UART_Init+0x50>)
 8002b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b3e:	220c      	movs	r2, #12
 8002b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_USART1_UART_Init+0x4c>)
 8002b50:	f004 fb0f 	bl	8007172 <HAL_UART_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b5a:	f7fe ff63 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000444 	.word	0x20000444
 8002b68:	40013800 	.word	0x40013800

08002b6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <MX_USART2_UART_Init+0x50>)
 8002b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_USART2_UART_Init+0x4c>)
 8002ba4:	f004 fae5 	bl	8007172 <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bae:	f7fe ff39 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000048c 	.word	0x2000048c
 8002bbc:	40004400 	.word	0x40004400

08002bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0318 	add.w	r3, r7, #24
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3f      	ldr	r2, [pc, #252]	; (8002cd8 <HAL_UART_MspInit+0x118>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d13a      	bne.n	8002c56 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be0:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf8:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a37      	ldr	r2, [pc, #220]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f107 0318 	add.w	r3, r7, #24
 8002c22:	4619      	mov	r1, r3
 8002c24:	482e      	ldr	r0, [pc, #184]	; (8002ce0 <HAL_UART_MspInit+0x120>)
 8002c26:	f001 f833 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	f107 0318 	add.w	r3, r7, #24
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4828      	ldr	r0, [pc, #160]	; (8002ce0 <HAL_UART_MspInit+0x120>)
 8002c40:	f001 f826 	bl	8003c90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	2025      	movs	r0, #37	; 0x25
 8002c4a:	f000 fbf4 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c4e:	2025      	movs	r0, #37	; 0x25
 8002c50:	f000 fc0d 	bl	800346e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c54:	e03c      	b.n	8002cd0 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <HAL_UART_MspInit+0x124>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d137      	bne.n	8002cd0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c60:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6a:	61d3      	str	r3, [r2, #28]
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c90:	2304      	movs	r3, #4
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480f      	ldr	r0, [pc, #60]	; (8002ce0 <HAL_UART_MspInit+0x120>)
 8002ca4:	f000 fff4 	bl	8003c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 0318 	add.w	r3, r7, #24
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <HAL_UART_MspInit+0x120>)
 8002cbc:	f000 ffe8 	bl	8003c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2026      	movs	r0, #38	; 0x26
 8002cc6:	f000 fbb6 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cca:	2026      	movs	r0, #38	; 0x26
 8002ccc:	f000 fbcf 	bl	800346e <HAL_NVIC_EnableIRQ>
}
 8002cd0:	bf00      	nop
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	40004400 	.word	0x40004400

08002ce8 <Reset_Handler>:
 8002ce8:	f7ff fae4 	bl	80022b4 <SystemInit>
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <LoopFillZerobss+0xe>)
 8002cee:	490c      	ldr	r1, [pc, #48]	; (8002d20 <LoopFillZerobss+0x12>)
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <LoopFillZerobss+0x16>)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:
 8002cf6:	58d4      	ldr	r4, [r2, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:
 8002cfc:	18c4      	adds	r4, r0, r3
 8002cfe:	428c      	cmp	r4, r1
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <LoopFillZerobss+0x1a>)
 8002d04:	4c09      	ldr	r4, [pc, #36]	; (8002d2c <LoopFillZerobss+0x1e>)
 8002d06:	2300      	movs	r3, #0
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:
 8002d0e:	42a2      	cmp	r2, r4
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>
 8002d12:	f004 ff6f 	bl	8007bf4 <__libc_init_array>
 8002d16:	f7fe fd7f 	bl	8001818 <main>
 8002d1a:	4770      	bx	lr
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000098 	.word	0x20000098
 8002d24:	08008460 	.word	0x08008460
 8002d28:	20000098 	.word	0x20000098
 8002d2c:	20000610 	.word	0x20000610

08002d30 <ADC1_2_IRQHandler>:
 8002d30:	e7fe      	b.n	8002d30 <ADC1_2_IRQHandler>
	...

08002d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_Init+0x28>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_Init+0x28>)
 8002d3e:	f043 0310 	orr.w	r3, r3, #16
 8002d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 fb6b 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4a:	200f      	movs	r0, #15
 8002d4c:	f000 f808 	bl	8002d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d50:	f7ff fa1a 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40022000 	.word	0x40022000

08002d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_InitTick+0x54>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_InitTick+0x58>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fb83 	bl	800348a <HAL_SYSTICK_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00e      	b.n	8002dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d80a      	bhi.n	8002daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d94:	2200      	movs	r2, #0
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f000 fb4b 	bl	8003436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da0:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <HAL_InitTick+0x5c>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000028 	.word	0x20000028
 8002db8:	20000030 	.word	0x20000030
 8002dbc:	2000002c 	.word	0x2000002c

08002dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_IncTick+0x1c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_IncTick+0x20>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_IncTick+0x20>)
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20000030 	.word	0x20000030
 8002de0:	200004d4 	.word	0x200004d4

08002de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return uwTick;
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <HAL_GetTick+0x10>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	200004d4 	.word	0x200004d4

08002df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d005      	beq.n	8002e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_Delay+0x44>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e1e:	bf00      	nop
 8002e20:	f7ff ffe0 	bl	8002de4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d8f7      	bhi.n	8002e20 <HAL_Delay+0x28>
  {
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000030 	.word	0x20000030

08002e40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0ce      	b.n	8003000 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd ff08 	bl	8000c94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f9bd 	bl	8003204 <ADC_ConversionStop_Disable>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 80a9 	bne.w	8002fee <HAL_ADC_Init+0x1ae>
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 80a5 	bne.w	8002fee <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	f043 0202 	orr.w	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4951      	ldr	r1, [pc, #324]	; (8003008 <HAL_ADC_Init+0x1c8>)
 8002ec2:	428b      	cmp	r3, r1
 8002ec4:	d10a      	bne.n	8002edc <HAL_ADC_Init+0x9c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ece:	d002      	beq.n	8002ed6 <HAL_ADC_Init+0x96>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	e004      	b.n	8002ee0 <HAL_ADC_Init+0xa0>
 8002ed6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002eda:	e001      	b.n	8002ee0 <HAL_ADC_Init+0xa0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7b1b      	ldrb	r3, [r3, #12]
 8002ee6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ee8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef8:	d003      	beq.n	8002f02 <HAL_ADC_Init+0xc2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d102      	bne.n	8002f08 <HAL_ADC_Init+0xc8>
 8002f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_Init+0xca>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7d1b      	ldrb	r3, [r3, #20]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d119      	bne.n	8002f4c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7b1b      	ldrb	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	035a      	lsls	r2, r3, #13
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e00b      	b.n	8002f4c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_ADC_Init+0x1cc>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7c:	d003      	beq.n	8002f86 <HAL_ADC_Init+0x146>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d104      	bne.n	8002f90 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_ADC_Init+0x1d0>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d10b      	bne.n	8002fcc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fca:	e018      	b.n	8002ffe <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f023 0312 	bic.w	r3, r3, #18
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fec:	e007      	b.n	8002ffe <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40013c00 	.word	0x40013c00
 800300c:	ffe1f7fd 	.word	0xffe1f7fd
 8003010:	ff1f0efe 	.word	0xff1f0efe

08003014 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x20>
 8003030:	2302      	movs	r3, #2
 8003032:	e0dc      	b.n	80031ee <HAL_ADC_ConfigChannel+0x1da>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b06      	cmp	r3, #6
 8003042:	d81c      	bhi.n	800307e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b05      	subs	r3, #5
 8003056:	221f      	movs	r2, #31
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	4019      	ands	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	3b05      	subs	r3, #5
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	635a      	str	r2, [r3, #52]	; 0x34
 800307c:	e03c      	b.n	80030f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d81c      	bhi.n	80030c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b23      	subs	r3, #35	; 0x23
 8003098:	221f      	movs	r2, #31
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	4019      	ands	r1, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	3b23      	subs	r3, #35	; 0x23
 80030b2:	fa00 f203 	lsl.w	r2, r0, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
 80030be:	e01b      	b.n	80030f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	3b41      	subs	r3, #65	; 0x41
 80030d2:	221f      	movs	r2, #31
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4019      	ands	r1, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b41      	subs	r3, #65	; 0x41
 80030ec:	fa00 f203 	lsl.w	r2, r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d91c      	bls.n	800313a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68d9      	ldr	r1, [r3, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	3b1e      	subs	r3, #30
 8003112:	2207      	movs	r2, #7
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	4019      	ands	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6898      	ldr	r0, [r3, #8]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	3b1e      	subs	r3, #30
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	e019      	b.n	800316e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6919      	ldr	r1, [r3, #16]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	2207      	movs	r2, #7
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	4019      	ands	r1, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6898      	ldr	r0, [r3, #8]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	fa00 f203 	lsl.w	r2, r0, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b10      	cmp	r3, #16
 8003174:	d003      	beq.n	800317e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800317a:	2b11      	cmp	r3, #17
 800317c:	d132      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d125      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d126      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d11a      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_ADC_ConfigChannel+0x1e8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_ADC_ConfigChannel+0x1ec>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	0c9a      	lsrs	r2, r3, #18
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x1b2>
 80031d2:	e007      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	40012400 	.word	0x40012400
 80031fc:	20000028 	.word	0x20000028
 8003200:	431bde83 	.word	0x431bde83

08003204 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d12e      	bne.n	800327c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800322e:	f7ff fdd9 	bl	8002de4 <HAL_GetTick>
 8003232:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003234:	e01b      	b.n	800326e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003236:	f7ff fdd5 	bl	8002de4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d914      	bls.n	800326e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10d      	bne.n	800326e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e007      	b.n	800327e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d0dc      	beq.n	8003236 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <__NVIC_SetPriorityGrouping+0x44>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a4:	4013      	ands	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <__NVIC_SetPriorityGrouping+0x44>)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	60d3      	str	r3, [r2, #12]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <__NVIC_GetPriorityGrouping+0x18>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f003 0307 	and.w	r3, r3, #7
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	db0b      	blt.n	8003316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f003 021f 	and.w	r2, r3, #31
 8003304:	4906      	ldr	r1, [pc, #24]	; (8003320 <__NVIC_EnableIRQ+0x34>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2001      	movs	r0, #1
 800330e:	fa00 f202 	lsl.w	r2, r0, r2
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	e000e100 	.word	0xe000e100

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	; (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	; (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f7ff ff90 	bl	8003324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff2d 	bl	8003288 <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003448:	f7ff ff42 	bl	80032d0 <__NVIC_GetPriorityGrouping>
 800344c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	6978      	ldr	r0, [r7, #20]
 8003454:	f7ff ff90 	bl	8003378 <NVIC_EncodePriority>
 8003458:	4602      	mov	r2, r0
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff5f 	bl	8003324 <__NVIC_SetPriority>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff35 	bl	80032ec <__NVIC_EnableIRQ>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ffa2 	bl	80033dc <SysTick_Config>
 8003498:	4603      	mov	r3, r0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e059      	b.n	800356e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_DMA_Init+0xd4>)
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d80f      	bhi.n	80034e6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_DMA_Init+0xd8>)
 80034ce:	4413      	add	r3, r2
 80034d0:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <HAL_DMA_Init+0xdc>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	009a      	lsls	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a28      	ldr	r2, [pc, #160]	; (8003584 <HAL_DMA_Init+0xe0>)
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80034e4:	e00e      	b.n	8003504 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_DMA_Init+0xe4>)
 80034ee:	4413      	add	r3, r2
 80034f0:	4a23      	ldr	r2, [pc, #140]	; (8003580 <HAL_DMA_Init+0xdc>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	009a      	lsls	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a22      	ldr	r2, [pc, #136]	; (800358c <HAL_DMA_Init+0xe8>)
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800351a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800351e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40020407 	.word	0x40020407
 800357c:	bffdfff8 	.word	0xbffdfff8
 8003580:	cccccccd 	.word	0xcccccccd
 8003584:	40020000 	.word	0x40020000
 8003588:	bffdfbf8 	.word	0xbffdfbf8
 800358c:	40020400 	.word	0x40020400

08003590 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d008      	beq.n	80035ba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2204      	movs	r2, #4
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e020      	b.n	80035fc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 020e 	bic.w	r2, r2, #14
 80035c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
	...

08003608 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d005      	beq.n	800362c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2204      	movs	r2, #4
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	e0d6      	b.n	80037da <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 020e 	bic.w	r2, r2, #14
 800363a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003654:	429a      	cmp	r2, r3
 8003656:	d958      	bls.n	800370a <HAL_DMA_Abort_IT+0x102>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a62      	ldr	r2, [pc, #392]	; (80037e8 <HAL_DMA_Abort_IT+0x1e0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d04f      	beq.n	8003702 <HAL_DMA_Abort_IT+0xfa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a61      	ldr	r2, [pc, #388]	; (80037ec <HAL_DMA_Abort_IT+0x1e4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d048      	beq.n	80036fe <HAL_DMA_Abort_IT+0xf6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <HAL_DMA_Abort_IT+0x1e8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d040      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xf0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5e      	ldr	r2, [pc, #376]	; (80037f4 <HAL_DMA_Abort_IT+0x1ec>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d038      	beq.n	80036f2 <HAL_DMA_Abort_IT+0xea>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_DMA_Abort_IT+0x1f0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d030      	beq.n	80036ec <HAL_DMA_Abort_IT+0xe4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5b      	ldr	r2, [pc, #364]	; (80037fc <HAL_DMA_Abort_IT+0x1f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d028      	beq.n	80036e6 <HAL_DMA_Abort_IT+0xde>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_DMA_Abort_IT+0x1dc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d020      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xd8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a57      	ldr	r2, [pc, #348]	; (8003800 <HAL_DMA_Abort_IT+0x1f8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d019      	beq.n	80036dc <HAL_DMA_Abort_IT+0xd4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a55      	ldr	r2, [pc, #340]	; (8003804 <HAL_DMA_Abort_IT+0x1fc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d012      	beq.n	80036d8 <HAL_DMA_Abort_IT+0xd0>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a54      	ldr	r2, [pc, #336]	; (8003808 <HAL_DMA_Abort_IT+0x200>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00a      	beq.n	80036d2 <HAL_DMA_Abort_IT+0xca>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a52      	ldr	r2, [pc, #328]	; (800380c <HAL_DMA_Abort_IT+0x204>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d102      	bne.n	80036cc <HAL_DMA_Abort_IT+0xc4>
 80036c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ca:	e01b      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036d0:	e018      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d6:	e015      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036d8:	2310      	movs	r3, #16
 80036da:	e013      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036dc:	2301      	movs	r3, #1
 80036de:	e011      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e4:	e00e      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036ea:	e00b      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036f0:	e008      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f6:	e005      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fc:	e002      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 80036fe:	2310      	movs	r3, #16
 8003700:	e000      	b.n	8003704 <HAL_DMA_Abort_IT+0xfc>
 8003702:	2301      	movs	r3, #1
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_DMA_Abort_IT+0x208>)
 8003706:	6053      	str	r3, [r2, #4]
 8003708:	e057      	b.n	80037ba <HAL_DMA_Abort_IT+0x1b2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a36      	ldr	r2, [pc, #216]	; (80037e8 <HAL_DMA_Abort_IT+0x1e0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04f      	beq.n	80037b4 <HAL_DMA_Abort_IT+0x1ac>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a34      	ldr	r2, [pc, #208]	; (80037ec <HAL_DMA_Abort_IT+0x1e4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d048      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x1a8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a33      	ldr	r2, [pc, #204]	; (80037f0 <HAL_DMA_Abort_IT+0x1e8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d040      	beq.n	80037aa <HAL_DMA_Abort_IT+0x1a2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <HAL_DMA_Abort_IT+0x1ec>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d038      	beq.n	80037a4 <HAL_DMA_Abort_IT+0x19c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a30      	ldr	r2, [pc, #192]	; (80037f8 <HAL_DMA_Abort_IT+0x1f0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d030      	beq.n	800379e <HAL_DMA_Abort_IT+0x196>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2e      	ldr	r2, [pc, #184]	; (80037fc <HAL_DMA_Abort_IT+0x1f4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d028      	beq.n	8003798 <HAL_DMA_Abort_IT+0x190>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a26      	ldr	r2, [pc, #152]	; (80037e4 <HAL_DMA_Abort_IT+0x1dc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d020      	beq.n	8003792 <HAL_DMA_Abort_IT+0x18a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_DMA_Abort_IT+0x1f8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d019      	beq.n	800378e <HAL_DMA_Abort_IT+0x186>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_DMA_Abort_IT+0x1fc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d012      	beq.n	800378a <HAL_DMA_Abort_IT+0x182>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_DMA_Abort_IT+0x200>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00a      	beq.n	8003784 <HAL_DMA_Abort_IT+0x17c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_DMA_Abort_IT+0x204>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d102      	bne.n	800377e <HAL_DMA_Abort_IT+0x176>
 8003778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377c:	e01b      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 800377e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003782:	e018      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 8003784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003788:	e015      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 800378a:	2310      	movs	r3, #16
 800378c:	e013      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 800378e:	2301      	movs	r3, #1
 8003790:	e011      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 8003792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003796:	e00e      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 8003798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800379c:	e00b      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 800379e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a2:	e008      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 80037a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a8:	e005      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 80037aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ae:	e002      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 80037b0:	2310      	movs	r3, #16
 80037b2:	e000      	b.n	80037b6 <HAL_DMA_Abort_IT+0x1ae>
 80037b4:	2301      	movs	r3, #1
 80037b6:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_DMA_Abort_IT+0x20c>)
 80037b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
    } 
  }
  return status;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40020080 	.word	0x40020080
 80037e8:	40020008 	.word	0x40020008
 80037ec:	4002001c 	.word	0x4002001c
 80037f0:	40020030 	.word	0x40020030
 80037f4:	40020044 	.word	0x40020044
 80037f8:	40020058 	.word	0x40020058
 80037fc:	4002006c 	.word	0x4002006c
 8003800:	40020408 	.word	0x40020408
 8003804:	4002041c 	.word	0x4002041c
 8003808:	40020430 	.word	0x40020430
 800380c:	40020444 	.word	0x40020444
 8003810:	40020400 	.word	0x40020400
 8003814:	40020000 	.word	0x40020000

08003818 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	2204      	movs	r2, #4
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80f1 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x20c>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80eb 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <HAL_DMA_IRQHandler+0x1d8>)
 8003874:	429a      	cmp	r2, r3
 8003876:	d958      	bls.n	800392a <HAL_DMA_IRQHandler+0x112>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a5d      	ldr	r2, [pc, #372]	; (80039f4 <HAL_DMA_IRQHandler+0x1dc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d04f      	beq.n	8003922 <HAL_DMA_IRQHandler+0x10a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a5c      	ldr	r2, [pc, #368]	; (80039f8 <HAL_DMA_IRQHandler+0x1e0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d048      	beq.n	800391e <HAL_DMA_IRQHandler+0x106>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5a      	ldr	r2, [pc, #360]	; (80039fc <HAL_DMA_IRQHandler+0x1e4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d040      	beq.n	8003918 <HAL_DMA_IRQHandler+0x100>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a59      	ldr	r2, [pc, #356]	; (8003a00 <HAL_DMA_IRQHandler+0x1e8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d038      	beq.n	8003912 <HAL_DMA_IRQHandler+0xfa>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a57      	ldr	r2, [pc, #348]	; (8003a04 <HAL_DMA_IRQHandler+0x1ec>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d030      	beq.n	800390c <HAL_DMA_IRQHandler+0xf4>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a56      	ldr	r2, [pc, #344]	; (8003a08 <HAL_DMA_IRQHandler+0x1f0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d028      	beq.n	8003906 <HAL_DMA_IRQHandler+0xee>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <HAL_DMA_IRQHandler+0x1d8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d020      	beq.n	8003900 <HAL_DMA_IRQHandler+0xe8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_DMA_IRQHandler+0x1f4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d019      	beq.n	80038fc <HAL_DMA_IRQHandler+0xe4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_DMA_IRQHandler+0x1f8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d012      	beq.n	80038f8 <HAL_DMA_IRQHandler+0xe0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_DMA_IRQHandler+0x1fc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00a      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xda>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a4d      	ldr	r2, [pc, #308]	; (8003a18 <HAL_DMA_IRQHandler+0x200>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d102      	bne.n	80038ec <HAL_DMA_IRQHandler+0xd4>
 80038e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ea:	e01b      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 80038ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038f0:	e018      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 80038f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f6:	e015      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	e013      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 80038fc:	2304      	movs	r3, #4
 80038fe:	e011      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 8003900:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003904:	e00e      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 8003906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800390a:	e00b      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 800390c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003910:	e008      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 8003912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003916:	e005      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 8003918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800391c:	e002      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 800391e:	2340      	movs	r3, #64	; 0x40
 8003920:	e000      	b.n	8003924 <HAL_DMA_IRQHandler+0x10c>
 8003922:	2304      	movs	r3, #4
 8003924:	4a3d      	ldr	r2, [pc, #244]	; (8003a1c <HAL_DMA_IRQHandler+0x204>)
 8003926:	6053      	str	r3, [r2, #4]
 8003928:	e057      	b.n	80039da <HAL_DMA_IRQHandler+0x1c2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_DMA_IRQHandler+0x1dc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d04f      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x1bc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <HAL_DMA_IRQHandler+0x1e0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d048      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x1b8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <HAL_DMA_IRQHandler+0x1e4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d040      	beq.n	80039ca <HAL_DMA_IRQHandler+0x1b2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <HAL_DMA_IRQHandler+0x1e8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d038      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x1ac>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_DMA_IRQHandler+0x1ec>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d030      	beq.n	80039be <HAL_DMA_IRQHandler+0x1a6>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <HAL_DMA_IRQHandler+0x1f0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d028      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x1a0>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a21      	ldr	r2, [pc, #132]	; (80039f0 <HAL_DMA_IRQHandler+0x1d8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d020      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x19a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <HAL_DMA_IRQHandler+0x1f4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d019      	beq.n	80039ae <HAL_DMA_IRQHandler+0x196>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <HAL_DMA_IRQHandler+0x1f8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d012      	beq.n	80039aa <HAL_DMA_IRQHandler+0x192>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <HAL_DMA_IRQHandler+0x1fc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00a      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x18c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <HAL_DMA_IRQHandler+0x200>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d102      	bne.n	800399e <HAL_DMA_IRQHandler+0x186>
 8003998:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800399c:	e01b      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 800399e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039a2:	e018      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a8:	e015      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039aa:	2340      	movs	r3, #64	; 0x40
 80039ac:	e013      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039ae:	2304      	movs	r3, #4
 80039b0:	e011      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039b6:	e00e      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039bc:	e00b      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039c2:	e008      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039c8:	e005      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ce:	e002      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039d0:	2340      	movs	r3, #64	; 0x40
 80039d2:	e000      	b.n	80039d6 <HAL_DMA_IRQHandler+0x1be>
 80039d4:	2304      	movs	r3, #4
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <HAL_DMA_IRQHandler+0x208>)
 80039d8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8136 	beq.w	8003c50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80039ec:	e130      	b.n	8003c50 <HAL_DMA_IRQHandler+0x438>
 80039ee:	bf00      	nop
 80039f0:	40020080 	.word	0x40020080
 80039f4:	40020008 	.word	0x40020008
 80039f8:	4002001c 	.word	0x4002001c
 80039fc:	40020030 	.word	0x40020030
 8003a00:	40020044 	.word	0x40020044
 8003a04:	40020058 	.word	0x40020058
 8003a08:	4002006c 	.word	0x4002006c
 8003a0c:	40020408 	.word	0x40020408
 8003a10:	4002041c 	.word	0x4002041c
 8003a14:	40020430 	.word	0x40020430
 8003a18:	40020444 	.word	0x40020444
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	2202      	movs	r2, #2
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80dd 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x3d8>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80d7 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 020a 	bic.w	r2, r2, #10
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b7b      	ldr	r3, [pc, #492]	; (8003c5c <HAL_DMA_IRQHandler+0x444>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d958      	bls.n	8003b26 <HAL_DMA_IRQHandler+0x30e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <HAL_DMA_IRQHandler+0x448>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04f      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x306>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a78      	ldr	r2, [pc, #480]	; (8003c64 <HAL_DMA_IRQHandler+0x44c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d048      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x302>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a76      	ldr	r2, [pc, #472]	; (8003c68 <HAL_DMA_IRQHandler+0x450>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d040      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x2fc>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	; (8003c6c <HAL_DMA_IRQHandler+0x454>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d038      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2f6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a73      	ldr	r2, [pc, #460]	; (8003c70 <HAL_DMA_IRQHandler+0x458>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d030      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x2f0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	; (8003c74 <HAL_DMA_IRQHandler+0x45c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d028      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x2ea>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a69      	ldr	r2, [pc, #420]	; (8003c5c <HAL_DMA_IRQHandler+0x444>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d020      	beq.n	8003afc <HAL_DMA_IRQHandler+0x2e4>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6e      	ldr	r2, [pc, #440]	; (8003c78 <HAL_DMA_IRQHandler+0x460>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d019      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x2e0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6c      	ldr	r2, [pc, #432]	; (8003c7c <HAL_DMA_IRQHandler+0x464>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d012      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2dc>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6b      	ldr	r2, [pc, #428]	; (8003c80 <HAL_DMA_IRQHandler+0x468>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00a      	beq.n	8003aee <HAL_DMA_IRQHandler+0x2d6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a69      	ldr	r2, [pc, #420]	; (8003c84 <HAL_DMA_IRQHandler+0x46c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d102      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x2d0>
 8003ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ae6:	e01b      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aec:	e018      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003af2:	e015      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003af4:	2320      	movs	r3, #32
 8003af6:	e013      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e011      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003afc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b00:	e00e      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003b02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b06:	e00b      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b0c:	e008      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b12:	e005      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b18:	e002      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	e000      	b.n	8003b20 <HAL_DMA_IRQHandler+0x308>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	4a59      	ldr	r2, [pc, #356]	; (8003c88 <HAL_DMA_IRQHandler+0x470>)
 8003b22:	6053      	str	r3, [r2, #4]
 8003b24:	e057      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x3be>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4d      	ldr	r2, [pc, #308]	; (8003c60 <HAL_DMA_IRQHandler+0x448>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04f      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x3b8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_DMA_IRQHandler+0x44c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d048      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x3b4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a4a      	ldr	r2, [pc, #296]	; (8003c68 <HAL_DMA_IRQHandler+0x450>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d040      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x3ae>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a48      	ldr	r2, [pc, #288]	; (8003c6c <HAL_DMA_IRQHandler+0x454>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d038      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x3a8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a47      	ldr	r2, [pc, #284]	; (8003c70 <HAL_DMA_IRQHandler+0x458>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d030      	beq.n	8003bba <HAL_DMA_IRQHandler+0x3a2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a45      	ldr	r2, [pc, #276]	; (8003c74 <HAL_DMA_IRQHandler+0x45c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d028      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x39c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <HAL_DMA_IRQHandler+0x444>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d020      	beq.n	8003bae <HAL_DMA_IRQHandler+0x396>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a41      	ldr	r2, [pc, #260]	; (8003c78 <HAL_DMA_IRQHandler+0x460>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d019      	beq.n	8003baa <HAL_DMA_IRQHandler+0x392>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a40      	ldr	r2, [pc, #256]	; (8003c7c <HAL_DMA_IRQHandler+0x464>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d012      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x38e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <HAL_DMA_IRQHandler+0x468>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00a      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x388>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <HAL_DMA_IRQHandler+0x46c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x382>
 8003b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b98:	e01b      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9e:	e018      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ba4:	e015      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	e013      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e011      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb2:	e00e      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003bb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bb8:	e00b      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bbe:	e008      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bc4:	e005      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bca:	e002      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e000      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x3ba>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <HAL_DMA_IRQHandler+0x474>)
 8003bd4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d034      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bee:	e02f      	b.n	8003c50 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d028      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x43a>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d023      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 020e 	bic.w	r2, r2, #14
 8003c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f202 	lsl.w	r2, r1, r2
 8003c28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
    }
  }
  return;
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
}
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40020080 	.word	0x40020080
 8003c60:	40020008 	.word	0x40020008
 8003c64:	4002001c 	.word	0x4002001c
 8003c68:	40020030 	.word	0x40020030
 8003c6c:	40020044 	.word	0x40020044
 8003c70:	40020058 	.word	0x40020058
 8003c74:	4002006c 	.word	0x4002006c
 8003c78:	40020408 	.word	0x40020408
 8003c7c:	4002041c 	.word	0x4002041c
 8003c80:	40020430 	.word	0x40020430
 8003c84:	40020444 	.word	0x40020444
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	40020000 	.word	0x40020000

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b08b      	sub	sp, #44	; 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca2:	e179      	b.n	8003f98 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	f040 8168 	bne.w	8003f92 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4a96      	ldr	r2, [pc, #600]	; (8003f20 <HAL_GPIO_Init+0x290>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d05e      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003ccc:	4a94      	ldr	r2, [pc, #592]	; (8003f20 <HAL_GPIO_Init+0x290>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d875      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cd2:	4a94      	ldr	r2, [pc, #592]	; (8003f24 <HAL_GPIO_Init+0x294>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d058      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003cd8:	4a92      	ldr	r2, [pc, #584]	; (8003f24 <HAL_GPIO_Init+0x294>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d86f      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cde:	4a92      	ldr	r2, [pc, #584]	; (8003f28 <HAL_GPIO_Init+0x298>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d052      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003ce4:	4a90      	ldr	r2, [pc, #576]	; (8003f28 <HAL_GPIO_Init+0x298>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d869      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cea:	4a90      	ldr	r2, [pc, #576]	; (8003f2c <HAL_GPIO_Init+0x29c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d04c      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003cf0:	4a8e      	ldr	r2, [pc, #568]	; (8003f2c <HAL_GPIO_Init+0x29c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d863      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cf6:	4a8e      	ldr	r2, [pc, #568]	; (8003f30 <HAL_GPIO_Init+0x2a0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d046      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003cfc:	4a8c      	ldr	r2, [pc, #560]	; (8003f30 <HAL_GPIO_Init+0x2a0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d85d      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003d02:	2b12      	cmp	r3, #18
 8003d04:	d82a      	bhi.n	8003d5c <HAL_GPIO_Init+0xcc>
 8003d06:	2b12      	cmp	r3, #18
 8003d08:	d859      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_GPIO_Init+0x80>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d8b 	.word	0x08003d8b
 8003d14:	08003d65 	.word	0x08003d65
 8003d18:	08003d77 	.word	0x08003d77
 8003d1c:	08003db9 	.word	0x08003db9
 8003d20:	08003dbf 	.word	0x08003dbf
 8003d24:	08003dbf 	.word	0x08003dbf
 8003d28:	08003dbf 	.word	0x08003dbf
 8003d2c:	08003dbf 	.word	0x08003dbf
 8003d30:	08003dbf 	.word	0x08003dbf
 8003d34:	08003dbf 	.word	0x08003dbf
 8003d38:	08003dbf 	.word	0x08003dbf
 8003d3c:	08003dbf 	.word	0x08003dbf
 8003d40:	08003dbf 	.word	0x08003dbf
 8003d44:	08003dbf 	.word	0x08003dbf
 8003d48:	08003dbf 	.word	0x08003dbf
 8003d4c:	08003dbf 	.word	0x08003dbf
 8003d50:	08003dbf 	.word	0x08003dbf
 8003d54:	08003d6d 	.word	0x08003d6d
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <HAL_GPIO_Init+0x2a4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d62:	e02c      	b.n	8003dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	623b      	str	r3, [r7, #32]
          break;
 8003d6a:	e029      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	3304      	adds	r3, #4
 8003d72:	623b      	str	r3, [r7, #32]
          break;
 8003d74:	e024      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	623b      	str	r3, [r7, #32]
          break;
 8003d7e:	e01f      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	330c      	adds	r3, #12
 8003d86:	623b      	str	r3, [r7, #32]
          break;
 8003d88:	e01a      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d92:	2304      	movs	r3, #4
 8003d94:	623b      	str	r3, [r7, #32]
          break;
 8003d96:	e013      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da0:	2308      	movs	r3, #8
 8003da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	611a      	str	r2, [r3, #16]
          break;
 8003daa:	e009      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dac:	2308      	movs	r3, #8
 8003dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	615a      	str	r2, [r3, #20]
          break;
 8003db6:	e003      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
          break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          break;
 8003dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2bff      	cmp	r3, #255	; 0xff
 8003dc4:	d801      	bhi.n	8003dca <HAL_GPIO_Init+0x13a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	e001      	b.n	8003dce <HAL_GPIO_Init+0x13e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2bff      	cmp	r3, #255	; 0xff
 8003dd4:	d802      	bhi.n	8003ddc <HAL_GPIO_Init+0x14c>
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	e002      	b.n	8003de2 <HAL_GPIO_Init+0x152>
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	3b08      	subs	r3, #8
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	210f      	movs	r1, #15
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	6a39      	ldr	r1, [r7, #32]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80c1 	beq.w	8003f92 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e10:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_GPIO_Init+0x2a8>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	4a48      	ldr	r2, [pc, #288]	; (8003f38 <HAL_GPIO_Init+0x2a8>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6193      	str	r3, [r2, #24]
 8003e1c:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <HAL_GPIO_Init+0x2a8>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e28:	4a44      	ldr	r2, [pc, #272]	; (8003f3c <HAL_GPIO_Init+0x2ac>)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3302      	adds	r3, #2
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	; (8003f40 <HAL_GPIO_Init+0x2b0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d01f      	beq.n	8003e94 <HAL_GPIO_Init+0x204>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3b      	ldr	r2, [pc, #236]	; (8003f44 <HAL_GPIO_Init+0x2b4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d019      	beq.n	8003e90 <HAL_GPIO_Init+0x200>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3a      	ldr	r2, [pc, #232]	; (8003f48 <HAL_GPIO_Init+0x2b8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_GPIO_Init+0x1fc>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_GPIO_Init+0x2bc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00d      	beq.n	8003e88 <HAL_GPIO_Init+0x1f8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <HAL_GPIO_Init+0x2c0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <HAL_GPIO_Init+0x1f4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a37      	ldr	r2, [pc, #220]	; (8003f54 <HAL_GPIO_Init+0x2c4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_GPIO_Init+0x1f0>
 8003e7c:	2305      	movs	r3, #5
 8003e7e:	e00a      	b.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e80:	2306      	movs	r3, #6
 8003e82:	e008      	b.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e84:	2304      	movs	r3, #4
 8003e86:	e006      	b.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e004      	b.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e002      	b.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e94:	2300      	movs	r3, #0
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	f002 0203 	and.w	r2, r2, #3
 8003e9c:	0092      	lsls	r2, r2, #2
 8003e9e:	4093      	lsls	r3, r2
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ea6:	4925      	ldr	r1, [pc, #148]	; (8003f3c <HAL_GPIO_Init+0x2ac>)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d006      	beq.n	8003ece <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ec0:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	4924      	ldr	r1, [pc, #144]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]
 8003ecc:	e006      	b.n	8003edc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	4920      	ldr	r1, [pc, #128]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d006      	beq.n	8003ef6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	491a      	ldr	r1, [pc, #104]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]
 8003ef4:	e006      	b.n	8003f04 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d025      	beq.n	8003f5c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	4910      	ldr	r1, [pc, #64]	; (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	e025      	b.n	8003f6a <HAL_GPIO_Init+0x2da>
 8003f1e:	bf00      	nop
 8003f20:	10320000 	.word	0x10320000
 8003f24:	10310000 	.word	0x10310000
 8003f28:	10220000 	.word	0x10220000
 8003f2c:	10210000 	.word	0x10210000
 8003f30:	10120000 	.word	0x10120000
 8003f34:	10110000 	.word	0x10110000
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010800 	.word	0x40010800
 8003f44:	40010c00 	.word	0x40010c00
 8003f48:	40011000 	.word	0x40011000
 8003f4c:	40011400 	.word	0x40011400
 8003f50:	40011800 	.word	0x40011800
 8003f54:	40011c00 	.word	0x40011c00
 8003f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	4913      	ldr	r1, [pc, #76]	; (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]
 8003f82:	e006      	b.n	8003f92 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	4909      	ldr	r1, [pc, #36]	; (8003fb4 <HAL_GPIO_Init+0x324>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	3301      	adds	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f47f ae7e 	bne.w	8003ca4 <HAL_GPIO_Init+0x14>
  }
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	372c      	adds	r7, #44	; 0x2c
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	40010400 	.word	0x40010400

08003fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc8:	787b      	ldrb	r3, [r7, #1]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fd4:	e003      	b.n	8003fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	041a      	lsls	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4013      	ands	r3, r2
 8004000:	041a      	lsls	r2, r3, #16
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43d9      	mvns	r1, r3
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	400b      	ands	r3, r1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	611a      	str	r2, [r3, #16]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
	...

0800401c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e12b      	b.n	8004286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fba8 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	; 0x24
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004080:	f001 faba 	bl	80055f8 <HAL_RCC_GetPCLK1Freq>
 8004084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4a81      	ldr	r2, [pc, #516]	; (8004290 <HAL_I2C_Init+0x274>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d807      	bhi.n	80040a0 <HAL_I2C_Init+0x84>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a80      	ldr	r2, [pc, #512]	; (8004294 <HAL_I2C_Init+0x278>)
 8004094:	4293      	cmp	r3, r2
 8004096:	bf94      	ite	ls
 8004098:	2301      	movls	r3, #1
 800409a:	2300      	movhi	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e006      	b.n	80040ae <HAL_I2C_Init+0x92>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a7d      	ldr	r2, [pc, #500]	; (8004298 <HAL_I2C_Init+0x27c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bf94      	ite	ls
 80040a8:	2301      	movls	r3, #1
 80040aa:	2300      	movhi	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0e7      	b.n	8004286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a78      	ldr	r2, [pc, #480]	; (800429c <HAL_I2C_Init+0x280>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0c9b      	lsrs	r3, r3, #18
 80040c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a6a      	ldr	r2, [pc, #424]	; (8004290 <HAL_I2C_Init+0x274>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d802      	bhi.n	80040f0 <HAL_I2C_Init+0xd4>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e009      	b.n	8004104 <HAL_I2C_Init+0xe8>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	4a69      	ldr	r2, [pc, #420]	; (80042a0 <HAL_I2C_Init+0x284>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	3301      	adds	r3, #1
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004116:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	495c      	ldr	r1, [pc, #368]	; (8004290 <HAL_I2C_Init+0x274>)
 8004120:	428b      	cmp	r3, r1
 8004122:	d819      	bhi.n	8004158 <HAL_I2C_Init+0x13c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e59      	subs	r1, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004138:	400b      	ands	r3, r1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_I2C_Init+0x138>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e59      	subs	r1, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fbb1 f3f3 	udiv	r3, r1, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004152:	e051      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004154:	2304      	movs	r3, #4
 8004156:	e04f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d111      	bne.n	8004184 <HAL_I2C_Init+0x168>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e012      	b.n	80041aa <HAL_I2C_Init+0x18e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e58      	subs	r0, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	0099      	lsls	r1, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	fbb0 f3f3 	udiv	r3, r0, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Init+0x196>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10e      	bne.n	80041d8 <HAL_I2C_Init+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1e58      	subs	r0, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1e58      	subs	r0, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	0099      	lsls	r1, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6809      	ldr	r1, [r1, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6911      	ldr	r1, [r2, #16]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	000186a0 	.word	0x000186a0
 8004294:	001e847f 	.word	0x001e847f
 8004298:	003d08ff 	.word	0x003d08ff
 800429c:	431bde83 	.word	0x431bde83
 80042a0:	10624dd3 	.word	0x10624dd3

080042a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08c      	sub	sp, #48	; 0x30
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	461a      	mov	r2, r3
 80042b0:	460b      	mov	r3, r1
 80042b2:	817b      	strh	r3, [r7, #10]
 80042b4:	4613      	mov	r3, r2
 80042b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042bc:	f7fe fd92 	bl	8002de4 <HAL_GetTick>
 80042c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	f040 824b 	bne.w	8004766 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2319      	movs	r3, #25
 80042d6:	2201      	movs	r2, #1
 80042d8:	497f      	ldr	r1, [pc, #508]	; (80044d8 <HAL_I2C_Master_Receive+0x234>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fc4a 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	e23e      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_I2C_Master_Receive+0x54>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e237      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d007      	beq.n	800431e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2222      	movs	r2, #34	; 0x22
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2210      	movs	r2, #16
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	893a      	ldrh	r2, [r7, #8]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a5f      	ldr	r2, [pc, #380]	; (80044dc <HAL_I2C_Master_Receive+0x238>)
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004360:	8979      	ldrh	r1, [r7, #10]
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fb36 	bl	80049d8 <I2C_MasterRequestRead>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e1f8      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d113      	bne.n	80043a6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e1cc      	b.n	8004740 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d11e      	bne.n	80043ec <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043be:	b672      	cpsid	i
}
 80043c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043e8:	b662      	cpsie	i
}
 80043ea:	e035      	b.n	8004458 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d11e      	bne.n	8004432 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004402:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004404:	b672      	cpsid	i
}
 8004406:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800442e:	b662      	cpsie	i
}
 8004430:	e012      	b.n	8004458 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004458:	e172      	b.n	8004740 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	2b03      	cmp	r3, #3
 8004460:	f200 811f 	bhi.w	80046a2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	2b01      	cmp	r3, #1
 800446a:	d123      	bne.n	80044b4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fc99 	bl	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e173      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044b2:	e145      	b.n	8004740 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d152      	bne.n	8004562 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2200      	movs	r2, #0
 80044c4:	4906      	ldr	r1, [pc, #24]	; (80044e0 <HAL_I2C_Master_Receive+0x23c>)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fb54 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e148      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
 80044d6:	bf00      	nop
 80044d8:	00100002 	.word	0x00100002
 80044dc:	ffff0000 	.word	0xffff0000
 80044e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80044e4:	b672      	cpsid	i
}
 80044e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800452a:	b662      	cpsie	i
}
 800452c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004560:	e0ee      	b.n	8004740 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	4981      	ldr	r1, [pc, #516]	; (8004770 <HAL_I2C_Master_Receive+0x4cc>)
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fb01 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0f5      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800458c:	b672      	cpsid	i
}
 800458e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045c2:	4b6c      	ldr	r3, [pc, #432]	; (8004774 <HAL_I2C_Master_Receive+0x4d0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	08db      	lsrs	r3, r3, #3
 80045c8:	4a6b      	ldr	r2, [pc, #428]	; (8004778 <HAL_I2C_Master_Receive+0x4d4>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0a1a      	lsrs	r2, r3, #8
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	00da      	lsls	r2, r3, #3
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	3b01      	subs	r3, #1
 80045e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d118      	bne.n	800461a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800460a:	b662      	cpsie	i
}
 800460c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0a6      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b04      	cmp	r3, #4
 8004626:	d1d9      	bne.n	80045dc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800466a:	b662      	cpsie	i
}
 800466c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a0:	e04e      	b.n	8004740 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fb7e 	bl	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e058      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d124      	bne.n	8004740 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d107      	bne.n	800470e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	f47f ae88 	bne.w	800445a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	00010004 	.word	0x00010004
 8004774:	20000028 	.word	0x20000028
 8004778:	14f8b589 	.word	0x14f8b589

0800477c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	460b      	mov	r3, r1
 800478a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800478c:	f7fe fb2a 	bl	8002de4 <HAL_GetTick>
 8004790:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	f040 8111 	bne.w	80049c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2319      	movs	r3, #25
 80047aa:	2201      	movs	r2, #1
 80047ac:	4988      	ldr	r1, [pc, #544]	; (80049d0 <HAL_I2C_IsDeviceReady+0x254>)
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f9e0 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
 80047bc:	e104      	b.n	80049c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_I2C_IsDeviceReady+0x50>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0fd      	b.n	80049c8 <HAL_I2C_IsDeviceReady+0x24c>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d007      	beq.n	80047f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2224      	movs	r2, #36	; 0x24
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a70      	ldr	r2, [pc, #448]	; (80049d4 <HAL_I2C_IsDeviceReady+0x258>)
 8004814:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004824:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f99e 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484c:	d103      	bne.n	8004856 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e0b6      	b.n	80049c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004868:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800486a:	f7fe fabb 	bl	8002de4 <HAL_GetTick>
 800486e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004894:	bf0c      	ite	eq
 8004896:	2301      	moveq	r3, #1
 8004898:	2300      	movne	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800489e:	e025      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048a0:	f7fe faa0 	bl	8002de4 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <HAL_I2C_IsDeviceReady+0x13a>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	22a0      	movs	r2, #160	; 0xa0
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2ba0      	cmp	r3, #160	; 0xa0
 80048f6:	d005      	beq.n	8004904 <HAL_I2C_IsDeviceReady+0x188>
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <HAL_I2C_IsDeviceReady+0x188>
 80048fe:	7dbb      	ldrb	r3, [r7, #22]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0cd      	beq.n	80048a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d129      	bne.n	800496e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004928:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	2319      	movs	r3, #25
 8004946:	2201      	movs	r2, #1
 8004948:	4921      	ldr	r1, [pc, #132]	; (80049d0 <HAL_I2C_IsDeviceReady+0x254>)
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f912 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e036      	b.n	80049c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e02c      	b.n	80049c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004986:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2319      	movs	r3, #25
 800498e:	2201      	movs	r2, #1
 8004990:	490f      	ldr	r1, [pc, #60]	; (80049d0 <HAL_I2C_IsDeviceReady+0x254>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f8ee 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e012      	b.n	80049c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	3301      	adds	r3, #1
 80049a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f4ff af32 	bcc.w	8004816 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	00100002 	.word	0x00100002
 80049d4:	ffff0000 	.word	0xffff0000

080049d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	460b      	mov	r3, r1
 80049e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d006      	beq.n	8004a12 <I2C_MasterRequestRead+0x3a>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d003      	beq.n	8004a12 <I2C_MasterRequestRead+0x3a>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a10:	d108      	bne.n	8004a24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e00b      	b.n	8004a3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	2b11      	cmp	r3, #17
 8004a2a:	d107      	bne.n	8004a3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f893 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00d      	beq.n	8004a70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d103      	bne.n	8004a6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e079      	b.n	8004b64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a78:	d108      	bne.n	8004a8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a7a:	897b      	ldrh	r3, [r7, #10]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]
 8004a8a:	e05f      	b.n	8004b4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a8c:	897b      	ldrh	r3, [r7, #10]
 8004a8e:	11db      	asrs	r3, r3, #7
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f063 030f 	orn	r3, r3, #15
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4930      	ldr	r1, [pc, #192]	; (8004b6c <I2C_MasterRequestRead+0x194>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8dc 	bl	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e054      	b.n	8004b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aba:	897b      	ldrh	r3, [r7, #10]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4929      	ldr	r1, [pc, #164]	; (8004b70 <I2C_MasterRequestRead+0x198>)
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f8cc 	bl	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e044      	b.n	8004b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f831 	bl	8004b74 <I2C_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b26:	d103      	bne.n	8004b30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e017      	b.n	8004b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	11db      	asrs	r3, r3, #7
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f003 0306 	and.w	r3, r3, #6
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f063 030e 	orn	r3, r3, #14
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4907      	ldr	r1, [pc, #28]	; (8004b70 <I2C_MasterRequestRead+0x198>)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f888 	bl	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	00010008 	.word	0x00010008
 8004b70:	00010002 	.word	0x00010002

08004b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b84:	e048      	b.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d044      	beq.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fe f929 	bl	8002de4 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d139      	bne.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10d      	bne.n	8004bca <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	43da      	mvns	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	e00c      	b.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	43da      	mvns	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d116      	bne.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e023      	b.n	8004c60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10d      	bne.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	e00c      	b.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d093      	beq.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c76:	e071      	b.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c86:	d123      	bne.n	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f043 0204 	orr.w	r2, r3, #4
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e067      	b.n	8004da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d041      	beq.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd8:	f7fe f884 	bl	8002de4 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d136      	bne.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10c      	bne.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4013      	ands	r3, r2
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	e00b      	b.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	43da      	mvns	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e021      	b.n	8004da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	0c1b      	lsrs	r3, r3, #16
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d10c      	bne.n	8004d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e00b      	b.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	43da      	mvns	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf14      	ite	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	2300      	moveq	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f af6d 	bne.w	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db4:	e049      	b.n	8004e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d119      	bne.n	8004df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0210 	mvn.w	r2, #16
 8004dcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e030      	b.n	8004e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df8:	f7fd fff4 	bl	8002de4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d11d      	bne.n	8004e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d016      	beq.n	8004e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e007      	b.n	8004e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d1ae      	bne.n	8004db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e272      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8087 	beq.w	8004f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e84:	4b92      	ldr	r3, [pc, #584]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d00c      	beq.n	8004eaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e90:	4b8f      	ldr	r3, [pc, #572]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d112      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x5e>
 8004e9c:	4b8c      	ldr	r3, [pc, #560]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eaa:	4b89      	ldr	r3, [pc, #548]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d06c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x12c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d168      	bne.n	8004f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e24c      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x76>
 8004ecc:	4b80      	ldr	r3, [pc, #512]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a7f      	ldr	r2, [pc, #508]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e02e      	b.n	8004f38 <HAL_RCC_OscConfig+0xd4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x98>
 8004ee2:	4b7b      	ldr	r3, [pc, #492]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7a      	ldr	r2, [pc, #488]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b78      	ldr	r3, [pc, #480]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a77      	ldr	r2, [pc, #476]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e01d      	b.n	8004f38 <HAL_RCC_OscConfig+0xd4>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0xbc>
 8004f06:	4b72      	ldr	r3, [pc, #456]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a71      	ldr	r2, [pc, #452]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4b6f      	ldr	r3, [pc, #444]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a6e      	ldr	r2, [pc, #440]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0xd4>
 8004f20:	4b6b      	ldr	r3, [pc, #428]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a6a      	ldr	r2, [pc, #424]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b68      	ldr	r3, [pc, #416]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a67      	ldr	r2, [pc, #412]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d013      	beq.n	8004f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fd ff50 	bl	8002de4 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fd ff4c 	bl	8002de4 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e200      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0xe4>
 8004f66:	e014      	b.n	8004f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fd ff3c 	bl	8002de4 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fd ff38 	bl	8002de4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	; 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1ec      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f82:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x10c>
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d063      	beq.n	8005066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f9e:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004faa:	4b49      	ldr	r3, [pc, #292]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d11c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x18c>
 8004fb6:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d116      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	4b43      	ldr	r3, [pc, #268]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCC_OscConfig+0x176>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e1c0      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fda:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4939      	ldr	r1, [pc, #228]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fee:	e03a      	b.n	8005066 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d020      	beq.n	800503a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fd fef1 	bl	8002de4 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005006:	f7fd feed 	bl	8002de4 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1a1      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005024:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4927      	ldr	r1, [pc, #156]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
 8005038:	e015      	b.n	8005066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503a:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fd fed0 	bl	8002de4 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005048:	f7fd fecc 	bl	8002de4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e180      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d03a      	beq.n	80050e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d019      	beq.n	80050ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507a:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <HAL_RCC_OscConfig+0x274>)
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005080:	f7fd feb0 	bl	8002de4 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005088:	f7fd feac 	bl	8002de4 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e160      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <HAL_RCC_OscConfig+0x26c>)
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050a6:	2001      	movs	r0, #1
 80050a8:	f000 face 	bl	8005648 <RCC_Delay>
 80050ac:	e01c      	b.n	80050e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_RCC_OscConfig+0x274>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b4:	f7fd fe96 	bl	8002de4 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ba:	e00f      	b.n	80050dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050bc:	f7fd fe92 	bl	8002de4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d908      	bls.n	80050dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e146      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	42420000 	.word	0x42420000
 80050d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b92      	ldr	r3, [pc, #584]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e9      	bne.n	80050bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80a6 	beq.w	8005242 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b8b      	ldr	r3, [pc, #556]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10d      	bne.n	8005122 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	4b88      	ldr	r3, [pc, #544]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	4a87      	ldr	r2, [pc, #540]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	61d3      	str	r3, [r2, #28]
 8005112:	4b85      	ldr	r3, [pc, #532]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b82      	ldr	r3, [pc, #520]	; (800532c <HAL_RCC_OscConfig+0x4c8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b7f      	ldr	r3, [pc, #508]	; (800532c <HAL_RCC_OscConfig+0x4c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a7e      	ldr	r2, [pc, #504]	; (800532c <HAL_RCC_OscConfig+0x4c8>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fd fe53 	bl	8002de4 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fd fe4f 	bl	8002de4 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e103      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	4b75      	ldr	r3, [pc, #468]	; (800532c <HAL_RCC_OscConfig+0x4c8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x312>
 8005168:	4b6f      	ldr	r3, [pc, #444]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	4a6e      	ldr	r2, [pc, #440]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6213      	str	r3, [r2, #32]
 8005174:	e02d      	b.n	80051d2 <HAL_RCC_OscConfig+0x36e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x334>
 800517e:	4b6a      	ldr	r3, [pc, #424]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a69      	ldr	r2, [pc, #420]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	6213      	str	r3, [r2, #32]
 800518a:	4b67      	ldr	r3, [pc, #412]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	4a66      	ldr	r2, [pc, #408]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	6213      	str	r3, [r2, #32]
 8005196:	e01c      	b.n	80051d2 <HAL_RCC_OscConfig+0x36e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x356>
 80051a0:	4b61      	ldr	r3, [pc, #388]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4a60      	ldr	r2, [pc, #384]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6213      	str	r3, [r2, #32]
 80051ac:	4b5e      	ldr	r3, [pc, #376]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	4a5d      	ldr	r2, [pc, #372]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6213      	str	r3, [r2, #32]
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x36e>
 80051ba:	4b5b      	ldr	r3, [pc, #364]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4a5a      	ldr	r2, [pc, #360]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6213      	str	r3, [r2, #32]
 80051c6:	4b58      	ldr	r3, [pc, #352]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	4a57      	ldr	r2, [pc, #348]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051da:	f7fd fe03 	bl	8002de4 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fd fdff 	bl	8002de4 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0b1      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b4b      	ldr	r3, [pc, #300]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCC_OscConfig+0x37e>
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fd fded 	bl	8002de4 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fd fde9 	bl	8002de4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e09b      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	4b40      	ldr	r3, [pc, #256]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ee      	bne.n	800520e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4b3c      	ldr	r3, [pc, #240]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	4a3b      	ldr	r2, [pc, #236]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8087 	beq.w	800535a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800524c:	4b36      	ldr	r3, [pc, #216]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d061      	beq.n	800531c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d146      	bne.n	80052ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005260:	4b33      	ldr	r3, [pc, #204]	; (8005330 <HAL_RCC_OscConfig+0x4cc>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fd fdbd 	bl	8002de4 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526e:	f7fd fdb9 	bl	8002de4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e06d      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005280:	4b29      	ldr	r3, [pc, #164]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d108      	bne.n	80052a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	4921      	ldr	r1, [pc, #132]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a19      	ldr	r1, [r3, #32]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	430b      	orrs	r3, r1
 80052ba:	491b      	ldr	r1, [pc, #108]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <HAL_RCC_OscConfig+0x4cc>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fd fd8d 	bl	8002de4 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fd fd89 	bl	8002de4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e03d      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e0:	4b11      	ldr	r3, [pc, #68]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x46a>
 80052ec:	e035      	b.n	800535a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <HAL_RCC_OscConfig+0x4cc>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fd fd76 	bl	8002de4 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fd fd72 	bl	8002de4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e026      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_RCC_OscConfig+0x4c4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x498>
 800531a:	e01e      	b.n	800535a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d107      	bne.n	8005334 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e019      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
 8005328:	40021000 	.word	0x40021000
 800532c:	40007000 	.word	0x40007000
 8005330:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_RCC_OscConfig+0x500>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	429a      	cmp	r2, r3
 8005346:	d106      	bne.n	8005356 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000

08005368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0d0      	b.n	800551e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800537c:	4b6a      	ldr	r3, [pc, #424]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d910      	bls.n	80053ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b67      	ldr	r3, [pc, #412]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 0207 	bic.w	r2, r3, #7
 8005392:	4965      	ldr	r1, [pc, #404]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b63      	ldr	r3, [pc, #396]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0b8      	b.n	800551e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c4:	4b59      	ldr	r3, [pc, #356]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4a58      	ldr	r2, [pc, #352]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053dc:	4b53      	ldr	r3, [pc, #332]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4a52      	ldr	r2, [pc, #328]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e8:	4b50      	ldr	r3, [pc, #320]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	494d      	ldr	r1, [pc, #308]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d040      	beq.n	8005488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	4b47      	ldr	r3, [pc, #284]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d115      	bne.n	8005446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e07f      	b.n	800551e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005426:	4b41      	ldr	r3, [pc, #260]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e073      	b.n	800551e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005436:	4b3d      	ldr	r3, [pc, #244]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06b      	b.n	800551e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f023 0203 	bic.w	r2, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4936      	ldr	r1, [pc, #216]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005458:	f7fd fcc4 	bl	8002de4 <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	e00a      	b.n	8005476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005460:	f7fd fcc0 	bl	8002de4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f241 3288 	movw	r2, #5000	; 0x1388
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e053      	b.n	800551e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	4b2d      	ldr	r3, [pc, #180]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 020c 	and.w	r2, r3, #12
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	429a      	cmp	r2, r3
 8005486:	d1eb      	bne.n	8005460 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d210      	bcs.n	80054b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005496:	4b24      	ldr	r3, [pc, #144]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 0207 	bic.w	r2, r3, #7
 800549e:	4922      	ldr	r1, [pc, #136]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e032      	b.n	800551e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c4:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4916      	ldr	r1, [pc, #88]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	490e      	ldr	r1, [pc, #56]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054f6:	f000 f821 	bl	800553c <HAL_RCC_GetSysClockFreq>
 80054fa:	4602      	mov	r2, r0
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	490a      	ldr	r1, [pc, #40]	; (8005530 <HAL_RCC_ClockConfig+0x1c8>)
 8005508:	5ccb      	ldrb	r3, [r1, r3]
 800550a:	fa22 f303 	lsr.w	r3, r2, r3
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <HAL_RCC_ClockConfig+0x1cc>)
 8005510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <HAL_RCC_ClockConfig+0x1d0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7fd fc22 	bl	8002d60 <HAL_InitTick>

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40022000 	.word	0x40022000
 800552c:	40021000 	.word	0x40021000
 8005530:	080083b8 	.word	0x080083b8
 8005534:	20000028 	.word	0x20000028
 8005538:	2000002c 	.word	0x2000002c

0800553c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005556:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b04      	cmp	r3, #4
 8005564:	d002      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x30>
 8005566:	2b08      	cmp	r3, #8
 8005568:	d003      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x36>
 800556a:	e027      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800556e:	613b      	str	r3, [r7, #16]
      break;
 8005570:	e027      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	0c9b      	lsrs	r3, r3, #18
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800557c:	5cd3      	ldrb	r3, [r2, r3]
 800557e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d010      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	0c5b      	lsrs	r3, r3, #17
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	4a11      	ldr	r2, [pc, #68]	; (80055dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005596:	5cd3      	ldrb	r3, [r2, r3]
 8005598:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a0d      	ldr	r2, [pc, #52]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800559e:	fb03 f202 	mul.w	r2, r3, r2
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e004      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055b0:	fb02 f303 	mul.w	r3, r2, r3
 80055b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	613b      	str	r3, [r7, #16]
      break;
 80055ba:	e002      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80055be:	613b      	str	r3, [r7, #16]
      break;
 80055c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c2:	693b      	ldr	r3, [r7, #16]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
 80055d4:	007a1200 	.word	0x007a1200
 80055d8:	080083d0 	.word	0x080083d0
 80055dc:	080083e0 	.word	0x080083e0
 80055e0:	003d0900 	.word	0x003d0900

080055e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e8:	4b02      	ldr	r3, [pc, #8]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	20000028 	.word	0x20000028

080055f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055fc:	f7ff fff2 	bl	80055e4 <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4903      	ldr	r1, [pc, #12]	; (800561c <HAL_RCC_GetPCLK1Freq+0x24>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	080083c8 	.word	0x080083c8

08005620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005624:	f7ff ffde 	bl	80055e4 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	0adb      	lsrs	r3, r3, #11
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4903      	ldr	r1, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000
 8005644:	080083c8 	.word	0x080083c8

08005648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <RCC_Delay+0x34>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <RCC_Delay+0x38>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	0a5b      	lsrs	r3, r3, #9
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005664:	bf00      	nop
  }
  while (Delay --);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	60fa      	str	r2, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f9      	bne.n	8005664 <RCC_Delay+0x1c>
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	20000028 	.word	0x20000028
 8005680:	10624dd3 	.word	0x10624dd3

08005684 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d07d      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056a0:	2300      	movs	r3, #0
 80056a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a4:	4b4f      	ldr	r3, [pc, #316]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10d      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b0:	4b4c      	ldr	r3, [pc, #304]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4a4b      	ldr	r2, [pc, #300]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ba:	61d3      	str	r3, [r2, #28]
 80056bc:	4b49      	ldr	r3, [pc, #292]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c8:	2301      	movs	r3, #1
 80056ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	4b46      	ldr	r3, [pc, #280]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d118      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056d8:	4b43      	ldr	r3, [pc, #268]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a42      	ldr	r2, [pc, #264]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e4:	f7fd fb7e 	bl	8002de4 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ea:	e008      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ec:	f7fd fb7a 	bl	8002de4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	; 0x64
 80056f8:	d901      	bls.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e06d      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fe:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800570a:	4b36      	ldr	r3, [pc, #216]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005712:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d02e      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	429a      	cmp	r2, r3
 8005726:	d027      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005728:	4b2e      	ldr	r3, [pc, #184]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005730:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005738:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800573e:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d014      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574e:	f7fd fb49 	bl	8002de4 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005754:	e00a      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fd fb45 	bl	8002de4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e036      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576c:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ee      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005778:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4917      	ldr	r1, [pc, #92]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005786:	4313      	orrs	r3, r2
 8005788:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005790:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	490b      	ldr	r1, [pc, #44]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c6:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4904      	ldr	r1, [pc, #16]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40007000 	.word	0x40007000
 80057ec:	42420440 	.word	0x42420440

080057f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e076      	b.n	80058f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d108      	bne.n	800581c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005812:	d009      	beq.n	8005828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
 800581a:	e005      	b.n	8005828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fc02 	bl	800204c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	ea42 0103 	orr.w	r1, r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	0c1a      	lsrs	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f002 0204 	and.w	r2, r2, #4
 80058ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_SPI_Transmit+0x22>
 8005916:	2302      	movs	r3, #2
 8005918:	e12d      	b.n	8005b76 <HAL_SPI_Transmit+0x27e>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005922:	f7fd fa5f 	bl	8002de4 <HAL_GetTick>
 8005926:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d002      	beq.n	800593e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005938:	2302      	movs	r3, #2
 800593a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800593c:	e116      	b.n	8005b6c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_SPI_Transmit+0x52>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800594e:	e10d      	b.n	8005b6c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2203      	movs	r2, #3
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	88fa      	ldrh	r2, [r7, #6]
 8005968:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005996:	d10f      	bne.n	80059b8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d007      	beq.n	80059d6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059de:	d14f      	bne.n	8005a80 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_SPI_Transmit+0xf6>
 80059e8:	8afb      	ldrh	r3, [r7, #22]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d142      	bne.n	8005a74 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	881a      	ldrh	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	1c9a      	adds	r2, r3, #2
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a12:	e02f      	b.n	8005a74 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d112      	bne.n	8005a48 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	881a      	ldrh	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a46:	e015      	b.n	8005a74 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a48:	f7fd f9cc 	bl	8002de4 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d803      	bhi.n	8005a60 <HAL_SPI_Transmit+0x168>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_Transmit+0x16e>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a72:	e07b      	b.n	8005b6c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ca      	bne.n	8005a14 <HAL_SPI_Transmit+0x11c>
 8005a7e:	e050      	b.n	8005b22 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_Transmit+0x196>
 8005a88:	8afb      	ldrh	r3, [r7, #22]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d144      	bne.n	8005b18 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ab4:	e030      	b.n	8005b18 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d113      	bne.n	8005aec <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	7812      	ldrb	r2, [r2, #0]
 8005ad0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005aea:	e015      	b.n	8005b18 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aec:	f7fd f97a 	bl	8002de4 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d803      	bhi.n	8005b04 <HAL_SPI_Transmit+0x20c>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d102      	bne.n	8005b0a <HAL_SPI_Transmit+0x212>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b16:	e029      	b.n	8005b6c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1c9      	bne.n	8005ab6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f8b2 	bl	8005c90 <SPI_EndRxTxTransaction>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e003      	b.n	8005b6c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b90:	f7fd f928 	bl	8002de4 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba0:	f7fd f920 	bl	8002de4 <HAL_GetTick>
 8005ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ba6:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	015b      	lsls	r3, r3, #5
 8005bac:	0d1b      	lsrs	r3, r3, #20
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bb6:	e054      	b.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d050      	beq.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc0:	f7fd f910 	bl	8002de4 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d902      	bls.n	8005bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d13d      	bne.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bee:	d111      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf8:	d004      	beq.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d107      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1c:	d10f      	bne.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e017      	b.n	8005c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d19b      	bne.n	8005bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000028 	.word	0x20000028

08005c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff ff6a 	bl	8005b80 <SPI_WaitFlagStateUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e000      	b.n	8005cc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc fd6e 	bl	80027d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 fe82 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e044      	b.n	8005e0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_TIM_Base_Start_IT+0xac>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <HAL_TIM_Base_Start_IT+0xb0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d00e      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <HAL_TIM_Base_Start_IT+0xb4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a16      	ldr	r2, [pc, #88]	; (8005e24 <HAL_TIM_Base_Start_IT+0xb8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a15      	ldr	r2, [pc, #84]	; (8005e28 <HAL_TIM_Base_Start_IT+0xbc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d111      	bne.n	8005dfc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d010      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	e007      	b.n	8005e0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00

08005e2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e041      	b.n	8005ec2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f839 	bl	8005eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f000 fdd2 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <HAL_TIM_PWM_Start+0x24>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	bf14      	ite	ne
 8005ef8:	2301      	movne	r3, #1
 8005efa:	2300      	moveq	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e022      	b.n	8005f46 <HAL_TIM_PWM_Start+0x6a>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d109      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x3e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	bf14      	ite	ne
 8005f12:	2301      	movne	r3, #1
 8005f14:	2300      	moveq	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	e015      	b.n	8005f46 <HAL_TIM_PWM_Start+0x6a>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d109      	bne.n	8005f34 <HAL_TIM_PWM_Start+0x58>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e008      	b.n	8005f46 <HAL_TIM_PWM_Start+0x6a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e072      	b.n	8006034 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Start+0x82>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f5c:	e013      	b.n	8005f86 <HAL_TIM_PWM_Start+0xaa>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x92>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6c:	e00b      	b.n	8005f86 <HAL_TIM_PWM_Start+0xaa>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Start+0xa2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f7c:	e003      	b.n	8005f86 <HAL_TIM_PWM_Start+0xaa>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fffc 	bl	8006f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a28      	ldr	r2, [pc, #160]	; (800603c <HAL_TIM_PWM_Start+0x160>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0xcc>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a27      	ldr	r2, [pc, #156]	; (8006040 <HAL_TIM_PWM_Start+0x164>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <HAL_TIM_PWM_Start+0xd0>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_TIM_PWM_Start+0xd2>
 8005fac:	2300      	movs	r3, #0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1d      	ldr	r2, [pc, #116]	; (800603c <HAL_TIM_PWM_Start+0x160>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x122>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_TIM_PWM_Start+0x164>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x122>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d00e      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x122>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a17      	ldr	r2, [pc, #92]	; (8006044 <HAL_TIM_PWM_Start+0x168>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x122>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a16      	ldr	r2, [pc, #88]	; (8006048 <HAL_TIM_PWM_Start+0x16c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_TIM_PWM_Start+0x122>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a14      	ldr	r2, [pc, #80]	; (800604c <HAL_TIM_PWM_Start+0x170>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d111      	bne.n	8006022 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b06      	cmp	r3, #6
 800600e:	d010      	beq.n	8006032 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006020:	e007      	b.n	8006032 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40013400 	.word	0x40013400
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00

08006050 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2200      	movs	r2, #0
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 ff92 	bl	8006f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2e      	ldr	r2, [pc, #184]	; (8006128 <HAL_TIM_PWM_Stop+0xd8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_TIM_PWM_Stop+0x2c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2d      	ldr	r2, [pc, #180]	; (800612c <HAL_TIM_PWM_Stop+0xdc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d101      	bne.n	8006080 <HAL_TIM_PWM_Stop+0x30>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <HAL_TIM_PWM_Stop+0x32>
 8006080:	2300      	movs	r3, #0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <HAL_TIM_PWM_Stop+0x66>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	f240 4344 	movw	r3, #1092	; 0x444
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d107      	bne.n	80060b6 <HAL_TIM_PWM_Stop+0x66>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10f      	bne.n	80060e6 <HAL_TIM_PWM_Stop+0x96>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	f240 4344 	movw	r3, #1092	; 0x444
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d107      	bne.n	80060e6 <HAL_TIM_PWM_Stop+0x96>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_PWM_Stop+0xa6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f4:	e013      	b.n	800611e <HAL_TIM_PWM_Stop+0xce>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_PWM_Stop+0xb6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006104:	e00b      	b.n	800611e <HAL_TIM_PWM_Stop+0xce>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d104      	bne.n	8006116 <HAL_TIM_PWM_Stop+0xc6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006114:	e003      	b.n	800611e <HAL_TIM_PWM_Stop+0xce>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400

08006130 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <HAL_TIM_PWM_Start_IT+0x28>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e022      	b.n	800619e <HAL_TIM_PWM_Start_IT+0x6e>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d109      	bne.n	8006172 <HAL_TIM_PWM_Start_IT+0x42>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e015      	b.n	800619e <HAL_TIM_PWM_Start_IT+0x6e>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b08      	cmp	r3, #8
 8006176:	d109      	bne.n	800618c <HAL_TIM_PWM_Start_IT+0x5c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e008      	b.n	800619e <HAL_TIM_PWM_Start_IT+0x6e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e0bd      	b.n	8006322 <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_PWM_Start_IT+0x86>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b4:	e013      	b.n	80061de <HAL_TIM_PWM_Start_IT+0xae>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_PWM_Start_IT+0x96>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c4:	e00b      	b.n	80061de <HAL_TIM_PWM_Start_IT+0xae>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d104      	bne.n	80061d6 <HAL_TIM_PWM_Start_IT+0xa6>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d4:	e003      	b.n	80061de <HAL_TIM_PWM_Start_IT+0xae>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2202      	movs	r2, #2
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d841      	bhi.n	8006268 <HAL_TIM_PWM_Start_IT+0x138>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <HAL_TIM_PWM_Start_IT+0xbc>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006221 	.word	0x08006221
 80061f0:	08006269 	.word	0x08006269
 80061f4:	08006269 	.word	0x08006269
 80061f8:	08006269 	.word	0x08006269
 80061fc:	08006233 	.word	0x08006233
 8006200:	08006269 	.word	0x08006269
 8006204:	08006269 	.word	0x08006269
 8006208:	08006269 	.word	0x08006269
 800620c:	08006245 	.word	0x08006245
 8006210:	08006269 	.word	0x08006269
 8006214:	08006269 	.word	0x08006269
 8006218:	08006269 	.word	0x08006269
 800621c:	08006257 	.word	0x08006257
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0202 	orr.w	r2, r2, #2
 800622e:	60da      	str	r2, [r3, #12]
      break;
 8006230:	e01d      	b.n	800626e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0204 	orr.w	r2, r2, #4
 8006240:	60da      	str	r2, [r3, #12]
      break;
 8006242:	e014      	b.n	800626e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0208 	orr.w	r2, r2, #8
 8006252:	60da      	str	r2, [r3, #12]
      break;
 8006254:	e00b      	b.n	800626e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0210 	orr.w	r2, r2, #16
 8006264:	60da      	str	r2, [r3, #12]
      break;
 8006266:	e002      	b.n	800626e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	bf00      	nop
  }

  if (status == HAL_OK)
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d155      	bne.n	8006320 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2201      	movs	r2, #1
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fe85 	bl	8006f8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a29      	ldr	r2, [pc, #164]	; (800632c <HAL_TIM_PWM_Start_IT+0x1fc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIM_PWM_Start_IT+0x166>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a27      	ldr	r2, [pc, #156]	; (8006330 <HAL_TIM_PWM_Start_IT+0x200>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_TIM_PWM_Start_IT+0x16a>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_TIM_PWM_Start_IT+0x16c>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <HAL_TIM_PWM_Start_IT+0x1fc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_TIM_PWM_Start_IT+0x1bc>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_TIM_PWM_Start_IT+0x200>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_TIM_PWM_Start_IT+0x1bc>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d00e      	beq.n	80062ec <HAL_TIM_PWM_Start_IT+0x1bc>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a18      	ldr	r2, [pc, #96]	; (8006334 <HAL_TIM_PWM_Start_IT+0x204>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIM_PWM_Start_IT+0x1bc>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a16      	ldr	r2, [pc, #88]	; (8006338 <HAL_TIM_PWM_Start_IT+0x208>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_PWM_Start_IT+0x1bc>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a15      	ldr	r2, [pc, #84]	; (800633c <HAL_TIM_PWM_Start_IT+0x20c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d111      	bne.n	8006310 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d010      	beq.n	8006320 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630e:	e007      	b.n	8006320 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40013400 	.word	0x40013400
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00

08006340 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b0c      	cmp	r3, #12
 8006352:	d841      	bhi.n	80063d8 <HAL_TIM_PWM_Stop_IT+0x98>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006391 	.word	0x08006391
 8006360:	080063d9 	.word	0x080063d9
 8006364:	080063d9 	.word	0x080063d9
 8006368:	080063d9 	.word	0x080063d9
 800636c:	080063a3 	.word	0x080063a3
 8006370:	080063d9 	.word	0x080063d9
 8006374:	080063d9 	.word	0x080063d9
 8006378:	080063d9 	.word	0x080063d9
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063d9 	.word	0x080063d9
 8006384:	080063d9 	.word	0x080063d9
 8006388:	080063d9 	.word	0x080063d9
 800638c:	080063c7 	.word	0x080063c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0202 	bic.w	r2, r2, #2
 800639e:	60da      	str	r2, [r3, #12]
      break;
 80063a0:	e01d      	b.n	80063de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0204 	bic.w	r2, r2, #4
 80063b0:	60da      	str	r2, [r3, #12]
      break;
 80063b2:	e014      	b.n	80063de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0208 	bic.w	r2, r2, #8
 80063c2:	60da      	str	r2, [r3, #12]
      break;
 80063c4:	e00b      	b.n	80063de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0210 	bic.w	r2, r2, #16
 80063d4:	60da      	str	r2, [r3, #12]
      break;
 80063d6:	e002      	b.n	80063de <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
      break;
 80063dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d161      	bne.n	80064a8 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fdcd 	bl	8006f8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2f      	ldr	r2, [pc, #188]	; (80064b4 <HAL_TIM_PWM_Stop_IT+0x174>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_TIM_PWM_Stop_IT+0xc6>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2d      	ldr	r2, [pc, #180]	; (80064b8 <HAL_TIM_PWM_Stop_IT+0x178>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d101      	bne.n	800640a <HAL_TIM_PWM_Stop_IT+0xca>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <HAL_TIM_PWM_Stop_IT+0xcc>
 800640a:	2300      	movs	r3, #0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	f241 1311 	movw	r3, #4369	; 0x1111
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10f      	bne.n	8006440 <HAL_TIM_PWM_Stop_IT+0x100>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6a1a      	ldr	r2, [r3, #32]
 8006426:	f240 4344 	movw	r3, #1092	; 0x444
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <HAL_TIM_PWM_Stop_IT+0x100>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6a1a      	ldr	r2, [r3, #32]
 8006446:	f241 1311 	movw	r3, #4369	; 0x1111
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10f      	bne.n	8006470 <HAL_TIM_PWM_Stop_IT+0x130>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6a1a      	ldr	r2, [r3, #32]
 8006456:	f240 4344 	movw	r3, #1092	; 0x444
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d107      	bne.n	8006470 <HAL_TIM_PWM_Stop_IT+0x130>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0201 	bic.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_TIM_PWM_Stop_IT+0x140>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800647e:	e013      	b.n	80064a8 <HAL_TIM_PWM_Stop_IT+0x168>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b04      	cmp	r3, #4
 8006484:	d104      	bne.n	8006490 <HAL_TIM_PWM_Stop_IT+0x150>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800648e:	e00b      	b.n	80064a8 <HAL_TIM_PWM_Stop_IT+0x168>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d104      	bne.n	80064a0 <HAL_TIM_PWM_Stop_IT+0x160>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800649e:	e003      	b.n	80064a8 <HAL_TIM_PWM_Stop_IT+0x168>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40013400 	.word	0x40013400

080064bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0202 	mvn.w	r2, #2
 80064e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa76 	bl	80069f0 <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa69 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fb fe1b 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b04      	cmp	r3, #4
 8006524:	d122      	bne.n	800656c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b04      	cmp	r3, #4
 8006532:	d11b      	bne.n	800656c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0204 	mvn.w	r2, #4
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2202      	movs	r2, #2
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa4c 	bl	80069f0 <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa3f 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fb fdf1 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b08      	cmp	r3, #8
 8006578:	d122      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b08      	cmp	r3, #8
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0208 	mvn.w	r2, #8
 8006590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2204      	movs	r2, #4
 8006596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa22 	bl	80069f0 <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa15 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fb fdc7 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d122      	bne.n	8006614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d11b      	bne.n	8006614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0210 	mvn.w	r2, #16
 80065e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2208      	movs	r2, #8
 80065ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9f8 	bl	80069f0 <HAL_TIM_IC_CaptureCallback>
 8006600:	e005      	b.n	800660e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f9eb 	bl	80069de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7fb fd9d 	bl	8002148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b01      	cmp	r3, #1
 8006620:	d10e      	bne.n	8006640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0201 	mvn.w	r2, #1
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb f9c3 	bl	80019c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d10e      	bne.n	800666c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b80      	cmp	r3, #128	; 0x80
 800665a:	d107      	bne.n	800666c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fd7a 	bl	8007160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d10e      	bne.n	8006698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d107      	bne.n	8006698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9b5 	bl	8006a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d10e      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d107      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0220 	mvn.w	r2, #32
 80066bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fd45 	bl	800714e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e0ae      	b.n	8006848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	f200 809f 	bhi.w	8006838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006735 	.word	0x08006735
 8006704:	08006839 	.word	0x08006839
 8006708:	08006839 	.word	0x08006839
 800670c:	08006839 	.word	0x08006839
 8006710:	08006775 	.word	0x08006775
 8006714:	08006839 	.word	0x08006839
 8006718:	08006839 	.word	0x08006839
 800671c:	08006839 	.word	0x08006839
 8006720:	080067b7 	.word	0x080067b7
 8006724:	08006839 	.word	0x08006839
 8006728:	08006839 	.word	0x08006839
 800672c:	08006839 	.word	0x08006839
 8006730:	080067f7 	.word	0x080067f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f9e4 	bl	8006b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0208 	orr.w	r2, r2, #8
 800674e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0204 	bic.w	r2, r2, #4
 800675e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6999      	ldr	r1, [r3, #24]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	619a      	str	r2, [r3, #24]
      break;
 8006772:	e064      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fa34 	bl	8006be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	021a      	lsls	r2, r3, #8
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	619a      	str	r2, [r3, #24]
      break;
 80067b4:	e043      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fa87 	bl	8006cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0208 	orr.w	r2, r2, #8
 80067d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0204 	bic.w	r2, r2, #4
 80067e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69d9      	ldr	r1, [r3, #28]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	61da      	str	r2, [r3, #28]
      break;
 80067f4:	e023      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fadb 	bl	8006db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69d9      	ldr	r1, [r3, #28]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	021a      	lsls	r2, r3, #8
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	61da      	str	r2, [r3, #28]
      break;
 8006836:	e002      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
      break;
 800683c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIM_ConfigClockSource+0x1c>
 8006868:	2302      	movs	r3, #2
 800686a:	e0b4      	b.n	80069d6 <HAL_TIM_ConfigClockSource+0x186>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800688a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a4:	d03e      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0xd4>
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068aa:	f200 8087 	bhi.w	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	f000 8086 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x172>
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	d87f      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068bc:	2b70      	cmp	r3, #112	; 0x70
 80068be:	d01a      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0xa6>
 80068c0:	2b70      	cmp	r3, #112	; 0x70
 80068c2:	d87b      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b60      	cmp	r3, #96	; 0x60
 80068c6:	d050      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x11a>
 80068c8:	2b60      	cmp	r3, #96	; 0x60
 80068ca:	d877      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b50      	cmp	r3, #80	; 0x50
 80068ce:	d03c      	beq.n	800694a <HAL_TIM_ConfigClockSource+0xfa>
 80068d0:	2b50      	cmp	r3, #80	; 0x50
 80068d2:	d873      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d058      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x13a>
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d86f      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b30      	cmp	r3, #48	; 0x30
 80068de:	d064      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068e0:	2b30      	cmp	r3, #48	; 0x30
 80068e2:	d86b      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d060      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d867      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d05c      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d05a      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x15a>
 80068f4:	e062      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006906:	f000 fb22 	bl	8006f4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	609a      	str	r2, [r3, #8]
      break;
 8006922:	e04f      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006934:	f000 fb0b 	bl	8006f4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006946:	609a      	str	r2, [r3, #8]
      break;
 8006948:	e03c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fa82 	bl	8006e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2150      	movs	r1, #80	; 0x50
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fad9 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 8006968:	e02c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006976:	461a      	mov	r2, r3
 8006978:	f000 faa0 	bl	8006ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2160      	movs	r1, #96	; 0x60
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fac9 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 8006988:	e01c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006996:	461a      	mov	r2, r3
 8006998:	f000 fa62 	bl	8006e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2140      	movs	r1, #64	; 0x40
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fab9 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 80069a8:	e00c      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f000 fab0 	bl	8006f1a <TIM_ITRx_SetConfig>
      break;
 80069ba:	e003      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
      break;
 80069c0:	e000      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a33      	ldr	r2, [pc, #204]	; (8006af4 <TIM_Base_SetConfig+0xe0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a32      	ldr	r2, [pc, #200]	; (8006af8 <TIM_Base_SetConfig+0xe4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00f      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3a:	d00b      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <TIM_Base_SetConfig+0xe8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a2e      	ldr	r2, [pc, #184]	; (8006b00 <TIM_Base_SetConfig+0xec>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a2d      	ldr	r2, [pc, #180]	; (8006b04 <TIM_Base_SetConfig+0xf0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d108      	bne.n	8006a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <TIM_Base_SetConfig+0xe0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <TIM_Base_SetConfig+0x82>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <TIM_Base_SetConfig+0xe4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00f      	beq.n	8006a96 <TIM_Base_SetConfig+0x82>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d00b      	beq.n	8006a96 <TIM_Base_SetConfig+0x82>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <TIM_Base_SetConfig+0xe8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_Base_SetConfig+0x82>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <TIM_Base_SetConfig+0xec>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_Base_SetConfig+0x82>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <TIM_Base_SetConfig+0xf0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d108      	bne.n	8006aa8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <TIM_Base_SetConfig+0xe0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_Base_SetConfig+0xc8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a08      	ldr	r2, [pc, #32]	; (8006af8 <TIM_Base_SetConfig+0xe4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00

08006b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f023 0201 	bic.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f023 0302 	bic.w	r3, r3, #2
 8006b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <TIM_OC1_SetConfig+0xd8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d003      	beq.n	8006b6c <TIM_OC1_SetConfig+0x64>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a1f      	ldr	r2, [pc, #124]	; (8006be4 <TIM_OC1_SetConfig+0xdc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d10c      	bne.n	8006b86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f023 0308 	bic.w	r3, r3, #8
 8006b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 0304 	bic.w	r3, r3, #4
 8006b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <TIM_OC1_SetConfig+0xd8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_OC1_SetConfig+0x8e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <TIM_OC1_SetConfig+0xdc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d111      	bne.n	8006bba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	621a      	str	r2, [r3, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40013400 	.word	0x40013400

08006be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f023 0210 	bic.w	r2, r3, #16
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0320 	bic.w	r3, r3, #32
 8006c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a21      	ldr	r2, [pc, #132]	; (8006cc8 <TIM_OC2_SetConfig+0xe0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_OC2_SetConfig+0x68>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a20      	ldr	r2, [pc, #128]	; (8006ccc <TIM_OC2_SetConfig+0xe4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10d      	bne.n	8006c6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <TIM_OC2_SetConfig+0xe0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC2_SetConfig+0x94>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <TIM_OC2_SetConfig+0xe4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d113      	bne.n	8006ca4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40013400 	.word	0x40013400

08006cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a21      	ldr	r2, [pc, #132]	; (8006db0 <TIM_OC3_SetConfig+0xe0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_OC3_SetConfig+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a20      	ldr	r2, [pc, #128]	; (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d10d      	bne.n	8006d52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <TIM_OC3_SetConfig+0xe0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_OC3_SetConfig+0x92>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d113      	bne.n	8006d8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40012c00 	.word	0x40012c00
 8006db4:	40013400 	.word	0x40013400

08006db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	031b      	lsls	r3, r3, #12
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a11      	ldr	r2, [pc, #68]	; (8006e58 <TIM_OC4_SetConfig+0xa0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_OC4_SetConfig+0x68>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <TIM_OC4_SetConfig+0xa4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d109      	bne.n	8006e34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	019b      	lsls	r3, r3, #6
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40013400 	.word	0x40013400

08006e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0201 	bic.w	r2, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 030a 	bic.w	r3, r3, #10
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f023 0210 	bic.w	r2, r3, #16
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	031b      	lsls	r3, r3, #12
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	621a      	str	r2, [r3, #32]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bc80      	pop	{r7}
 8006f18:	4770      	bx	lr

08006f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f043 0307 	orr.w	r3, r3, #7
 8006f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b087      	sub	sp, #28
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	021a      	lsls	r2, r3, #8
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	609a      	str	r2, [r3, #8]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 031f 	and.w	r3, r3, #31
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1a      	ldr	r2, [r3, #32]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	43db      	mvns	r3, r3
 8006fae:	401a      	ands	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e050      	b.n	800708e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d018      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a19      	ldr	r2, [pc, #100]	; (800709c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007042:	d00e      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d009      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a14      	ldr	r2, [pc, #80]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a12      	ldr	r2, [pc, #72]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d10c      	bne.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	4313      	orrs	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr
 8007098:	40012c00 	.word	0x40012c00
 800709c:	40013400 	.word	0x40013400
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40000c00 	.word	0x40000c00

080070ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e03d      	b.n	8007144 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr

0800714e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr

08007160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr

08007172 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e042      	b.n	800720a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7fb fd11 	bl	8002bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc80 	bl	8007abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b0ba      	sub	sp, #232	; 0xe8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800723a:	2300      	movs	r3, #0
 800723c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007240:	2300      	movs	r3, #0
 8007242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10f      	bne.n	800727a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800725a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <HAL_UART_IRQHandler+0x66>
 8007266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fb63 	bl	800793e <UART_Receive_IT>
      return;
 8007278:	e25b      	b.n	8007732 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800727a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80de 	beq.w	8007440 <HAL_UART_IRQHandler+0x22c>
 8007284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007294:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 80d1 	beq.w	8007440 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00b      	beq.n	80072c2 <HAL_UART_IRQHandler+0xae>
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	f043 0201 	orr.w	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <HAL_UART_IRQHandler+0xd2>
 80072ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	f043 0202 	orr.w	r2, r3, #2
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <HAL_UART_IRQHandler+0xf6>
 80072f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007302:	f043 0204 	orr.w	r2, r3, #4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800730a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d011      	beq.n	800733a <HAL_UART_IRQHandler+0x126>
 8007316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	f043 0208 	orr.w	r2, r3, #8
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 81f2 	beq.w	8007728 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_UART_IRQHandler+0x14e>
 8007350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 faee 	bl	800793e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	bf14      	ite	ne
 8007370:	2301      	movne	r3, #1
 8007372:	2300      	moveq	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <HAL_UART_IRQHandler+0x17a>
 8007386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d04f      	beq.n	800742e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9f8 	bl	8007784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d041      	beq.n	8007426 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3314      	adds	r3, #20
 80073a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3314      	adds	r3, #20
 80073ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1d9      	bne.n	80073a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d013      	beq.n	800741e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	4a7e      	ldr	r2, [pc, #504]	; (80075f4 <HAL_UART_IRQHandler+0x3e0>)
 80073fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007402:	4618      	mov	r0, r3
 8007404:	f7fc f900 	bl	8003608 <HAL_DMA_Abort_IT>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d016      	beq.n	800743c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007418:	4610      	mov	r0, r2
 800741a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e00e      	b.n	800743c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f99c 	bl	800775c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e00a      	b.n	800743c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f998 	bl	800775c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742c:	e006      	b.n	800743c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f994 	bl	800775c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800743a:	e175      	b.n	8007728 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	bf00      	nop
    return;
 800743e:	e173      	b.n	8007728 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	2b01      	cmp	r3, #1
 8007446:	f040 814f 	bne.w	80076e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8148 	beq.w	80076e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8141 	beq.w	80076e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007466:	2300      	movs	r3, #0
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60bb      	str	r3, [r7, #8]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 80b6 	beq.w	80075f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007498:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8145 	beq.w	800772c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074aa:	429a      	cmp	r2, r3
 80074ac:	f080 813e 	bcs.w	800772c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b20      	cmp	r3, #32
 80074c0:	f000 8088 	beq.w	80075d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	330c      	adds	r3, #12
 80074ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1d9      	bne.n	80074c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3314      	adds	r3, #20
 8007516:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007522:	f023 0301 	bic.w	r3, r3, #1
 8007526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007534:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007538:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800753c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e1      	bne.n	8007510 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3314      	adds	r3, #20
 8007552:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800755c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3314      	adds	r3, #20
 800756c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007570:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007572:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007576:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800757e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e3      	bne.n	800754c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a4:	f023 0310 	bic.w	r3, r3, #16
 80075a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80075b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e3      	bne.n	8007592 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fb ffde 	bl	8003590 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f8bf 	bl	800776e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075f0:	e09c      	b.n	800772c <HAL_UART_IRQHandler+0x518>
 80075f2:	bf00      	nop
 80075f4:	08007849 	.word	0x08007849
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007600:	b29b      	uxth	r3, r3
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 808e 	beq.w	8007730 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8089 	beq.w	8007730 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007642:	647a      	str	r2, [r7, #68]	; 0x44
 8007644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e3      	bne.n	800761e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3314      	adds	r3, #20
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	623b      	str	r3, [r7, #32]
   return(result);
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3314      	adds	r3, #20
 8007676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800767a:	633a      	str	r2, [r7, #48]	; 0x30
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e3      	bne.n	8007656 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076c0:	61fa      	str	r2, [r7, #28]
 80076c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	617b      	str	r3, [r7, #20]
   return(result);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e3      	bne.n	800769c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f844 	bl	800776e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076e6:	e023      	b.n	8007730 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <HAL_UART_IRQHandler+0x4f4>
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8b5 	bl	8007870 <UART_Transmit_IT>
    return;
 8007706:	e014      	b.n	8007732 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00e      	beq.n	8007732 <HAL_UART_IRQHandler+0x51e>
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f8f4 	bl	800790e <UART_EndTransmit_IT>
    return;
 8007726:	e004      	b.n	8007732 <HAL_UART_IRQHandler+0x51e>
    return;
 8007728:	bf00      	nop
 800772a:	e002      	b.n	8007732 <HAL_UART_IRQHandler+0x51e>
      return;
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <HAL_UART_IRQHandler+0x51e>
      return;
 8007730:	bf00      	nop
  }
}
 8007732:	37e8      	adds	r7, #232	; 0xe8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr

0800776e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b095      	sub	sp, #84	; 0x54
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	330c      	adds	r3, #12
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	e853 3f00 	ldrex	r3, [r3]
 800779a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077ac:	643a      	str	r2, [r7, #64]	; 0x40
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077b4:	e841 2300 	strex	r3, r2, [r1]
 80077b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e5      	bne.n	800778c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3314      	adds	r3, #20
 80077c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f023 0301 	bic.w	r3, r3, #1
 80077d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d119      	bne.n	8007830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60bb      	str	r3, [r7, #8]
   return(result);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	647b      	str	r3, [r7, #68]	; 0x44
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800781c:	61ba      	str	r2, [r7, #24]
 800781e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6979      	ldr	r1, [r7, #20]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e5      	bne.n	80077fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800783e:	bf00      	nop
 8007840:	3754      	adds	r7, #84	; 0x54
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr

08007848 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff ff7a 	bl	800775c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b21      	cmp	r3, #33	; 0x21
 8007882:	d13e      	bne.n	8007902 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788c:	d114      	bne.n	80078b8 <UART_Transmit_IT+0x48>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d110      	bne.n	80078b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	1c9a      	adds	r2, r3, #2
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]
 80078b6:	e008      	b.n	80078ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	1c59      	adds	r1, r3, #1
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6211      	str	r1, [r2, #32]
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4619      	mov	r1, r3
 80078d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10f      	bne.n	80078fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr

0800790e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007924:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff ff02 	bl	8007738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b08c      	sub	sp, #48	; 0x30
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b22      	cmp	r3, #34	; 0x22
 8007950:	f040 80ae 	bne.w	8007ab0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795c:	d117      	bne.n	800798e <UART_Receive_IT+0x50>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d113      	bne.n	800798e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	b29b      	uxth	r3, r3
 8007978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797c:	b29a      	uxth	r2, r3
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	1c9a      	adds	r2, r3, #2
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
 800798c:	e026      	b.n	80079dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007994:	2300      	movs	r3, #0
 8007996:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a0:	d007      	beq.n	80079b2 <UART_Receive_IT+0x74>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <UART_Receive_IT+0x82>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e008      	b.n	80079d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4619      	mov	r1, r3
 80079ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d15d      	bne.n	8007aac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0220 	bic.w	r2, r2, #32
 80079fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695a      	ldr	r2, [r3, #20]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0201 	bic.w	r2, r2, #1
 8007a1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d135      	bne.n	8007aa2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f023 0310 	bic.w	r3, r3, #16
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5c:	623a      	str	r2, [r7, #32]
 8007a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	69f9      	ldr	r1, [r7, #28]
 8007a62:	6a3a      	ldr	r2, [r7, #32]
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d10a      	bne.n	8007a94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff fe67 	bl	800776e <HAL_UARTEx_RxEventCallback>
 8007aa0:	e002      	b.n	8007aa8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fe51 	bl	800774a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e002      	b.n	8007ab2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3730      	adds	r7, #48	; 0x30
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007af6:	f023 030c 	bic.w	r3, r3, #12
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	430b      	orrs	r3, r1
 8007b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a2c      	ldr	r2, [pc, #176]	; (8007bd0 <UART_SetConfig+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d103      	bne.n	8007b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b24:	f7fd fd7c 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	e002      	b.n	8007b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fd fd64 	bl	80055f8 <HAL_RCC_GetPCLK1Freq>
 8007b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009a      	lsls	r2, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b48:	4a22      	ldr	r2, [pc, #136]	; (8007bd4 <UART_SetConfig+0x118>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	0119      	lsls	r1, r3, #4
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009a      	lsls	r2, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <UART_SetConfig+0x118>)
 8007b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	2064      	movs	r0, #100	; 0x64
 8007b72:	fb00 f303 	mul.w	r3, r0, r3
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	3332      	adds	r3, #50	; 0x32
 8007b7c:	4a15      	ldr	r2, [pc, #84]	; (8007bd4 <UART_SetConfig+0x118>)
 8007b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b82:	095b      	lsrs	r3, r3, #5
 8007b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b88:	4419      	add	r1, r3
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009a      	lsls	r2, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <UART_SetConfig+0x118>)
 8007ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2064      	movs	r0, #100	; 0x64
 8007baa:	fb00 f303 	mul.w	r3, r0, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	3332      	adds	r3, #50	; 0x32
 8007bb4:	4a07      	ldr	r2, [pc, #28]	; (8007bd4 <UART_SetConfig+0x118>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	f003 020f 	and.w	r2, r3, #15
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	440a      	add	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	40013800 	.word	0x40013800
 8007bd4:	51eb851f 	.word	0x51eb851f

08007bd8 <memset>:
 8007bd8:	4603      	mov	r3, r0
 8007bda:	4402      	add	r2, r0
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d100      	bne.n	8007be2 <memset+0xa>
 8007be0:	4770      	bx	lr
 8007be2:	f803 1b01 	strb.w	r1, [r3], #1
 8007be6:	e7f9      	b.n	8007bdc <memset+0x4>

08007be8 <__errno>:
 8007be8:	4b01      	ldr	r3, [pc, #4]	; (8007bf0 <__errno+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000080 	.word	0x20000080

08007bf4 <__libc_init_array>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	4d0c      	ldr	r5, [pc, #48]	; (8007c2c <__libc_init_array+0x38>)
 8007bfa:	4c0d      	ldr	r4, [pc, #52]	; (8007c30 <__libc_init_array+0x3c>)
 8007bfc:	1b64      	subs	r4, r4, r5
 8007bfe:	10a4      	asrs	r4, r4, #2
 8007c00:	42a6      	cmp	r6, r4
 8007c02:	d109      	bne.n	8007c18 <__libc_init_array+0x24>
 8007c04:	f000 fb86 	bl	8008314 <_init>
 8007c08:	2600      	movs	r6, #0
 8007c0a:	4d0a      	ldr	r5, [pc, #40]	; (8007c34 <__libc_init_array+0x40>)
 8007c0c:	4c0a      	ldr	r4, [pc, #40]	; (8007c38 <__libc_init_array+0x44>)
 8007c0e:	1b64      	subs	r4, r4, r5
 8007c10:	10a4      	asrs	r4, r4, #2
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	d105      	bne.n	8007c22 <__libc_init_array+0x2e>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1c:	4798      	blx	r3
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7ee      	b.n	8007c00 <__libc_init_array+0xc>
 8007c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c26:	4798      	blx	r3
 8007c28:	3601      	adds	r6, #1
 8007c2a:	e7f2      	b.n	8007c12 <__libc_init_array+0x1e>
 8007c2c:	08008458 	.word	0x08008458
 8007c30:	08008458 	.word	0x08008458
 8007c34:	08008458 	.word	0x08008458
 8007c38:	0800845c 	.word	0x0800845c

08007c3c <memcpy>:
 8007c3c:	440a      	add	r2, r1
 8007c3e:	4291      	cmp	r1, r2
 8007c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c44:	d100      	bne.n	8007c48 <memcpy+0xc>
 8007c46:	4770      	bx	lr
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c4e:	4291      	cmp	r1, r2
 8007c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c54:	d1f9      	bne.n	8007c4a <memcpy+0xe>
 8007c56:	bd10      	pop	{r4, pc}

08007c58 <atan2>:
 8007c58:	f000 b8fe 	b.w	8007e58 <__ieee754_atan2>

08007c5c <sqrt>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	4606      	mov	r6, r0
 8007c60:	460f      	mov	r7, r1
 8007c62:	f000 f81f 	bl	8007ca4 <__ieee754_sqrt>
 8007c66:	4632      	mov	r2, r6
 8007c68:	4604      	mov	r4, r0
 8007c6a:	460d      	mov	r5, r1
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	f7f8 ff2f 	bl	8000ad4 <__aeabi_dcmpun>
 8007c76:	b990      	cbnz	r0, 8007c9e <sqrt+0x42>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 ff00 	bl	8000a84 <__aeabi_dcmplt>
 8007c84:	b158      	cbz	r0, 8007c9e <sqrt+0x42>
 8007c86:	f7ff ffaf 	bl	8007be8 <__errno>
 8007c8a:	2321      	movs	r3, #33	; 0x21
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	6003      	str	r3, [r0, #0]
 8007c90:	2300      	movs	r3, #0
 8007c92:	4610      	mov	r0, r2
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7f8 fdad 	bl	80007f4 <__aeabi_ddiv>
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ca4 <__ieee754_sqrt>:
 8007ca4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007e48 <__ieee754_sqrt+0x1a4>
 8007ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	ea3c 0c01 	bics.w	ip, ip, r1
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460d      	mov	r5, r1
 8007cb6:	460a      	mov	r2, r1
 8007cb8:	4604      	mov	r4, r0
 8007cba:	d10e      	bne.n	8007cda <__ieee754_sqrt+0x36>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	f7f8 fc6f 	bl	80005a0 <__aeabi_dmul>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 fab3 	bl	8000234 <__adddf3>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	dc0d      	bgt.n	8007cfa <__ieee754_sqrt+0x56>
 8007cde:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007ce2:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007ce6:	d0f4      	beq.n	8007cd2 <__ieee754_sqrt+0x2e>
 8007ce8:	b139      	cbz	r1, 8007cfa <__ieee754_sqrt+0x56>
 8007cea:	4602      	mov	r2, r0
 8007cec:	f7f8 faa0 	bl	8000230 <__aeabi_dsub>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	f7f8 fd7e 	bl	80007f4 <__aeabi_ddiv>
 8007cf8:	e7e9      	b.n	8007cce <__ieee754_sqrt+0x2a>
 8007cfa:	1512      	asrs	r2, r2, #20
 8007cfc:	f000 8089 	beq.w	8007e12 <__ieee754_sqrt+0x16e>
 8007d00:	2500      	movs	r5, #0
 8007d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d06:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d0e:	07d2      	lsls	r2, r2, #31
 8007d10:	bf5c      	itt	pl
 8007d12:	005b      	lslpl	r3, r3, #1
 8007d14:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d1c:	bf58      	it	pl
 8007d1e:	0064      	lslpl	r4, r4, #1
 8007d20:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007d24:	0062      	lsls	r2, r4, #1
 8007d26:	2016      	movs	r0, #22
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007d2e:	1076      	asrs	r6, r6, #1
 8007d30:	190f      	adds	r7, r1, r4
 8007d32:	429f      	cmp	r7, r3
 8007d34:	bfde      	ittt	le
 8007d36:	1bdb      	suble	r3, r3, r7
 8007d38:	1939      	addle	r1, r7, r4
 8007d3a:	192d      	addle	r5, r5, r4
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	3801      	subs	r0, #1
 8007d40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007d44:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007d48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007d4c:	d1f0      	bne.n	8007d30 <__ieee754_sqrt+0x8c>
 8007d4e:	4604      	mov	r4, r0
 8007d50:	2720      	movs	r7, #32
 8007d52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007d56:	428b      	cmp	r3, r1
 8007d58:	eb0c 0e00 	add.w	lr, ip, r0
 8007d5c:	dc02      	bgt.n	8007d64 <__ieee754_sqrt+0xc0>
 8007d5e:	d113      	bne.n	8007d88 <__ieee754_sqrt+0xe4>
 8007d60:	4596      	cmp	lr, r2
 8007d62:	d811      	bhi.n	8007d88 <__ieee754_sqrt+0xe4>
 8007d64:	f1be 0f00 	cmp.w	lr, #0
 8007d68:	eb0e 000c 	add.w	r0, lr, ip
 8007d6c:	da56      	bge.n	8007e1c <__ieee754_sqrt+0x178>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	db54      	blt.n	8007e1c <__ieee754_sqrt+0x178>
 8007d72:	f101 0801 	add.w	r8, r1, #1
 8007d76:	1a5b      	subs	r3, r3, r1
 8007d78:	4641      	mov	r1, r8
 8007d7a:	4596      	cmp	lr, r2
 8007d7c:	bf88      	it	hi
 8007d7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007d82:	eba2 020e 	sub.w	r2, r2, lr
 8007d86:	4464      	add	r4, ip
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	3f01      	subs	r7, #1
 8007d8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007d90:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007d94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007d98:	d1dd      	bne.n	8007d56 <__ieee754_sqrt+0xb2>
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	d01b      	beq.n	8007dd6 <__ieee754_sqrt+0x132>
 8007d9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007e4c <__ieee754_sqrt+0x1a8>
 8007da2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007e50 <__ieee754_sqrt+0x1ac>
 8007da6:	e9da 0100 	ldrd	r0, r1, [sl]
 8007daa:	e9db 2300 	ldrd	r2, r3, [fp]
 8007dae:	f7f8 fa3f 	bl	8000230 <__aeabi_dsub>
 8007db2:	e9da 8900 	ldrd	r8, r9, [sl]
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	f7f8 fe6b 	bl	8000a98 <__aeabi_dcmple>
 8007dc2:	b140      	cbz	r0, 8007dd6 <__ieee754_sqrt+0x132>
 8007dc4:	e9da 0100 	ldrd	r0, r1, [sl]
 8007dc8:	e9db 2300 	ldrd	r2, r3, [fp]
 8007dcc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007dd0:	d126      	bne.n	8007e20 <__ieee754_sqrt+0x17c>
 8007dd2:	463c      	mov	r4, r7
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	106b      	asrs	r3, r5, #1
 8007dd8:	0864      	lsrs	r4, r4, #1
 8007dda:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007dde:	07ea      	lsls	r2, r5, #31
 8007de0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007de4:	bf48      	it	mi
 8007de6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8007dea:	4620      	mov	r0, r4
 8007dec:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007df0:	e76d      	b.n	8007cce <__ieee754_sqrt+0x2a>
 8007df2:	0ae3      	lsrs	r3, r4, #11
 8007df4:	3915      	subs	r1, #21
 8007df6:	0564      	lsls	r4, r4, #21
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0fa      	beq.n	8007df2 <__ieee754_sqrt+0x14e>
 8007dfc:	02d8      	lsls	r0, r3, #11
 8007dfe:	d50a      	bpl.n	8007e16 <__ieee754_sqrt+0x172>
 8007e00:	f1c2 0020 	rsb	r0, r2, #32
 8007e04:	fa24 f000 	lsr.w	r0, r4, r0
 8007e08:	1e55      	subs	r5, r2, #1
 8007e0a:	4094      	lsls	r4, r2
 8007e0c:	4303      	orrs	r3, r0
 8007e0e:	1b4a      	subs	r2, r1, r5
 8007e10:	e776      	b.n	8007d00 <__ieee754_sqrt+0x5c>
 8007e12:	4611      	mov	r1, r2
 8007e14:	e7f0      	b.n	8007df8 <__ieee754_sqrt+0x154>
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	3201      	adds	r2, #1
 8007e1a:	e7ef      	b.n	8007dfc <__ieee754_sqrt+0x158>
 8007e1c:	4688      	mov	r8, r1
 8007e1e:	e7aa      	b.n	8007d76 <__ieee754_sqrt+0xd2>
 8007e20:	f7f8 fa08 	bl	8000234 <__adddf3>
 8007e24:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fe28 	bl	8000a84 <__aeabi_dcmplt>
 8007e34:	b120      	cbz	r0, 8007e40 <__ieee754_sqrt+0x19c>
 8007e36:	1ca1      	adds	r1, r4, #2
 8007e38:	bf08      	it	eq
 8007e3a:	3501      	addeq	r5, #1
 8007e3c:	3402      	adds	r4, #2
 8007e3e:	e7ca      	b.n	8007dd6 <__ieee754_sqrt+0x132>
 8007e40:	3401      	adds	r4, #1
 8007e42:	f024 0401 	bic.w	r4, r4, #1
 8007e46:	e7c6      	b.n	8007dd6 <__ieee754_sqrt+0x132>
 8007e48:	7ff00000 	.word	0x7ff00000
 8007e4c:	20000088 	.word	0x20000088
 8007e50:	20000090 	.word	0x20000090
 8007e54:	00000000 	.word	0x00000000

08007e58 <__ieee754_atan2>:
 8007e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	4617      	mov	r7, r2
 8007e5e:	4692      	mov	sl, r2
 8007e60:	4699      	mov	r9, r3
 8007e62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e66:	427b      	negs	r3, r7
 8007e68:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007fe8 <__ieee754_atan2+0x190>
 8007e6c:	433b      	orrs	r3, r7
 8007e6e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007e72:	4543      	cmp	r3, r8
 8007e74:	4604      	mov	r4, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	d809      	bhi.n	8007e8e <__ieee754_atan2+0x36>
 8007e7a:	4246      	negs	r6, r0
 8007e7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e80:	4306      	orrs	r6, r0
 8007e82:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007e86:	4546      	cmp	r6, r8
 8007e88:	468e      	mov	lr, r1
 8007e8a:	4683      	mov	fp, r0
 8007e8c:	d908      	bls.n	8007ea0 <__ieee754_atan2+0x48>
 8007e8e:	4652      	mov	r2, sl
 8007e90:	464b      	mov	r3, r9
 8007e92:	4620      	mov	r0, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	f7f8 f9cd 	bl	8000234 <__adddf3>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	460d      	mov	r5, r1
 8007e9e:	e019      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007ea0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007ea4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007ea8:	433e      	orrs	r6, r7
 8007eaa:	d103      	bne.n	8007eb4 <__ieee754_atan2+0x5c>
 8007eac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	f000 b8a2 	b.w	8007ff8 <atan>
 8007eb4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007eb8:	f006 0602 	and.w	r6, r6, #2
 8007ebc:	ea53 0b0b 	orrs.w	fp, r3, fp
 8007ec0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007ec4:	d10a      	bne.n	8007edc <__ieee754_atan2+0x84>
 8007ec6:	2e02      	cmp	r6, #2
 8007ec8:	d067      	beq.n	8007f9a <__ieee754_atan2+0x142>
 8007eca:	2e03      	cmp	r6, #3
 8007ecc:	d102      	bne.n	8007ed4 <__ieee754_atan2+0x7c>
 8007ece:	a53a      	add	r5, pc, #232	; (adr r5, 8007fb8 <__ieee754_atan2+0x160>)
 8007ed0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	4317      	orrs	r7, r2
 8007ede:	d106      	bne.n	8007eee <__ieee754_atan2+0x96>
 8007ee0:	f1be 0f00 	cmp.w	lr, #0
 8007ee4:	da64      	bge.n	8007fb0 <__ieee754_atan2+0x158>
 8007ee6:	a536      	add	r5, pc, #216	; (adr r5, 8007fc0 <__ieee754_atan2+0x168>)
 8007ee8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007eec:	e7f2      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007eee:	4542      	cmp	r2, r8
 8007ef0:	d10f      	bne.n	8007f12 <__ieee754_atan2+0xba>
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	f106 36ff 	add.w	r6, r6, #4294967295
 8007ef8:	d107      	bne.n	8007f0a <__ieee754_atan2+0xb2>
 8007efa:	2e02      	cmp	r6, #2
 8007efc:	d851      	bhi.n	8007fa2 <__ieee754_atan2+0x14a>
 8007efe:	4b3b      	ldr	r3, [pc, #236]	; (8007fec <__ieee754_atan2+0x194>)
 8007f00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007f08:	e7e4      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007f0a:	2e02      	cmp	r6, #2
 8007f0c:	d84d      	bhi.n	8007faa <__ieee754_atan2+0x152>
 8007f0e:	4b38      	ldr	r3, [pc, #224]	; (8007ff0 <__ieee754_atan2+0x198>)
 8007f10:	e7f6      	b.n	8007f00 <__ieee754_atan2+0xa8>
 8007f12:	4543      	cmp	r3, r8
 8007f14:	d0e4      	beq.n	8007ee0 <__ieee754_atan2+0x88>
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007f1c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f20:	da21      	bge.n	8007f66 <__ieee754_atan2+0x10e>
 8007f22:	f1b9 0f00 	cmp.w	r9, #0
 8007f26:	da01      	bge.n	8007f2c <__ieee754_atan2+0xd4>
 8007f28:	323c      	adds	r2, #60	; 0x3c
 8007f2a:	db20      	blt.n	8007f6e <__ieee754_atan2+0x116>
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	464b      	mov	r3, r9
 8007f30:	4620      	mov	r0, r4
 8007f32:	4629      	mov	r1, r5
 8007f34:	f7f8 fc5e 	bl	80007f4 <__aeabi_ddiv>
 8007f38:	f000 f9e8 	bl	800830c <fabs>
 8007f3c:	f000 f85c 	bl	8007ff8 <atan>
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	2e01      	cmp	r6, #1
 8007f46:	d015      	beq.n	8007f74 <__ieee754_atan2+0x11c>
 8007f48:	2e02      	cmp	r6, #2
 8007f4a:	d017      	beq.n	8007f7c <__ieee754_atan2+0x124>
 8007f4c:	2e00      	cmp	r6, #0
 8007f4e:	d0c1      	beq.n	8007ed4 <__ieee754_atan2+0x7c>
 8007f50:	a31d      	add	r3, pc, #116	; (adr r3, 8007fc8 <__ieee754_atan2+0x170>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	4620      	mov	r0, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7f8 f969 	bl	8000230 <__aeabi_dsub>
 8007f5e:	a31c      	add	r3, pc, #112	; (adr r3, 8007fd0 <__ieee754_atan2+0x178>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	e016      	b.n	8007f94 <__ieee754_atan2+0x13c>
 8007f66:	a51c      	add	r5, pc, #112	; (adr r5, 8007fd8 <__ieee754_atan2+0x180>)
 8007f68:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f6c:	e7ea      	b.n	8007f44 <__ieee754_atan2+0xec>
 8007f6e:	2400      	movs	r4, #0
 8007f70:	2500      	movs	r5, #0
 8007f72:	e7e7      	b.n	8007f44 <__ieee754_atan2+0xec>
 8007f74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f78:	461d      	mov	r5, r3
 8007f7a:	e7ab      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007f7c:	a312      	add	r3, pc, #72	; (adr r3, 8007fc8 <__ieee754_atan2+0x170>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 f953 	bl	8000230 <__aeabi_dsub>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	a110      	add	r1, pc, #64	; (adr r1, 8007fd0 <__ieee754_atan2+0x178>)
 8007f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f94:	f7f8 f94c 	bl	8000230 <__aeabi_dsub>
 8007f98:	e77f      	b.n	8007e9a <__ieee754_atan2+0x42>
 8007f9a:	a50d      	add	r5, pc, #52	; (adr r5, 8007fd0 <__ieee754_atan2+0x178>)
 8007f9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fa0:	e798      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007fa2:	a50f      	add	r5, pc, #60	; (adr r5, 8007fe0 <__ieee754_atan2+0x188>)
 8007fa4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fa8:	e794      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007faa:	2400      	movs	r4, #0
 8007fac:	2500      	movs	r5, #0
 8007fae:	e791      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007fb0:	a509      	add	r5, pc, #36	; (adr r5, 8007fd8 <__ieee754_atan2+0x180>)
 8007fb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fb6:	e78d      	b.n	8007ed4 <__ieee754_atan2+0x7c>
 8007fb8:	54442d18 	.word	0x54442d18
 8007fbc:	c00921fb 	.word	0xc00921fb
 8007fc0:	54442d18 	.word	0x54442d18
 8007fc4:	bff921fb 	.word	0xbff921fb
 8007fc8:	33145c07 	.word	0x33145c07
 8007fcc:	3ca1a626 	.word	0x3ca1a626
 8007fd0:	54442d18 	.word	0x54442d18
 8007fd4:	400921fb 	.word	0x400921fb
 8007fd8:	54442d18 	.word	0x54442d18
 8007fdc:	3ff921fb 	.word	0x3ff921fb
 8007fe0:	54442d18 	.word	0x54442d18
 8007fe4:	3fe921fb 	.word	0x3fe921fb
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	080083e8 	.word	0x080083e8
 8007ff0:	08008400 	.word	0x08008400
 8007ff4:	00000000 	.word	0x00000000

08007ff8 <atan>:
 8007ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	4bb6      	ldr	r3, [pc, #728]	; (80082d8 <atan+0x2e0>)
 8007ffe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008002:	429e      	cmp	r6, r3
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
 8008008:	468b      	mov	fp, r1
 800800a:	dd17      	ble.n	800803c <atan+0x44>
 800800c:	4bb3      	ldr	r3, [pc, #716]	; (80082dc <atan+0x2e4>)
 800800e:	429e      	cmp	r6, r3
 8008010:	dc01      	bgt.n	8008016 <atan+0x1e>
 8008012:	d109      	bne.n	8008028 <atan+0x30>
 8008014:	b140      	cbz	r0, 8008028 <atan+0x30>
 8008016:	4622      	mov	r2, r4
 8008018:	462b      	mov	r3, r5
 800801a:	4620      	mov	r0, r4
 800801c:	4629      	mov	r1, r5
 800801e:	f7f8 f909 	bl	8000234 <__adddf3>
 8008022:	4604      	mov	r4, r0
 8008024:	460d      	mov	r5, r1
 8008026:	e005      	b.n	8008034 <atan+0x3c>
 8008028:	f1bb 0f00 	cmp.w	fp, #0
 800802c:	4cac      	ldr	r4, [pc, #688]	; (80082e0 <atan+0x2e8>)
 800802e:	f300 8121 	bgt.w	8008274 <atan+0x27c>
 8008032:	4dac      	ldr	r5, [pc, #688]	; (80082e4 <atan+0x2ec>)
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	4baa      	ldr	r3, [pc, #680]	; (80082e8 <atan+0x2f0>)
 800803e:	429e      	cmp	r6, r3
 8008040:	dc11      	bgt.n	8008066 <atan+0x6e>
 8008042:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008046:	429e      	cmp	r6, r3
 8008048:	dc0a      	bgt.n	8008060 <atan+0x68>
 800804a:	a38b      	add	r3, pc, #556	; (adr r3, 8008278 <atan+0x280>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f8f0 	bl	8000234 <__adddf3>
 8008054:	2200      	movs	r2, #0
 8008056:	4ba5      	ldr	r3, [pc, #660]	; (80082ec <atan+0x2f4>)
 8008058:	f7f8 fd32 	bl	8000ac0 <__aeabi_dcmpgt>
 800805c:	2800      	cmp	r0, #0
 800805e:	d1e9      	bne.n	8008034 <atan+0x3c>
 8008060:	f04f 3aff 	mov.w	sl, #4294967295
 8008064:	e027      	b.n	80080b6 <atan+0xbe>
 8008066:	f000 f951 	bl	800830c <fabs>
 800806a:	4ba1      	ldr	r3, [pc, #644]	; (80082f0 <atan+0x2f8>)
 800806c:	4604      	mov	r4, r0
 800806e:	429e      	cmp	r6, r3
 8008070:	460d      	mov	r5, r1
 8008072:	f300 80b8 	bgt.w	80081e6 <atan+0x1ee>
 8008076:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800807a:	429e      	cmp	r6, r3
 800807c:	f300 809c 	bgt.w	80081b8 <atan+0x1c0>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	f7f8 f8d6 	bl	8000234 <__adddf3>
 8008088:	2200      	movs	r2, #0
 800808a:	4b98      	ldr	r3, [pc, #608]	; (80082ec <atan+0x2f4>)
 800808c:	f7f8 f8d0 	bl	8000230 <__aeabi_dsub>
 8008090:	2200      	movs	r2, #0
 8008092:	4606      	mov	r6, r0
 8008094:	460f      	mov	r7, r1
 8008096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800809a:	4620      	mov	r0, r4
 800809c:	4629      	mov	r1, r5
 800809e:	f7f8 f8c9 	bl	8000234 <__adddf3>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 fba3 	bl	80007f4 <__aeabi_ddiv>
 80080ae:	f04f 0a00 	mov.w	sl, #0
 80080b2:	4604      	mov	r4, r0
 80080b4:	460d      	mov	r5, r1
 80080b6:	4622      	mov	r2, r4
 80080b8:	462b      	mov	r3, r5
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 fa6f 	bl	80005a0 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4680      	mov	r8, r0
 80080c8:	4689      	mov	r9, r1
 80080ca:	f7f8 fa69 	bl	80005a0 <__aeabi_dmul>
 80080ce:	a36c      	add	r3, pc, #432	; (adr r3, 8008280 <atan+0x288>)
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	4606      	mov	r6, r0
 80080d6:	460f      	mov	r7, r1
 80080d8:	f7f8 fa62 	bl	80005a0 <__aeabi_dmul>
 80080dc:	a36a      	add	r3, pc, #424	; (adr r3, 8008288 <atan+0x290>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 f8a7 	bl	8000234 <__adddf3>
 80080e6:	4632      	mov	r2, r6
 80080e8:	463b      	mov	r3, r7
 80080ea:	f7f8 fa59 	bl	80005a0 <__aeabi_dmul>
 80080ee:	a368      	add	r3, pc, #416	; (adr r3, 8008290 <atan+0x298>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f7f8 f89e 	bl	8000234 <__adddf3>
 80080f8:	4632      	mov	r2, r6
 80080fa:	463b      	mov	r3, r7
 80080fc:	f7f8 fa50 	bl	80005a0 <__aeabi_dmul>
 8008100:	a365      	add	r3, pc, #404	; (adr r3, 8008298 <atan+0x2a0>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f895 	bl	8000234 <__adddf3>
 800810a:	4632      	mov	r2, r6
 800810c:	463b      	mov	r3, r7
 800810e:	f7f8 fa47 	bl	80005a0 <__aeabi_dmul>
 8008112:	a363      	add	r3, pc, #396	; (adr r3, 80082a0 <atan+0x2a8>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f88c 	bl	8000234 <__adddf3>
 800811c:	4632      	mov	r2, r6
 800811e:	463b      	mov	r3, r7
 8008120:	f7f8 fa3e 	bl	80005a0 <__aeabi_dmul>
 8008124:	a360      	add	r3, pc, #384	; (adr r3, 80082a8 <atan+0x2b0>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f883 	bl	8000234 <__adddf3>
 800812e:	4642      	mov	r2, r8
 8008130:	464b      	mov	r3, r9
 8008132:	f7f8 fa35 	bl	80005a0 <__aeabi_dmul>
 8008136:	a35e      	add	r3, pc, #376	; (adr r3, 80082b0 <atan+0x2b8>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	4680      	mov	r8, r0
 800813e:	4689      	mov	r9, r1
 8008140:	4630      	mov	r0, r6
 8008142:	4639      	mov	r1, r7
 8008144:	f7f8 fa2c 	bl	80005a0 <__aeabi_dmul>
 8008148:	a35b      	add	r3, pc, #364	; (adr r3, 80082b8 <atan+0x2c0>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 f86f 	bl	8000230 <__aeabi_dsub>
 8008152:	4632      	mov	r2, r6
 8008154:	463b      	mov	r3, r7
 8008156:	f7f8 fa23 	bl	80005a0 <__aeabi_dmul>
 800815a:	a359      	add	r3, pc, #356	; (adr r3, 80082c0 <atan+0x2c8>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f7f8 f866 	bl	8000230 <__aeabi_dsub>
 8008164:	4632      	mov	r2, r6
 8008166:	463b      	mov	r3, r7
 8008168:	f7f8 fa1a 	bl	80005a0 <__aeabi_dmul>
 800816c:	a356      	add	r3, pc, #344	; (adr r3, 80082c8 <atan+0x2d0>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f7f8 f85d 	bl	8000230 <__aeabi_dsub>
 8008176:	4632      	mov	r2, r6
 8008178:	463b      	mov	r3, r7
 800817a:	f7f8 fa11 	bl	80005a0 <__aeabi_dmul>
 800817e:	a354      	add	r3, pc, #336	; (adr r3, 80082d0 <atan+0x2d8>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f8 f854 	bl	8000230 <__aeabi_dsub>
 8008188:	4632      	mov	r2, r6
 800818a:	463b      	mov	r3, r7
 800818c:	f7f8 fa08 	bl	80005a0 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 f84c 	bl	8000234 <__adddf3>
 800819c:	4622      	mov	r2, r4
 800819e:	462b      	mov	r3, r5
 80081a0:	f7f8 f9fe 	bl	80005a0 <__aeabi_dmul>
 80081a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	d144      	bne.n	8008238 <atan+0x240>
 80081ae:	4620      	mov	r0, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7f8 f83d 	bl	8000230 <__aeabi_dsub>
 80081b6:	e734      	b.n	8008022 <atan+0x2a>
 80081b8:	2200      	movs	r2, #0
 80081ba:	4b4c      	ldr	r3, [pc, #304]	; (80082ec <atan+0x2f4>)
 80081bc:	f7f8 f838 	bl	8000230 <__aeabi_dsub>
 80081c0:	2200      	movs	r2, #0
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	4b48      	ldr	r3, [pc, #288]	; (80082ec <atan+0x2f4>)
 80081cc:	f7f8 f832 	bl	8000234 <__adddf3>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	f7f8 fb0c 	bl	80007f4 <__aeabi_ddiv>
 80081dc:	f04f 0a01 	mov.w	sl, #1
 80081e0:	4604      	mov	r4, r0
 80081e2:	460d      	mov	r5, r1
 80081e4:	e767      	b.n	80080b6 <atan+0xbe>
 80081e6:	4b43      	ldr	r3, [pc, #268]	; (80082f4 <atan+0x2fc>)
 80081e8:	429e      	cmp	r6, r3
 80081ea:	da1a      	bge.n	8008222 <atan+0x22a>
 80081ec:	2200      	movs	r2, #0
 80081ee:	4b42      	ldr	r3, [pc, #264]	; (80082f8 <atan+0x300>)
 80081f0:	f7f8 f81e 	bl	8000230 <__aeabi_dsub>
 80081f4:	2200      	movs	r2, #0
 80081f6:	4606      	mov	r6, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	4620      	mov	r0, r4
 80081fc:	4629      	mov	r1, r5
 80081fe:	4b3e      	ldr	r3, [pc, #248]	; (80082f8 <atan+0x300>)
 8008200:	f7f8 f9ce 	bl	80005a0 <__aeabi_dmul>
 8008204:	2200      	movs	r2, #0
 8008206:	4b39      	ldr	r3, [pc, #228]	; (80082ec <atan+0x2f4>)
 8008208:	f7f8 f814 	bl	8000234 <__adddf3>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 faee 	bl	80007f4 <__aeabi_ddiv>
 8008218:	f04f 0a02 	mov.w	sl, #2
 800821c:	4604      	mov	r4, r0
 800821e:	460d      	mov	r5, r1
 8008220:	e749      	b.n	80080b6 <atan+0xbe>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	2000      	movs	r0, #0
 8008228:	4934      	ldr	r1, [pc, #208]	; (80082fc <atan+0x304>)
 800822a:	f7f8 fae3 	bl	80007f4 <__aeabi_ddiv>
 800822e:	f04f 0a03 	mov.w	sl, #3
 8008232:	4604      	mov	r4, r0
 8008234:	460d      	mov	r5, r1
 8008236:	e73e      	b.n	80080b6 <atan+0xbe>
 8008238:	4b31      	ldr	r3, [pc, #196]	; (8008300 <atan+0x308>)
 800823a:	4e32      	ldr	r6, [pc, #200]	; (8008304 <atan+0x30c>)
 800823c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f7 fff4 	bl	8000230 <__aeabi_dsub>
 8008248:	4622      	mov	r2, r4
 800824a:	462b      	mov	r3, r5
 800824c:	f7f7 fff0 	bl	8000230 <__aeabi_dsub>
 8008250:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	e9d6 0100 	ldrd	r0, r1, [r6]
 800825c:	f7f7 ffe8 	bl	8000230 <__aeabi_dsub>
 8008260:	f1bb 0f00 	cmp.w	fp, #0
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	f6bf aee4 	bge.w	8008034 <atan+0x3c>
 800826c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008270:	461d      	mov	r5, r3
 8008272:	e6df      	b.n	8008034 <atan+0x3c>
 8008274:	4d24      	ldr	r5, [pc, #144]	; (8008308 <atan+0x310>)
 8008276:	e6dd      	b.n	8008034 <atan+0x3c>
 8008278:	8800759c 	.word	0x8800759c
 800827c:	7e37e43c 	.word	0x7e37e43c
 8008280:	e322da11 	.word	0xe322da11
 8008284:	3f90ad3a 	.word	0x3f90ad3a
 8008288:	24760deb 	.word	0x24760deb
 800828c:	3fa97b4b 	.word	0x3fa97b4b
 8008290:	a0d03d51 	.word	0xa0d03d51
 8008294:	3fb10d66 	.word	0x3fb10d66
 8008298:	c54c206e 	.word	0xc54c206e
 800829c:	3fb745cd 	.word	0x3fb745cd
 80082a0:	920083ff 	.word	0x920083ff
 80082a4:	3fc24924 	.word	0x3fc24924
 80082a8:	5555550d 	.word	0x5555550d
 80082ac:	3fd55555 	.word	0x3fd55555
 80082b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80082b4:	bfa2b444 	.word	0xbfa2b444
 80082b8:	52defd9a 	.word	0x52defd9a
 80082bc:	3fadde2d 	.word	0x3fadde2d
 80082c0:	af749a6d 	.word	0xaf749a6d
 80082c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80082c8:	fe231671 	.word	0xfe231671
 80082cc:	3fbc71c6 	.word	0x3fbc71c6
 80082d0:	9998ebc4 	.word	0x9998ebc4
 80082d4:	3fc99999 	.word	0x3fc99999
 80082d8:	440fffff 	.word	0x440fffff
 80082dc:	7ff00000 	.word	0x7ff00000
 80082e0:	54442d18 	.word	0x54442d18
 80082e4:	bff921fb 	.word	0xbff921fb
 80082e8:	3fdbffff 	.word	0x3fdbffff
 80082ec:	3ff00000 	.word	0x3ff00000
 80082f0:	3ff2ffff 	.word	0x3ff2ffff
 80082f4:	40038000 	.word	0x40038000
 80082f8:	3ff80000 	.word	0x3ff80000
 80082fc:	bff00000 	.word	0xbff00000
 8008300:	08008438 	.word	0x08008438
 8008304:	08008418 	.word	0x08008418
 8008308:	3ff921fb 	.word	0x3ff921fb

0800830c <fabs>:
 800830c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008310:	4619      	mov	r1, r3
 8008312:	4770      	bx	lr

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
