
BKROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e4c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009038  08009038  00019038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009160  08009160  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08009160  08009160  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009160  08009160  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08009168  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200000b0  08009218  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08009218  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ecf  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004037  00000000  00000000  00036feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001057  00000000  00000000  0003c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce8d  00000000  00000000  0003d58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d83f  00000000  00000000  0005a41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2e3b  00000000  00000000  00077c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059c4  00000000  00000000  0011aa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0012045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000b0 	.word	0x200000b0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800901c 	.word	0x0800901c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000b4 	.word	0x200000b4
 8000224:	0800901c 	.word	0x0800901c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b60:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b62:	4a4b      	ldr	r2, [pc, #300]	; (8000c90 <MX_ADC1_Init+0x140>)
 8000b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000b88:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8e:	483f      	ldr	r0, [pc, #252]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000b90:	f002 fa7a 	bl	8003088 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b9a:	f000 ffff 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bb0:	f002 fc4e 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 ffef 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000bcc:	f002 fc40 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 ffe1 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4829      	ldr	r0, [pc, #164]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000be8:	f002 fc32 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 ffd3 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c04:	f002 fc24 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c0e:	f000 ffc5 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c12:	230c      	movs	r3, #12
 8000c14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c20:	f002 fc16 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c2a:	f000 ffb7 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c2e:	230d      	movs	r3, #13
 8000c30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c32:	2306      	movs	r3, #6
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c3c:	f002 fc08 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c46:	f000 ffa9 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c58:	f002 fbfa 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000c62:	f000 ff9b 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c66:	230f      	movs	r3, #15
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC1_Init+0x13c>)
 8000c74:	f002 fbec 	bl	8003450 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000c7e:	f000 ff8d 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000cc 	.word	0x200000cc
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <HAL_ADC_MspInit+0xec>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d160      	bne.n	8000d76 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_ADC_MspInit+0xf0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cfc:	233f      	movs	r3, #63	; 0x3f
 8000cfe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481f      	ldr	r0, [pc, #124]	; (8000d88 <HAL_ADC_MspInit+0xf4>)
 8000d0c:	f003 fb2c 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481b      	ldr	r0, [pc, #108]	; (8000d8c <HAL_ADC_MspInit+0xf8>)
 8000d20:	f003 fb22 	bl	8004368 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_ADC_MspInit+0x100>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d5c:	f002 fe80 	bl	8003a60 <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8000d66:	f000 ff19 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d6e:	621a      	str	r2, [r3, #32]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_ADC_MspInit+0xfc>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40012400 	.word	0x40012400
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	200000fc 	.word	0x200000fc
 8000d94:	40020008 	.word	0x40020008

08000d98 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da2:	4802      	ldr	r0, [pc, #8]	; (8000dac <button_init+0x14>)
 8000da4:	f003 fc74 	bl	8004690 <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40010800 	.word	0x40010800

08000db0 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbc:	481b      	ldr	r0, [pc, #108]	; (8000e2c <button_scan+0x7c>)
 8000dbe:	f003 fc67 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <button_scan+0x7c>)
 8000dca:	f003 fc61 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_buffer, 1, 10);
 8000dce:	230a      	movs	r3, #10
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4917      	ldr	r1, [pc, #92]	; (8000e30 <button_scan+0x80>)
 8000dd4:	4817      	ldr	r0, [pc, #92]	; (8000e34 <button_scan+0x84>)
 8000dd6:	f005 fa3e 	bl	8006256 <HAL_SPI_Receive>

	uint8_t mask = 0x01;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	e01b      	b.n	8000e1c <button_scan+0x6c>
		if (button_buffer & mask)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <button_scan+0x80>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4013      	ands	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <button_scan+0x4e>
			button_count[i] = 0;
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <button_scan+0x88>)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2100      	movs	r1, #0
 8000df8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dfc:	e008      	b.n	8000e10 <button_scan+0x60>
		else
			button_count[i]++;
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <button_scan+0x88>)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	490b      	ldr	r1, [pc, #44]	; (8000e38 <button_scan+0x88>)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		mask = mask << 1;
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) {
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	dde0      	ble.n	8000de4 <button_scan+0x34>
	}
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	20000160 	.word	0x20000160
 8000e34:	200002e8 	.word	0x200002e8
 8000e38:	20000140 	.word	0x20000140

08000e3c <isButtonPressed>:

int isButtonPressed(int index){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	if(index < 0 || index >7) return 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db02      	blt.n	8000e50 <isButtonPressed+0x14>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	dd01      	ble.n	8000e54 <isButtonPressed+0x18>
 8000e50:	2300      	movs	r3, #0
 8000e52:	e008      	b.n	8000e66 <isButtonPressed+0x2a>
	return button_count[index] == 1;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <isButtonPressed+0x34>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	bf0c      	ite	eq
 8000e60:	2301      	moveq	r3, #1
 8000e62:	2300      	movne	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000140 	.word	0x20000140

08000e74 <display_init>:
uint8_t display_7seg_map[10] = { 0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41,
		0x1f, 0x01, 0x09 }; // 0->9
uint16_t display_index = 0;
uint8_t spi_buffer = 0xff;

void display_init() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4802      	ldr	r0, [pc, #8]	; (8000e88 <display_init+0x14>)
 8000e80:	f003 fc06 	bl	8004690 <HAL_GPIO_WritePin>
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40011000 	.word	0x40011000

08000e8c <display_run>:

void display_run() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

	spi_buffer = display_buffer[display_index];
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <display_run+0xe4>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <display_run+0xe8>)
 8000e98:	5c9a      	ldrb	r2, [r3, r2]
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <display_run+0xec>)
 8000e9c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	4835      	ldr	r0, [pc, #212]	; (8000f7c <display_run+0xf0>)
 8000ea6:	f003 fbf3 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 1, 1);
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2201      	movs	r2, #1
 8000eae:	4932      	ldr	r1, [pc, #200]	; (8000f78 <display_run+0xec>)
 8000eb0:	4833      	ldr	r0, [pc, #204]	; (8000f80 <display_run+0xf4>)
 8000eb2:	f005 f88d 	bl	8005fd0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebc:	482f      	ldr	r0, [pc, #188]	; (8000f7c <display_run+0xf0>)
 8000ebe:	f003 fbe7 	bl	8004690 <HAL_GPIO_WritePin>

	switch (display_index) {
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <display_run+0xe4>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d02c      	beq.n	8000f24 <display_run+0x98>
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	dc3d      	bgt.n	8000f4a <display_run+0xbe>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <display_run+0x4c>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d013      	beq.n	8000efe <display_run+0x72>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
		break;
	default:
		break;
 8000ed6:	e038      	b.n	8000f4a <display_run+0xbe>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ede:	4829      	ldr	r0, [pc, #164]	; (8000f84 <display_run+0xf8>)
 8000ee0:	f003 fbd6 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	4826      	ldr	r0, [pc, #152]	; (8000f84 <display_run+0xf8>)
 8000eec:	f003 fbd0 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	4823      	ldr	r0, [pc, #140]	; (8000f84 <display_run+0xf8>)
 8000ef8:	f003 fbca 	bl	8004690 <HAL_GPIO_WritePin>
		break;
 8000efc:	e026      	b.n	8000f4c <display_run+0xc0>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	481f      	ldr	r0, [pc, #124]	; (8000f84 <display_run+0xf8>)
 8000f06:	f003 fbc3 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <display_run+0xf8>)
 8000f12:	f003 fbbd 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1c:	4819      	ldr	r0, [pc, #100]	; (8000f84 <display_run+0xf8>)
 8000f1e:	f003 fbb7 	bl	8004690 <HAL_GPIO_WritePin>
		break;
 8000f22:	e013      	b.n	8000f4c <display_run+0xc0>
		HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2a:	4816      	ldr	r0, [pc, #88]	; (8000f84 <display_run+0xf8>)
 8000f2c:	f003 fbb0 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <display_run+0xf8>)
 8000f38:	f003 fbaa 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f42:	4810      	ldr	r0, [pc, #64]	; (8000f84 <display_run+0xf8>)
 8000f44:	f003 fba4 	bl	8004690 <HAL_GPIO_WritePin>
		break;
 8000f48:	e000      	b.n	8000f4c <display_run+0xc0>
		break;
 8000f4a:	bf00      	nop
	}
	display_index = (display_index + 1) % 3;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <display_run+0xe4>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <display_run+0xfc>)
 8000f54:	fb83 3102 	smull	r3, r1, r3, r2
 8000f58:	17d3      	asrs	r3, r2, #31
 8000f5a:	1ac9      	subs	r1, r1, r3
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	440b      	add	r3, r1
 8000f62:	1ad1      	subs	r1, r2, r3
 8000f64:	b28a      	uxth	r2, r1
 8000f66:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <display_run+0xe4>)
 8000f68:	801a      	strh	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000168 	.word	0x20000168
 8000f74:	20000164 	.word	0x20000164
 8000f78:	2000000a 	.word	0x2000000a
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	200002e8 	.word	0x200002e8
 8000f84:	40010800 	.word	0x40010800
 8000f88:	55555556 	.word	0x55555556

08000f8c <display_7seg>:

void display_7seg(int num){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	display_buffer[0] = display_7seg_map[num/10];
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <display_7seg+0x48>)
 8000f98:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9c:	1092      	asrs	r2, r2, #2
 8000f9e:	17db      	asrs	r3, r3, #31
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <display_7seg+0x4c>)
 8000fa4:	5cd2      	ldrb	r2, [r2, r3]
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <display_7seg+0x50>)
 8000fa8:	701a      	strb	r2, [r3, #0]
	display_buffer[1] = display_7seg_map[num%10];
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <display_7seg+0x48>)
 8000fae:	fb83 2301 	smull	r2, r3, r3, r1
 8000fb2:	109a      	asrs	r2, r3, #2
 8000fb4:	17cb      	asrs	r3, r1, #31
 8000fb6:	1ad2      	subs	r2, r2, r3
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1aca      	subs	r2, r1, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <display_7seg+0x4c>)
 8000fc4:	5c9a      	ldrb	r2, [r3, r2]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <display_7seg+0x50>)
 8000fc8:	705a      	strb	r2, [r3, #1]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	66666667 	.word	0x66666667
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000164 	.word	0x20000164

08000fe0 <display_led>:

void display_led(uint8_t data_byte){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	display_buffer[2] = data_byte;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <display_led+0x1c>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	7093      	strb	r3, [r2, #2]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000164 	.word	0x20000164

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_DMA_Init+0x38>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <MX_DMA_Init+0x38>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_DMA_Init+0x38>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	200b      	movs	r0, #11
 8001024:	f002 fce5 	bl	80039f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001028:	200b      	movs	r0, #11
 800102a:	f002 fcfe 	bl	8003a2a <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <gamepad_init>:
uint8_t m1 = 0;
uint8_t m2 = 0;
uint8_t thumbl = 0;
uint8_t thumbr = 0;

int gamepad_init(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, _GAMEPAD_RECEIVER_ADDR, 10, 100) != HAL_OK) return 0;
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	220a      	movs	r2, #10
 8001044:	21aa      	movs	r1, #170	; 0xaa
 8001046:	480a      	ldr	r0, [pc, #40]	; (8001070 <gamepad_init+0x34>)
 8001048:	f003 ff04 	bl	8004e54 <HAL_I2C_IsDeviceReady>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <gamepad_init+0x1a>
 8001052:	2300      	movs	r3, #0
 8001054:	e009      	b.n	800106a <gamepad_init+0x2e>
	is_receiver_connect = 1;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <gamepad_init+0x38>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <gamepad_init+0x3c>)
 8001064:	f003 fb14 	bl	8004690 <HAL_GPIO_WritePin>
	return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001c0 	.word	0x200001c0
 8001074:	2000016c 	.word	0x2000016c
 8001078:	40011000 	.word	0x40011000

0800107c <_read_16>:

int16_t _read_16(uint8_t b1,uint8_t b2){
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
    // Read and return a 16-bit signed little endian value from 2 bytes
    int16_t raw = (b1 << 8) | b2;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	81fb      	strh	r3, [r7, #14]
    if (raw & (1 << 15)){
 800109a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da02      	bge.n	80010a8 <_read_16+0x2c>
        return (raw - (1 << 16));
 80010a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a6:	e001      	b.n	80010ac <_read_16+0x30>
    	// sign bit is set
    } else{
    	return raw;
 80010a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    }
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <_read_32>:

int32_t _read_32(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4){
 80010b6:	b490      	push	{r4, r7}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4604      	mov	r4, r0
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	461a      	mov	r2, r3
 80010c4:	4623      	mov	r3, r4
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4603      	mov	r3, r0
 80010ca:	71bb      	strb	r3, [r7, #6]
 80010cc:	460b      	mov	r3, r1
 80010ce:	717b      	strb	r3, [r7, #5]
 80010d0:	4613      	mov	r3, r2
 80010d2:	713b      	strb	r3, [r7, #4]
    // Read and return a 32-bit signed little endian value from 2 bytes
    int32_t raw = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	061a      	lsls	r2, r3, #24
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	041b      	lsls	r3, r3, #16
 80010dc:	431a      	orrs	r2, r3
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	431a      	orrs	r2, r3
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
    if (raw & (1 << 31)){
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da01      	bge.n	80010f4 <_read_32+0x3e>
        return (raw - (1 << 32));
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	e000      	b.n	80010f6 <_read_32+0x40>
    	// sign bit is set
    } else{
    	return raw;
 80010f4:	68fb      	ldr	r3, [r7, #12]
    }
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc90      	pop	{r4, r7}
 80010fe:	4770      	bx	lr

08001100 <_convert_data>:

void _convert_data(){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	dpad_left = (dpad >> _DPAD_LEFT) & 1;
 8001104:	4b57      	ldr	r3, [pc, #348]	; (8001264 <_convert_data+0x164>)
 8001106:	f993 3000 	ldrsb.w	r3, [r3]
 800110a:	10db      	asrs	r3, r3, #3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b54      	ldr	r3, [pc, #336]	; (8001268 <_convert_data+0x168>)
 8001118:	701a      	strb	r2, [r3, #0]
	dpad_up = (dpad >> _DPAD_UP) & 1;
 800111a:	4b52      	ldr	r3, [pc, #328]	; (8001264 <_convert_data+0x164>)
 800111c:	f993 3000 	ldrsb.w	r3, [r3]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <_convert_data+0x16c>)
 800112a:	701a      	strb	r2, [r3, #0]
	dpad_down = (dpad >> _DPAD_DOWN) & 1;
 800112c:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <_convert_data+0x164>)
 800112e:	f993 3000 	ldrsb.w	r3, [r3]
 8001132:	105b      	asrs	r3, r3, #1
 8001134:	b25b      	sxtb	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <_convert_data+0x170>)
 8001140:	701a      	strb	r2, [r3, #0]
	dpad_right = (dpad >> _DPAD_RIGHT) & 1;
 8001142:	4b48      	ldr	r3, [pc, #288]	; (8001264 <_convert_data+0x164>)
 8001144:	f993 3000 	ldrsb.w	r3, [r3]
 8001148:	109b      	asrs	r3, r3, #2
 800114a:	b25b      	sxtb	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b47      	ldr	r3, [pc, #284]	; (8001274 <_convert_data+0x174>)
 8001156:	701a      	strb	r2, [r3, #0]
	thumbl = (buttons >> _BUTTON_THUMB_L) & 1;
 8001158:	4b47      	ldr	r3, [pc, #284]	; (8001278 <_convert_data+0x178>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	121b      	asrs	r3, r3, #8
 8001160:	b21b      	sxth	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b44      	ldr	r3, [pc, #272]	; (800127c <_convert_data+0x17c>)
 800116c:	701a      	strb	r2, [r3, #0]
	thumbr = (buttons >> _BUTTON_THUMB_R) & 1;
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <_convert_data+0x178>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	125b      	asrs	r3, r3, #9
 8001176:	b21b      	sxth	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <_convert_data+0x180>)
 8001182:	701a      	strb	r2, [r3, #0]
	a = (buttons >> _BUTTON_A) & 1;
 8001184:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <_convert_data+0x178>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <_convert_data+0x184>)
 8001194:	701a      	strb	r2, [r3, #0]
	b = (buttons >> _BUTTON_B) & 1;
 8001196:	4b38      	ldr	r3, [pc, #224]	; (8001278 <_convert_data+0x178>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	105b      	asrs	r3, r3, #1
 800119e:	b21b      	sxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b37      	ldr	r3, [pc, #220]	; (8001288 <_convert_data+0x188>)
 80011aa:	701a      	strb	r2, [r3, #0]
	x = (buttons >> _BUTTON_X) & 1;
 80011ac:	4b32      	ldr	r3, [pc, #200]	; (8001278 <_convert_data+0x178>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	109b      	asrs	r3, r3, #2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <_convert_data+0x18c>)
 80011c0:	701a      	strb	r2, [r3, #0]
	y = (buttons >> _BUTTON_Y) & 1;
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <_convert_data+0x178>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	10db      	asrs	r3, r3, #3
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <_convert_data+0x190>)
 80011d6:	701a      	strb	r2, [r3, #0]
	l1 = (buttons >> _BUTTON_SHOULDER_L) & 1;
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <_convert_data+0x178>)
 80011da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011de:	111b      	asrs	r3, r3, #4
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <_convert_data+0x194>)
 80011ec:	701a      	strb	r2, [r3, #0]
	r1 = (buttons >> _BUTTON_SHOULDER_R) & 1;
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <_convert_data+0x178>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	115b      	asrs	r3, r3, #5
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <_convert_data+0x198>)
 8001202:	701a      	strb	r2, [r3, #0]
	l2 = (buttons >> _BUTTON_TRIGGER_L) & 1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <_convert_data+0x178>)
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	119b      	asrs	r3, r3, #6
 800120c:	b21b      	sxth	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <_convert_data+0x19c>)
 8001218:	701a      	strb	r2, [r3, #0]
	r2 = (buttons >> _BUTTON_TRIGGER_R) & 1;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <_convert_data+0x178>)
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	11db      	asrs	r3, r3, #7
 8001222:	b21b      	sxth	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <_convert_data+0x1a0>)
 800122e:	701a      	strb	r2, [r3, #0]
	m1 = (buttons >> _MISC_BUTTON_M1) & 1;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_convert_data+0x178>)
 8001232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001236:	105b      	asrs	r3, r3, #1
 8001238:	b21b      	sxth	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <_convert_data+0x1a4>)
 8001244:	701a      	strb	r2, [r3, #0]
	m2 = (buttons >> _MISC_BUTTON_M2) & 1;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <_convert_data+0x178>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	109b      	asrs	r3, r3, #2
 800124e:	b21b      	sxth	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <_convert_data+0x1a8>)
 800125a:	701a      	strb	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000192 	.word	0x20000192
 8001268:	200001b0 	.word	0x200001b0
 800126c:	200001b1 	.word	0x200001b1
 8001270:	200001b2 	.word	0x200001b2
 8001274:	200001b3 	.word	0x200001b3
 8001278:	200001ac 	.word	0x200001ac
 800127c:	200001be 	.word	0x200001be
 8001280:	200001bf 	.word	0x200001bf
 8001284:	200001b4 	.word	0x200001b4
 8001288:	200001b5 	.word	0x200001b5
 800128c:	200001b6 	.word	0x200001b6
 8001290:	200001b7 	.word	0x200001b7
 8001294:	200001b8 	.word	0x200001b8
 8001298:	200001b9 	.word	0x200001b9
 800129c:	200001ba 	.word	0x200001ba
 80012a0:	200001bb 	.word	0x200001bb
 80012a4:	200001bc 	.word	0x200001bc
 80012a8:	200001bd 	.word	0x200001bd

080012ac <gamepad_update>:

void gamepad_update(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af02      	add	r7, sp, #8
	if(is_receiver_connect == 0) return;
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <gamepad_update+0x120>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8085 	beq.w	80013c6 <gamepad_update+0x11a>
	HAL_I2C_Master_Receive(&hi2c2, _GAMEPAD_RECEIVER_ADDR, result, 30, 50);
 80012bc:	2332      	movs	r3, #50	; 0x32
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	231e      	movs	r3, #30
 80012c2:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <gamepad_update+0x124>)
 80012c4:	21aa      	movs	r1, #170	; 0xaa
 80012c6:	4843      	ldr	r0, [pc, #268]	; (80013d4 <gamepad_update+0x128>)
 80012c8:	f003 fb58 	bl	800497c <HAL_I2C_Master_Receive>
	if(result[0] == 1) is_gamepad_connect = 1;
 80012cc:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <gamepad_update+0x124>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d103      	bne.n	80012dc <gamepad_update+0x30>
 80012d4:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <gamepad_update+0x12c>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e002      	b.n	80012e2 <gamepad_update+0x36>
	else is_gamepad_connect = 0;
 80012dc:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <gamepad_update+0x12c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

	if(is_gamepad_connect == 1){
 80012e2:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <gamepad_update+0x12c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d16a      	bne.n	80013c0 <gamepad_update+0x114>
		dpad = result[1];
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <gamepad_update+0x124>)
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <gamepad_update+0x130>)
 80012f2:	701a      	strb	r2, [r3, #0]
		aLX = _read_32(result[2], result[3], result[4], result[5]);
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <gamepad_update+0x124>)
 80012f6:	7898      	ldrb	r0, [r3, #2]
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <gamepad_update+0x124>)
 80012fa:	78d9      	ldrb	r1, [r3, #3]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <gamepad_update+0x124>)
 80012fe:	791a      	ldrb	r2, [r3, #4]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <gamepad_update+0x124>)
 8001302:	795b      	ldrb	r3, [r3, #5]
 8001304:	f7ff fed7 	bl	80010b6 <_read_32>
 8001308:	4603      	mov	r3, r0
 800130a:	4a35      	ldr	r2, [pc, #212]	; (80013e0 <gamepad_update+0x134>)
 800130c:	6013      	str	r3, [r2, #0]
		aLY = _read_32(result[6], result[7], result[8], result[9]);
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <gamepad_update+0x124>)
 8001310:	7998      	ldrb	r0, [r3, #6]
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <gamepad_update+0x124>)
 8001314:	79d9      	ldrb	r1, [r3, #7]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <gamepad_update+0x124>)
 8001318:	7a1a      	ldrb	r2, [r3, #8]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <gamepad_update+0x124>)
 800131c:	7a5b      	ldrb	r3, [r3, #9]
 800131e:	f7ff feca 	bl	80010b6 <_read_32>
 8001322:	4603      	mov	r3, r0
 8001324:	4a2f      	ldr	r2, [pc, #188]	; (80013e4 <gamepad_update+0x138>)
 8001326:	6013      	str	r3, [r2, #0]
		aRX = _read_32(result[10], result[11], result[12], result[13]);
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <gamepad_update+0x124>)
 800132a:	7a98      	ldrb	r0, [r3, #10]
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <gamepad_update+0x124>)
 800132e:	7ad9      	ldrb	r1, [r3, #11]
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <gamepad_update+0x124>)
 8001332:	7b1a      	ldrb	r2, [r3, #12]
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <gamepad_update+0x124>)
 8001336:	7b5b      	ldrb	r3, [r3, #13]
 8001338:	f7ff febd 	bl	80010b6 <_read_32>
 800133c:	4603      	mov	r3, r0
 800133e:	4a2a      	ldr	r2, [pc, #168]	; (80013e8 <gamepad_update+0x13c>)
 8001340:	6013      	str	r3, [r2, #0]
		aRY = _read_32(result[14], result[15], result[16], result[17]);
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <gamepad_update+0x124>)
 8001344:	7b98      	ldrb	r0, [r3, #14]
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <gamepad_update+0x124>)
 8001348:	7bd9      	ldrb	r1, [r3, #15]
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <gamepad_update+0x124>)
 800134c:	7c1a      	ldrb	r2, [r3, #16]
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <gamepad_update+0x124>)
 8001350:	7c5b      	ldrb	r3, [r3, #17]
 8001352:	f7ff feb0 	bl	80010b6 <_read_32>
 8001356:	4603      	mov	r3, r0
 8001358:	4a24      	ldr	r2, [pc, #144]	; (80013ec <gamepad_update+0x140>)
 800135a:	6013      	str	r3, [r2, #0]
		al2 = _read_32(result[18], result[19], result[20], result[21]);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <gamepad_update+0x124>)
 800135e:	7c98      	ldrb	r0, [r3, #18]
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <gamepad_update+0x124>)
 8001362:	7cd9      	ldrb	r1, [r3, #19]
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <gamepad_update+0x124>)
 8001366:	7d1a      	ldrb	r2, [r3, #20]
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <gamepad_update+0x124>)
 800136a:	7d5b      	ldrb	r3, [r3, #21]
 800136c:	f7ff fea3 	bl	80010b6 <_read_32>
 8001370:	4603      	mov	r3, r0
 8001372:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <gamepad_update+0x144>)
 8001374:	6013      	str	r3, [r2, #0]
		ar2 = _read_32(result[22], result[23], result[24], result[25]);
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <gamepad_update+0x124>)
 8001378:	7d98      	ldrb	r0, [r3, #22]
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <gamepad_update+0x124>)
 800137c:	7dd9      	ldrb	r1, [r3, #23]
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <gamepad_update+0x124>)
 8001380:	7e1a      	ldrb	r2, [r3, #24]
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <gamepad_update+0x124>)
 8001384:	7e5b      	ldrb	r3, [r3, #25]
 8001386:	f7ff fe96 	bl	80010b6 <_read_32>
 800138a:	4603      	mov	r3, r0
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <gamepad_update+0x148>)
 800138e:	6013      	str	r3, [r2, #0]
		buttons = _read_16(result[26], result[27]);
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <gamepad_update+0x124>)
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <gamepad_update+0x124>)
 8001396:	7ed2      	ldrb	r2, [r2, #27]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe6e 	bl	800107c <_read_16>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <gamepad_update+0x14c>)
 80013a6:	801a      	strh	r2, [r3, #0]
		misc_buttons = _read_16(result[28], result[29]);
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <gamepad_update+0x124>)
 80013aa:	7f1b      	ldrb	r3, [r3, #28]
 80013ac:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <gamepad_update+0x124>)
 80013ae:	7f52      	ldrb	r2, [r2, #29]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe62 	bl	800107c <_read_16>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <gamepad_update+0x150>)
 80013be:	801a      	strh	r2, [r3, #0]
	}
	_convert_data();
 80013c0:	f7ff fe9e 	bl	8001100 <_convert_data>
 80013c4:	e000      	b.n	80013c8 <gamepad_update+0x11c>
	if(is_receiver_connect == 0) return;
 80013c6:	bf00      	nop
}
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000016c 	.word	0x2000016c
 80013d0:	20000174 	.word	0x20000174
 80013d4:	200001c0 	.word	0x200001c0
 80013d8:	20000170 	.word	0x20000170
 80013dc:	20000192 	.word	0x20000192
 80013e0:	20000194 	.word	0x20000194
 80013e4:	20000198 	.word	0x20000198
 80013e8:	2000019c 	.word	0x2000019c
 80013ec:	200001a0 	.word	0x200001a0
 80013f0:	200001a4 	.word	0x200001a4
 80013f4:	200001a8 	.word	0x200001a8
 80013f8:	200001ac 	.word	0x200001ac
 80013fc:	200001ae 	.word	0x200001ae

08001400 <gamepad_calculate_leff_joystick>:

int gamepad_calculate_leff_joystick(){
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
	if(is_gamepad_connect == 0) return -1;
 8001406:	4b60      	ldr	r3, [pc, #384]	; (8001588 <gamepad_calculate_leff_joystick+0x188>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <gamepad_calculate_leff_joystick+0x14>
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e0ae      	b.n	8001572 <gamepad_calculate_leff_joystick+0x172>
    int dir = -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	60fb      	str	r3, [r7, #12]

    int distance = (int)(sqrt(aLX*aLX + aLY*aLY));
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <gamepad_calculate_leff_joystick+0x18c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a5b      	ldr	r2, [pc, #364]	; (800158c <gamepad_calculate_leff_joystick+0x18c>)
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	fb03 f202 	mul.w	r2, r3, r2
 8001426:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <gamepad_calculate_leff_joystick+0x190>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4959      	ldr	r1, [pc, #356]	; (8001590 <gamepad_calculate_leff_joystick+0x190>)
 800142c:	6809      	ldr	r1, [r1, #0]
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f849 	bl	80004cc <__aeabi_i2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f007 fa91 	bl	8008968 <sqrt>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb57 	bl	8000b00 <__aeabi_d2iz>
 8001452:	4603      	mov	r3, r0
 8001454:	607b      	str	r3, [r7, #4]

    if (distance < 15){
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0e      	cmp	r3, #14
 800145a:	dc06      	bgt.n	800146a <gamepad_calculate_leff_joystick+0x6a>
        distance = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
        dir = -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	60fb      	str	r3, [r7, #12]
        return dir;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	e083      	b.n	8001572 <gamepad_calculate_leff_joystick+0x172>
    }else if (distance > 100){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b64      	cmp	r3, #100	; 0x64
 800146e:	dd01      	ble.n	8001474 <gamepad_calculate_leff_joystick+0x74>
    	distance = 100;
 8001470:	2364      	movs	r3, #100	; 0x64
 8001472:	607b      	str	r3, [r7, #4]
    }

    int angle = (int)(atan2(aLY, aLX) * 180 / 3.14);
 8001474:	4b46      	ldr	r3, [pc, #280]	; (8001590 <gamepad_calculate_leff_joystick+0x190>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f827 	bl	80004cc <__aeabi_i2d>
 800147e:	4604      	mov	r4, r0
 8001480:	460d      	mov	r5, r1
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <gamepad_calculate_leff_joystick+0x18c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f820 	bl	80004cc <__aeabi_i2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f007 fa66 	bl	8008964 <atan2>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <gamepad_calculate_leff_joystick+0x194>)
 800149e:	f7ff f87f 	bl	80005a0 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	a335      	add	r3, pc, #212	; (adr r3, 8001580 <gamepad_calculate_leff_joystick+0x180>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f9a0 	bl	80007f4 <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fb20 	bl	8000b00 <__aeabi_d2iz>
 80014c0:	4603      	mov	r3, r0
 80014c2:	60bb      	str	r3, [r7, #8]

    if (angle < 0) angle += 360;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da03      	bge.n	80014d2 <gamepad_calculate_leff_joystick+0xd2>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014d0:	60bb      	str	r3, [r7, #8]

    if ((0 <= angle && angle < 10) || angle >= 350)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db02      	blt.n	80014de <gamepad_calculate_leff_joystick+0xde>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2b09      	cmp	r3, #9
 80014dc:	dd03      	ble.n	80014e6 <gamepad_calculate_leff_joystick+0xe6>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80014e4:	db02      	blt.n	80014ec <gamepad_calculate_leff_joystick+0xec>
        dir = ROBOT_DIR_SR;
 80014e6:	2308      	movs	r3, #8
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e041      	b.n	8001570 <gamepad_calculate_leff_joystick+0x170>
    else if (15 <= angle && angle < 75)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b0e      	cmp	r3, #14
 80014f0:	dd05      	ble.n	80014fe <gamepad_calculate_leff_joystick+0xfe>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b4a      	cmp	r3, #74	; 0x4a
 80014f6:	dc02      	bgt.n	80014fe <gamepad_calculate_leff_joystick+0xfe>
        dir = ROBOT_DIR_RB;
 80014f8:	2306      	movs	r3, #6
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e038      	b.n	8001570 <gamepad_calculate_leff_joystick+0x170>
    else if (80 <= angle && angle < 110)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b4f      	cmp	r3, #79	; 0x4f
 8001502:	dd05      	ble.n	8001510 <gamepad_calculate_leff_joystick+0x110>
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b6d      	cmp	r3, #109	; 0x6d
 8001508:	dc02      	bgt.n	8001510 <gamepad_calculate_leff_joystick+0x110>
        dir = ROBOT_DIR_BW;
 800150a:	2309      	movs	r3, #9
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	e02f      	b.n	8001570 <gamepad_calculate_leff_joystick+0x170>
    else if (115 <= angle && angle < 165)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b72      	cmp	r3, #114	; 0x72
 8001514:	dd05      	ble.n	8001522 <gamepad_calculate_leff_joystick+0x122>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2ba4      	cmp	r3, #164	; 0xa4
 800151a:	dc02      	bgt.n	8001522 <gamepad_calculate_leff_joystick+0x122>
        dir = ROBOT_DIR_LB;
 800151c:	2305      	movs	r3, #5
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e026      	b.n	8001570 <gamepad_calculate_leff_joystick+0x170>
    else if (170 <= angle && angle < 190)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2ba9      	cmp	r3, #169	; 0xa9
 8001526:	dd05      	ble.n	8001534 <gamepad_calculate_leff_joystick+0x134>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2bbd      	cmp	r3, #189	; 0xbd
 800152c:	dc02      	bgt.n	8001534 <gamepad_calculate_leff_joystick+0x134>
        dir = ROBOT_DIR_SL;
 800152e:	2307      	movs	r3, #7
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	e01d      	b.n	8001570 <gamepad_calculate_leff_joystick+0x170>
    else if (195 <= angle && angle < 255)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2bc2      	cmp	r3, #194	; 0xc2
 8001538:	dd05      	ble.n	8001546 <gamepad_calculate_leff_joystick+0x146>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2bfe      	cmp	r3, #254	; 0xfe
 800153e:	dc02      	bgt.n	8001546 <gamepad_calculate_leff_joystick+0x146>
        dir = ROBOT_DIR_LF;
 8001540:	2304      	movs	r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e014      	b.n	8001570 <gamepad_calculate_leff_joystick+0x170>
    else if (260 <= angle && angle < 280)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800154c:	db06      	blt.n	800155c <gamepad_calculate_leff_joystick+0x15c>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001554:	da02      	bge.n	800155c <gamepad_calculate_leff_joystick+0x15c>
        dir = ROBOT_DIR_FW;
 8001556:	2303      	movs	r3, #3
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e009      	b.n	8001570 <gamepad_calculate_leff_joystick+0x170>
    else if (285 <= angle && angle < 345)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001562:	dd05      	ble.n	8001570 <gamepad_calculate_leff_joystick+0x170>
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800156a:	dc01      	bgt.n	8001570 <gamepad_calculate_leff_joystick+0x170>
        dir = ROBOT_DIR_RF;
 800156c:	2302      	movs	r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
    return dir;
 8001570:	68fb      	ldr	r3, [r7, #12]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bdb0      	pop	{r4, r5, r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	51eb851f 	.word	0x51eb851f
 8001584:	40091eb8 	.word	0x40091eb8
 8001588:	20000170 	.word	0x20000170
 800158c:	20000194 	.word	0x20000194
 8001590:	20000198 	.word	0x20000198
 8001594:	40668000 	.word	0x40668000

08001598 <gamepad_run_tele>:

int sm_pos = 1;
void gamepad_run_tele(int accel){
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	static int last_dir = -1;
	int my_dir = -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	617b      	str	r3, [r7, #20]
	int run_speed = MIN_SPEED;
 80015a6:	2314      	movs	r3, #20
 80015a8:	613b      	str	r3, [r7, #16]
	int turn_speed = MIN_SPEED;
 80015aa:	2314      	movs	r3, #20
 80015ac:	60fb      	str	r3, [r7, #12]
	my_dir = gamepad_calculate_leff_joystick();
 80015ae:	f7ff ff27 	bl	8001400 <gamepad_calculate_leff_joystick>
 80015b2:	6178      	str	r0, [r7, #20]
	if(b) {
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <gamepad_run_tele+0x13c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <gamepad_run_tele+0x2c>
		servo_set_angle(SERVO1, 0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 fdba 	bl	8002138 <servo_set_angle>
	}
	if(x){
 80015c4:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <gamepad_run_tele+0x140>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <gamepad_run_tele+0x3c>
		servo_set_angle(SERVO1, 45);
 80015cc:	212d      	movs	r1, #45	; 0x2d
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 fdb2 	bl	8002138 <servo_set_angle>
	}
	if(a){
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <gamepad_run_tele+0x144>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <gamepad_run_tele+0x5a>
		if(sm_pos == 1){
 80015dc:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <gamepad_run_tele+0x148>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <gamepad_run_tele+0x5a>
			sm_pos = 0;
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <gamepad_run_tele+0x148>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
			moveSM(-4);
 80015ea:	f06f 0003 	mvn.w	r0, #3
 80015ee:	f000 fead 	bl	800234c <moveSM>
		}
	}
	if(y){
 80015f2:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <gamepad_run_tele+0x14c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <gamepad_run_tele+0x76>
		if(sm_pos == 0){
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <gamepad_run_tele+0x148>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <gamepad_run_tele+0x76>
			sm_pos = 1;
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <gamepad_run_tele+0x148>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]
			moveSM(4);
 8001608:	2004      	movs	r0, #4
 800160a:	f000 fe9f 	bl	800234c <moveSM>
		}
	}
	if(dpad_up){
 800160e:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <gamepad_run_tele+0x150>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <gamepad_run_tele+0x82>
		my_dir = ROBOT_DIR_FW;
 8001616:	2303      	movs	r3, #3
 8001618:	617b      	str	r3, [r7, #20]
	}
	if(dpad_down){
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <gamepad_run_tele+0x154>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <gamepad_run_tele+0x8e>
		my_dir = ROBOT_DIR_BW;
 8001622:	2309      	movs	r3, #9
 8001624:	617b      	str	r3, [r7, #20]
	}
	if(dpad_left){
 8001626:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <gamepad_run_tele+0x158>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <gamepad_run_tele+0x9a>
		my_dir = ROBOT_DIR_L;
 800162e:	230a      	movs	r3, #10
 8001630:	617b      	str	r3, [r7, #20]
	}
	if(dpad_right){
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <gamepad_run_tele+0x15c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <gamepad_run_tele+0xa6>
		my_dir = ROBOT_DIR_R;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
	}

	if(r2){
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <gamepad_run_tele+0x160>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <gamepad_run_tele+0xb4>
		stop();
 8001646:	f000 fb8f 	bl	8001d68 <stop>
		while(1);
 800164a:	e7fe      	b.n	800164a <gamepad_run_tele+0xb2>
	}

	if (my_dir != last_dir) // got new direction command
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <gamepad_run_tele+0x164>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	429a      	cmp	r2, r3
 8001654:	d004      	beq.n	8001660 <gamepad_run_tele+0xc8>
	{
        run_speed = MIN_SPEED; // reset speed
 8001656:	2314      	movs	r3, #20
 8001658:	613b      	str	r3, [r7, #16]
        turn_speed = MIN_SPEED;
 800165a:	2314      	movs	r3, #20
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e015      	b.n	800168c <gamepad_run_tele+0xf4>
	}else {
		run_speed = run_speed + accel;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
		if(run_speed > MAX_SPEED) run_speed = MAX_SPEED;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2b1e      	cmp	r3, #30
 800166c:	dd01      	ble.n	8001672 <gamepad_run_tele+0xda>
 800166e:	231e      	movs	r3, #30
 8001670:	613b      	str	r3, [r7, #16]
		turn_speed = turn_speed + accel/2;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0fda      	lsrs	r2, r3, #31
 8001676:	4413      	add	r3, r2
 8001678:	105b      	asrs	r3, r3, #1
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
		if(turn_speed > MAX_SPEED) turn_speed = MAX_SPEED;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b1e      	cmp	r3, #30
 8001686:	dd01      	ble.n	800168c <gamepad_run_tele+0xf4>
 8001688:	231e      	movs	r3, #30
 800168a:	60fb      	str	r3, [r7, #12]
	}

	switch(my_dir){
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3b01      	subs	r3, #1
 8001690:	2b09      	cmp	r3, #9
 8001692:	bf8c      	ite	hi
 8001694:	2201      	movhi	r2, #1
 8001696:	2200      	movls	r2, #0
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	2a00      	cmp	r2, #0
 800169c:	d113      	bne.n	80016c6 <gamepad_run_tele+0x12e>
 800169e:	2201      	movs	r2, #1
 80016a0:	409a      	lsls	r2, r3
 80016a2:	f240 233b 	movw	r3, #571	; 0x23b
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <gamepad_run_tele+0x132>
 80016b6:	f402 73e2 	and.w	r3, r2, #452	; 0x1c4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
	case ROBOT_DIR_RF:
//		runDir(my_dir, turn_speed);
		break;
	default:
//		stop();
		break;
 80016c6:	bf00      	nop
 80016c8:	e000      	b.n	80016cc <gamepad_run_tele+0x134>
		break;
 80016ca:	bf00      	nop
	}

}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200001b5 	.word	0x200001b5
 80016d8:	200001b6 	.word	0x200001b6
 80016dc:	200001b4 	.word	0x200001b4
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	200001b7 	.word	0x200001b7
 80016e8:	200001b1 	.word	0x200001b1
 80016ec:	200001b2 	.word	0x200001b2
 80016f0:	200001b0 	.word	0x200001b0
 80016f4:	200001b3 	.word	0x200001b3
 80016f8:	200001bb 	.word	0x200001bb
 80016fc:	20000010 	.word	0x20000010

08001700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	4b52      	ldr	r3, [pc, #328]	; (8001860 <MX_GPIO_Init+0x160>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a51      	ldr	r2, [pc, #324]	; (8001860 <MX_GPIO_Init+0x160>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <MX_GPIO_Init+0x160>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <MX_GPIO_Init+0x160>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <MX_GPIO_Init+0x160>)
 8001732:	f043 0320 	orr.w	r3, r3, #32
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b49      	ldr	r3, [pc, #292]	; (8001860 <MX_GPIO_Init+0x160>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b46      	ldr	r3, [pc, #280]	; (8001860 <MX_GPIO_Init+0x160>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a45      	ldr	r2, [pc, #276]	; (8001860 <MX_GPIO_Init+0x160>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <MX_GPIO_Init+0x160>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <MX_GPIO_Init+0x160>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a3f      	ldr	r2, [pc, #252]	; (8001860 <MX_GPIO_Init+0x160>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <MX_GPIO_Init+0x160>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800177a:	483a      	ldr	r0, [pc, #232]	; (8001864 <MX_GPIO_Init+0x164>)
 800177c:	f002 ff88 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 8001780:	2200      	movs	r2, #0
 8001782:	f649 1102 	movw	r1, #39170	; 0x9902
 8001786:	4838      	ldr	r0, [pc, #224]	; (8001868 <MX_GPIO_Init+0x168>)
 8001788:	f002 ff82 	bl	8004690 <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2124      	movs	r1, #36	; 0x24
 8001790:	4836      	ldr	r0, [pc, #216]	; (800186c <MX_GPIO_Init+0x16c>)
 8001792:	f002 ff7d 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin|LED_LATCH_Pin;
 8001796:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	482d      	ldr	r0, [pc, #180]	; (8001864 <MX_GPIO_Init+0x164>)
 80017b0:	f002 fdda 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN1_Pin|LED7_EN2_Pin
 80017b4:	f649 1302 	movw	r3, #39170	; 0x9902
 80017b8:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4619      	mov	r1, r3
 80017cc:	4826      	ldr	r0, [pc, #152]	; (8001868 <MX_GPIO_Init+0x168>)
 80017ce:	f002 fdcb 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin;
 80017d2:	2304      	movs	r3, #4
 80017d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2302      	movs	r3, #2
 80017e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_DIR_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	4820      	ldr	r0, [pc, #128]	; (800186c <MX_GPIO_Init+0x16c>)
 80017ea:	f002 fdbd 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80017ee:	f24f 2308 	movw	r3, #61960	; 0xf208
 80017f2:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	481a      	ldr	r0, [pc, #104]	; (800186c <MX_GPIO_Init+0x16c>)
 8001804:	f002 fdb0 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8001808:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4619      	mov	r1, r3
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_GPIO_Init+0x164>)
 800181e:	f002 fda3 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 8001822:	2304      	movs	r3, #4
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <MX_GPIO_Init+0x170>)
 8001836:	f002 fd97 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SM_DIR_Pin;
 800183a:	2320      	movs	r3, #32
 800183c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_DIR_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4619      	mov	r1, r3
 8001850:	4806      	ldr	r0, [pc, #24]	; (800186c <MX_GPIO_Init+0x16c>)
 8001852:	f002 fd89 	bl	8004368 <HAL_GPIO_Init>

}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40011000 	.word	0x40011000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40011400 	.word	0x40011400

08001874 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_I2C2_Init+0x50>)
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <MX_I2C2_Init+0x54>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_I2C2_Init+0x50>)
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_I2C2_Init+0x58>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_I2C2_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_I2C2_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_I2C2_Init+0x50>)
 8001892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001896:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_I2C2_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018b2:	f002 ff1f 	bl	80046f4 <HAL_I2C_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018bc:	f000 f96e 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200001c0 	.word	0x200001c0
 80018c8:	40005800 	.word	0x40005800
 80018cc:	000186a0 	.word	0x000186a0

080018d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <HAL_I2C_MspInit+0x74>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d124      	bne.n	800193a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_I2C_MspInit+0x78>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_I2C_MspInit+0x78>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_I2C_MspInit+0x78>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001908:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800190c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	2312      	movs	r3, #18
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4619      	mov	r1, r3
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <HAL_I2C_MspInit+0x7c>)
 800191e:	f002 fd23 	bl	8004368 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_I2C_MspInit+0x78>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_I2C_MspInit+0x78>)
 8001928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_I2C_MspInit+0x78>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800193a:	bf00      	nop
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40005800 	.word	0x40005800
 8001948:	40021000 	.word	0x40021000
 800194c:	40010c00 	.word	0x40010c00

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0a4      	sub	sp, #144	; 0x90
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f001 fb11 	bl	8002f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 f893 	bl	8001a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195e:	f7ff fecf 	bl	8001700 <MX_GPIO_Init>
  MX_DMA_Init();
 8001962:	f7ff fb4d 	bl	8001000 <MX_DMA_Init>
  MX_ADC1_Init();
 8001966:	f7ff f8f3 	bl	8000b50 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800196a:	f001 f9f9 	bl	8002d60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800196e:	f001 fa21 	bl	8002db4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001972:	f7ff ff7f 	bl	8001874 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001976:	f000 fc69 	bl	800224c <MX_SPI1_Init>
  MX_TIM8_Init();
 800197a:	f000 ff93 	bl	80028a4 <MX_TIM8_Init>
  MX_TIM4_Init();
 800197e:	f000 fe8d 	bl	800269c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001982:	f000 ff19 	bl	80027b8 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001986:	f000 fdc7 	bl	8002518 <MX_TIM2_Init>
  MX_TIM3_Init();
 800198a:	f000 fe11 	bl	80025b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800198e:	4838      	ldr	r0, [pc, #224]	; (8001a70 <main+0x120>)
 8001990:	f005 f872 	bl	8006a78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001994:	2100      	movs	r1, #0
 8001996:	4837      	ldr	r0, [pc, #220]	; (8001a74 <main+0x124>)
 8001998:	f005 f926 	bl	8006be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800199c:	2104      	movs	r1, #4
 800199e:	4835      	ldr	r0, [pc, #212]	; (8001a74 <main+0x124>)
 80019a0:	f005 f922 	bl	8006be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80019a4:	2108      	movs	r1, #8
 80019a6:	4833      	ldr	r0, [pc, #204]	; (8001a74 <main+0x124>)
 80019a8:	f005 f91e 	bl	8006be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80019ac:	210c      	movs	r1, #12
 80019ae:	4831      	ldr	r0, [pc, #196]	; (8001a74 <main+0x124>)
 80019b0:	f005 f91a 	bl	8006be8 <HAL_TIM_PWM_Start>
  setTimer(0, 10);
 80019b4:	210a      	movs	r1, #10
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 fc08 	bl	80021cc <setTimer>
  setTimer(1, 1000);
 80019bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c0:	2001      	movs	r0, #1
 80019c2:	f000 fc03 	bl	80021cc <setTimer>
  servo_init(SERVO1);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 fba2 	bl	8002110 <servo_init>
  gamepad_init();
 80019cc:	f7ff fb36 	bl	800103c <gamepad_init>
  display_init();
 80019d0:	f7ff fa50 	bl	8000e74 <display_init>
  button_init();
 80019d4:	f7ff f9e0 	bl	8000d98 <button_init>
  display_7seg(47);
 80019d8:	202f      	movs	r0, #47	; 0x2f
 80019da:	f7ff fad7 	bl	8000f8c <display_7seg>
  display_led(0x0f);
 80019de:	200f      	movs	r0, #15
 80019e0:	f7ff fafe 	bl	8000fe0 <display_led>
  int len = 17;
 80019e4:	2311      	movs	r3, #17
 80019e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int note[17] = { NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <main+0x128>)
 80019ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019f0:	4611      	mov	r1, r2
 80019f2:	2244      	movs	r2, #68	; 0x44
 80019f4:	4618      	mov	r0, r3
 80019f6:	f006 ffa7 	bl	8008948 <memcpy>
		  	  	  NOTE_C5, NOTE_D5, NOTE_E5, NOTE_C5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5, NOTE_MUTE,
				  NOTE_E5, NOTE_F5, NOTE_G5};
  int dur[17] = { 1000, 500, 500, 500, 200,
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <main+0x12c>)
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4611      	mov	r1, r2
 8001a00:	2244      	movs	r2, #68	; 0x44
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 ffa0 	bl	8008948 <memcpy>
		  500, 500, 500, 200,
		  500, 500, 500};


  do {
	  HAL_Delay(10);
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f001 fb19 	bl	8003040 <HAL_Delay>
	  button_scan();
 8001a0e:	f7ff f9cf 	bl	8000db0 <button_scan>
  }  while(isButtonPressed(0) == 0);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fa12 	bl	8000e3c <isButtonPressed>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f4      	beq.n	8001a08 <main+0xb8>

  SensorCalib();
 8001a1e:	f000 fa55 	bl	8001ecc <SensorCalib>
  tone_play(note, dur, len);
 8001a22:	1d39      	adds	r1, r7, #4
 8001a24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a28:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 f96f 	bl	8002d10 <tone_play>
  do {
	  HAL_Delay(10);
 8001a32:	200a      	movs	r0, #10
 8001a34:	f001 fb04 	bl	8003040 <HAL_Delay>
	  button_scan();
 8001a38:	f7ff f9ba 	bl	8000db0 <button_scan>
  }
  while(isButtonPressed(0) == 0);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff f9fd 	bl	8000e3c <isButtonPressed>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f4      	beq.n	8001a32 <main+0xe2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flag[0] == 1){
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <main+0x130>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d1fb      	bne.n	8001a48 <main+0xf8>
		  setTimer(0, 10);
 8001a50:	210a      	movs	r1, #10
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 fbba 	bl	80021cc <setTimer>
		  ledBlink();
 8001a58:	f000 f886 	bl	8001b68 <ledBlink>
		  SensorScan();
 8001a5c:	f000 fa44 	bl	8001ee8 <SensorScan>
		  gamepad_update();
 8001a60:	f7ff fc24 	bl	80012ac <gamepad_update>
		  gamepad_run_tele(2);
 8001a64:	2002      	movs	r0, #2
 8001a66:	f7ff fd97 	bl	8001598 <gamepad_run_tele>
		  followLineUntilCross();
 8001a6a:	f000 fa09 	bl	8001e80 <followLineUntilCross>
	  if(timer_flag[0] == 1){
 8001a6e:	e7eb      	b.n	8001a48 <main+0xf8>
 8001a70:	20000344 	.word	0x20000344
 8001a74:	20000464 	.word	0x20000464
 8001a78:	08009038 	.word	0x08009038
 8001a7c:	0800907c 	.word	0x0800907c
 8001a80:	20000298 	.word	0x20000298

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	; 0x58
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8e:	2228      	movs	r2, #40	; 0x28
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f006 ff26 	bl	80088e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aca:	2302      	movs	r3, #2
 8001acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ad4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ad8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fd2c 	bl	800553c <HAL_RCC_OscConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001aea:	f000 f857 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aee:	230f      	movs	r3, #15
 8001af0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 ff98 	bl	8005a40 <HAL_RCC_ClockConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b16:	f000 f841 	bl	8001b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b22:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 f918 	bl	8005d5c <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b32:	f000 f833 	bl	8001b9c <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3758      	adds	r7, #88	; 0x58
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4e:	d107      	bne.n	8001b60 <HAL_TIM_PeriodElapsedCallback+0x22>
		timerRun(0);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 fb53 	bl	80021fc <timerRun>
		timerRun(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 fb50 	bl	80021fc <timerRun>
		display_run();
 8001b5c:	f7ff f996 	bl	8000e8c <display_run>
	}
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <ledBlink>:



int led_debug_count = 0;
void ledBlink(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	led_debug_count++;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <ledBlink+0x2c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <ledBlink+0x2c>)
 8001b74:	6013      	str	r3, [r2, #0]
	if(led_debug_count == 100){
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <ledBlink+0x2c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d107      	bne.n	8001b8e <ledBlink+0x26>
		led_debug_count = 0;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <ledBlink+0x2c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <ledBlink+0x30>)
 8001b8a:	f002 fd99 	bl	80046c0 <HAL_GPIO_TogglePin>
	}
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000214 	.word	0x20000214
 8001b98:	40011000 	.word	0x40011000

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <setSpeed>:
#define		UP			1
#define 	DOWN 		0

uint8_t speed_duty_cycle = 0;

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	71bb      	strb	r3, [r7, #6]
	speed_duty_cycle = duty_cycle;
 8001bb8:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <setSpeed+0x70>)
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	7013      	strb	r3, [r2, #0]
	switch (dc){
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d822      	bhi.n	8001c0c <setSpeed+0x64>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <setSpeed+0x24>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001be9 	.word	0x08001be9
 8001bd4:	08001bf5 	.word	0x08001bf5
 8001bd8:	08001c01 	.word	0x08001c01
	case 1:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, speed_duty_cycle);
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <setSpeed+0x70>)
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <setSpeed+0x74>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001be6:	e011      	b.n	8001c0c <setSpeed+0x64>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, speed_duty_cycle);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <setSpeed+0x70>)
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <setSpeed+0x74>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001bf2:	e00b      	b.n	8001c0c <setSpeed+0x64>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, speed_duty_cycle);
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <setSpeed+0x70>)
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <setSpeed+0x74>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001bfe:	e005      	b.n	8001c0c <setSpeed+0x64>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, speed_duty_cycle);
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <setSpeed+0x70>)
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <setSpeed+0x74>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001c0a:	bf00      	nop
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000218 	.word	0x20000218
 8001c1c:	20000464 	.word	0x20000464

08001c20 <dc1Move>:

void dc1Move(int duty_cycle){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c34:	480e      	ldr	r0, [pc, #56]	; (8001c70 <dc1Move+0x50>)
 8001c36:	f002 fd2b 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff ffb1 	bl	8001ba8 <setSpeed>
	}
	if(duty_cycle < 0){
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da0d      	bge.n	8001c68 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <dc1Move+0x50>)
 8001c54:	f002 fd1c 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff ffa0 	bl	8001ba8 <setSpeed>
	}
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40011000 	.word	0x40011000

08001c74 <dc2Move>:

void dc2Move(int duty_cycle){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <dc2Move+0x50>)
 8001c8a:	f002 fd01 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	2002      	movs	r0, #2
 8001c96:	f7ff ff87 	bl	8001ba8 <setSpeed>
	}
	if(duty_cycle < 0){
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da0d      	bge.n	8001cbc <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <dc2Move+0x50>)
 8001ca8:	f002 fcf2 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff ff76 	bl	8001ba8 <setSpeed>
	}
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40011000 	.word	0x40011000

08001cc8 <dc3Move>:

void dc3Move(int duty_cycle){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0a      	blt.n	8001cec <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2104      	movs	r1, #4
 8001cda:	480e      	ldr	r0, [pc, #56]	; (8001d14 <dc3Move+0x4c>)
 8001cdc:	f002 fcd8 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7ff ff5e 	bl	8001ba8 <setSpeed>
	}
	if(duty_cycle < 0){
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da0c      	bge.n	8001d0c <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	4807      	ldr	r0, [pc, #28]	; (8001d14 <dc3Move+0x4c>)
 8001cf8:	f002 fcca 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	425b      	negs	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	2003      	movs	r0, #3
 8001d08:	f7ff ff4e 	bl	8001ba8 <setSpeed>
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40010c00 	.word	0x40010c00

08001d18 <dc4Move>:

void dc4Move(int duty_cycle){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0a      	blt.n	8001d3c <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2102      	movs	r1, #2
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <dc4Move+0x4c>)
 8001d2c:	f002 fcb0 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	4619      	mov	r1, r3
 8001d36:	2004      	movs	r0, #4
 8001d38:	f7ff ff36 	bl	8001ba8 <setSpeed>
	}
	if(duty_cycle < 0){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	da0c      	bge.n	8001d5c <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2102      	movs	r1, #2
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <dc4Move+0x4c>)
 8001d48:	f002 fca2 	bl	8004690 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	425b      	negs	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4619      	mov	r1, r3
 8001d56:	2004      	movs	r0, #4
 8001d58:	f7ff ff26 	bl	8001ba8 <setSpeed>
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40010800 	.word	0x40010800

08001d68 <stop>:


void stop(){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	dc1Move(0);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff ff57 	bl	8001c20 <dc1Move>
	dc2Move(0);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff ff7e 	bl	8001c74 <dc2Move>
	dc3Move(0);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff ffa5 	bl	8001cc8 <dc3Move>
	dc4Move(0);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff ffca 	bl	8001d18 <dc4Move>
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <forward>:

void forward(int speed){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff45 	bl	8001c20 <dc1Move>
	dc2Move(speed);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff6c 	bl	8001c74 <dc2Move>
	dc3Move(speed);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff93 	bl	8001cc8 <dc3Move>
	dc4Move(speed);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffb8 	bl	8001d18 <dc4Move>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <runSpeed>:
			stop();
			break;
	}
}

void runSpeed(int left, int right){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	dc3Move(left);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff84 	bl	8001cc8 <dc3Move>
	dc4Move(left);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffa9 	bl	8001d18 <dc4Move>
	dc1Move(right);
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f7ff ff2a 	bl	8001c20 <dc1Move>
	dc2Move(right);
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f7ff ff51 	bl	8001c74 <dc2Move>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <followLine>:

void followLine(){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
	static int last_line_state = 0;
	uint8_t line_state = SensorGetLine();
 8001de2:	f000 f98b 	bl	80020fc <SensorGetLine>
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	switch(line_state){
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	3b02      	subs	r3, #2
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d83c      	bhi.n	8001e6c <followLine+0x90>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <followLine+0x1c>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e2d 	.word	0x08001e2d
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e15 	.word	0x08001e15
 8001e04:	08001e37 	.word	0x08001e37
 8001e08:	08001e57 	.word	0x08001e57
 8001e0c:	08001e41 	.word	0x08001e41
 8001e10:	08001e61 	.word	0x08001e61
	case LINE_CENTER:
		if(last_line_state == LINE_CENTER){
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <followLine+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d103      	bne.n	8001e24 <followLine+0x48>
			forward(MAX_SPEED);
 8001e1c:	201e      	movs	r0, #30
 8001e1e:	f7ff ffb3 	bl	8001d88 <forward>
		} else {
			forward(MIN_SPEED);
		}
		break;
 8001e22:	e026      	b.n	8001e72 <followLine+0x96>
			forward(MIN_SPEED);
 8001e24:	2014      	movs	r0, #20
 8001e26:	f7ff ffaf 	bl	8001d88 <forward>
		break;
 8001e2a:	e022      	b.n	8001e72 <followLine+0x96>
	case LINE_LEFT1:
		runSpeed(MIN_SPEED, MIN_SPEED*1.25);
 8001e2c:	2119      	movs	r1, #25
 8001e2e:	2014      	movs	r0, #20
 8001e30:	f7ff ffbe 	bl	8001db0 <runSpeed>
		break;
 8001e34:	e01d      	b.n	8001e72 <followLine+0x96>
	case LINE_LEFT2:
		runSpeed(0, MIN_SPEED);
 8001e36:	2114      	movs	r1, #20
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff ffb9 	bl	8001db0 <runSpeed>
		break;
 8001e3e:	e018      	b.n	8001e72 <followLine+0x96>
	case LINE_LEFT3:
		runSpeed(-MIN_SPEED, MIN_SPEED);
 8001e40:	2114      	movs	r1, #20
 8001e42:	f06f 0013 	mvn.w	r0, #19
 8001e46:	f7ff ffb3 	bl	8001db0 <runSpeed>
		break;
 8001e4a:	e012      	b.n	8001e72 <followLine+0x96>
	case LINE_RIGHT1:
		runSpeed(MIN_SPEED*1.25, MIN_SPEED);
 8001e4c:	2114      	movs	r1, #20
 8001e4e:	2019      	movs	r0, #25
 8001e50:	f7ff ffae 	bl	8001db0 <runSpeed>
		break;
 8001e54:	e00d      	b.n	8001e72 <followLine+0x96>
	case LINE_RIGHT2:
		runSpeed(MIN_SPEED, 0);
 8001e56:	2100      	movs	r1, #0
 8001e58:	2014      	movs	r0, #20
 8001e5a:	f7ff ffa9 	bl	8001db0 <runSpeed>
		break;
 8001e5e:	e008      	b.n	8001e72 <followLine+0x96>
	case LINE_RIGHT3:
		runSpeed(MIN_SPEED, -MIN_SPEED);
 8001e60:	f06f 0113 	mvn.w	r1, #19
 8001e64:	2014      	movs	r0, #20
 8001e66:	f7ff ffa3 	bl	8001db0 <runSpeed>
		break;
 8001e6a:	e002      	b.n	8001e72 <followLine+0x96>
	default:
		stop();
 8001e6c:	f7ff ff7c 	bl	8001d68 <stop>
		break;
 8001e70:	bf00      	nop
	}
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000021c 	.word	0x2000021c

08001e80 <followLineUntilCross>:

int followLineUntilCross(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	static int status = 0;
	uint8_t line_state = SensorGetLine();
 8001e86:	f000 f939 	bl	80020fc <SensorGetLine>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	if(status == 0){
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <followLineUntilCross+0x48>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <followLineUntilCross+0x24>
		if(line_state != LINE_CROSS) status = 1;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d00e      	beq.n	8001eba <followLineUntilCross+0x3a>
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <followLineUntilCross+0x48>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e00a      	b.n	8001eba <followLineUntilCross+0x3a>
	} else if(status == 1){
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <followLineUntilCross+0x48>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <followLineUntilCross+0x3a>
		if(line_state == LINE_CROSS) {
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d103      	bne.n	8001eba <followLineUntilCross+0x3a>
			stop();
 8001eb2:	f7ff ff59 	bl	8001d68 <stop>
//			status = 0;
			return 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e002      	b.n	8001ec0 <followLineUntilCross+0x40>
		}
	}
	followLine();
 8001eba:	f7ff ff8f 	bl	8001ddc <followLine>
	return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000220 	.word	0x20000220

08001ecc <SensorCalib>:
int sensor_map[8] = {0, 3, 5, 6, 1, 2, 4, 7};
uint8_t line_status = 0;
uint8_t front_status = 0;


void SensorCalib(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*)sensor_calib, 8);
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <SensorCalib+0x14>)
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <SensorCalib+0x18>)
 8001ed6:	f001 f9c1 	bl	800325c <HAL_ADC_Start_DMA>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000234 	.word	0x20000234
 8001ee4:	200000cc 	.word	0x200000cc

08001ee8 <SensorScan>:

void SensorScan(){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*)sensor_buffer, 8);
 8001eee:	2208      	movs	r2, #8
 8001ef0:	497d      	ldr	r1, [pc, #500]	; (80020e8 <SensorScan+0x200>)
 8001ef2:	487e      	ldr	r0, [pc, #504]	; (80020ec <SensorScan+0x204>)
 8001ef4:	f001 f9b2 	bl	800325c <HAL_ADC_Start_DMA>

	uint8_t temp = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++){
 8001efc:	2300      	movs	r3, #0
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	e023      	b.n	8001f4a <SensorScan+0x62>
		if((sensor_buffer[i] > (sensor_calib[i] - SENSOR_ERROR_RANGE)) && (sensor_buffer[i] < (sensor_calib[i] + SENSOR_ERROR_RANGE))){
 8001f02:	4a7b      	ldr	r2, [pc, #492]	; (80020f0 <SensorScan+0x208>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f0a:	3bc7      	subs	r3, #199	; 0xc7
 8001f0c:	4976      	ldr	r1, [pc, #472]	; (80020e8 <SensorScan+0x200>)
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f14:	4293      	cmp	r3, r2
 8001f16:	dc15      	bgt.n	8001f44 <SensorScan+0x5c>
 8001f18:	4a75      	ldr	r2, [pc, #468]	; (80020f0 <SensorScan+0x208>)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f20:	33c7      	adds	r3, #199	; 0xc7
 8001f22:	4971      	ldr	r1, [pc, #452]	; (80020e8 <SensorScan+0x200>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	db0a      	blt.n	8001f44 <SensorScan+0x5c>
			temp = temp + (0x80 >> sensor_map[i]);
 8001f2e:	4a71      	ldr	r2, [pc, #452]	; (80020f4 <SensorScan+0x20c>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	fa42 f303 	asr.w	r3, r2, r3
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4413      	add	r3, r2
 8001f42:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++){
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b07      	cmp	r3, #7
 8001f4e:	ddd8      	ble.n	8001f02 <SensorScan+0x1a>
		}
	}
	display_led(temp);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f844 	bl	8000fe0 <display_led>
	switch (temp & 0b01111110) {
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001f5e:	2b7e      	cmp	r3, #126	; 0x7e
 8001f60:	f000 8099 	beq.w	8002096 <SensorScan+0x1ae>
 8001f64:	2b7e      	cmp	r3, #126	; 0x7e
 8001f66:	f300 80b6 	bgt.w	80020d6 <SensorScan+0x1ee>
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	f300 808c 	bgt.w	8002088 <SensorScan+0x1a0>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f2c0 80b0 	blt.w	80020d6 <SensorScan+0x1ee>
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	f200 80ad 	bhi.w	80020d6 <SensorScan+0x1ee>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <SensorScan+0x9c>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	0800208f 	.word	0x0800208f
 8001f88:	080020d7 	.word	0x080020d7
 8001f8c:	080020b7 	.word	0x080020b7
 8001f90:	080020d7 	.word	0x080020d7
 8001f94:	080020af 	.word	0x080020af
 8001f98:	080020d7 	.word	0x080020d7
 8001f9c:	080020af 	.word	0x080020af
 8001fa0:	080020d7 	.word	0x080020d7
 8001fa4:	080020a7 	.word	0x080020a7
 8001fa8:	080020d7 	.word	0x080020d7
 8001fac:	080020d7 	.word	0x080020d7
 8001fb0:	080020d7 	.word	0x080020d7
 8001fb4:	080020a7 	.word	0x080020a7
 8001fb8:	080020d7 	.word	0x080020d7
 8001fbc:	080020d7 	.word	0x080020d7
 8001fc0:	080020d7 	.word	0x080020d7
 8001fc4:	080020bf 	.word	0x080020bf
 8001fc8:	080020d7 	.word	0x080020d7
 8001fcc:	080020d7 	.word	0x080020d7
 8001fd0:	080020d7 	.word	0x080020d7
 8001fd4:	080020d7 	.word	0x080020d7
 8001fd8:	080020d7 	.word	0x080020d7
 8001fdc:	080020d7 	.word	0x080020d7
 8001fe0:	080020d7 	.word	0x080020d7
 8001fe4:	0800209f 	.word	0x0800209f
 8001fe8:	080020d7 	.word	0x080020d7
 8001fec:	080020d7 	.word	0x080020d7
 8001ff0:	080020d7 	.word	0x080020d7
 8001ff4:	080020d7 	.word	0x080020d7
 8001ff8:	080020d7 	.word	0x080020d7
 8001ffc:	080020d7 	.word	0x080020d7
 8002000:	080020d7 	.word	0x080020d7
 8002004:	080020c7 	.word	0x080020c7
 8002008:	080020d7 	.word	0x080020d7
 800200c:	080020d7 	.word	0x080020d7
 8002010:	080020d7 	.word	0x080020d7
 8002014:	080020d7 	.word	0x080020d7
 8002018:	080020d7 	.word	0x080020d7
 800201c:	080020d7 	.word	0x080020d7
 8002020:	080020d7 	.word	0x080020d7
 8002024:	080020d7 	.word	0x080020d7
 8002028:	080020d7 	.word	0x080020d7
 800202c:	080020d7 	.word	0x080020d7
 8002030:	080020d7 	.word	0x080020d7
 8002034:	080020d7 	.word	0x080020d7
 8002038:	080020d7 	.word	0x080020d7
 800203c:	080020d7 	.word	0x080020d7
 8002040:	080020d7 	.word	0x080020d7
 8002044:	080020bf 	.word	0x080020bf
 8002048:	080020d7 	.word	0x080020d7
 800204c:	080020d7 	.word	0x080020d7
 8002050:	080020d7 	.word	0x080020d7
 8002054:	080020d7 	.word	0x080020d7
 8002058:	080020d7 	.word	0x080020d7
 800205c:	080020d7 	.word	0x080020d7
 8002060:	080020d7 	.word	0x080020d7
 8002064:	080020d7 	.word	0x080020d7
 8002068:	080020d7 	.word	0x080020d7
 800206c:	080020d7 	.word	0x080020d7
 8002070:	080020d7 	.word	0x080020d7
 8002074:	080020d7 	.word	0x080020d7
 8002078:	080020d7 	.word	0x080020d7
 800207c:	080020d7 	.word	0x080020d7
 8002080:	080020d7 	.word	0x080020d7
 8002084:	080020cf 	.word	0x080020cf
 8002088:	2b60      	cmp	r3, #96	; 0x60
 800208a:	d01c      	beq.n	80020c6 <SensorScan+0x1de>
 800208c:	e023      	b.n	80020d6 <SensorScan+0x1ee>
		case 0b00000000:
			line_status = LINE_END;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <SensorScan+0x210>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
			break;
 8002094:	e023      	b.n	80020de <SensorScan+0x1f6>
		case 0b01111110:
			line_status = LINE_CROSS;
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <SensorScan+0x210>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
			break;
 800209c:	e01f      	b.n	80020de <SensorScan+0x1f6>
		case 0b00011000:
			line_status = LINE_CENTER;
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <SensorScan+0x210>)
 80020a0:	2204      	movs	r2, #4
 80020a2:	701a      	strb	r2, [r3, #0]
			break;
 80020a4:	e01b      	b.n	80020de <SensorScan+0x1f6>
		case 0b00001100:
		case 0b00001000:
			line_status = LINE_RIGHT1;
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <SensorScan+0x210>)
 80020a8:	2203      	movs	r2, #3
 80020aa:	701a      	strb	r2, [r3, #0]
			break;
 80020ac:	e017      	b.n	80020de <SensorScan+0x1f6>
		case 0b00000110:
		case 0b00000100:
			line_status = LINE_RIGHT2;
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <SensorScan+0x210>)
 80020b0:	2206      	movs	r2, #6
 80020b2:	701a      	strb	r2, [r3, #0]
			break;
 80020b4:	e013      	b.n	80020de <SensorScan+0x1f6>
		case 0b00000010:
			line_status = LINE_RIGHT3;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <SensorScan+0x210>)
 80020b8:	2208      	movs	r2, #8
 80020ba:	701a      	strb	r2, [r3, #0]
			break;
 80020bc:	e00f      	b.n	80020de <SensorScan+0x1f6>
		case 0b00110000:
		case 0b00010000:
			line_status = LINE_LEFT1;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <SensorScan+0x210>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]
			break;
 80020c4:	e00b      	b.n	80020de <SensorScan+0x1f6>
		case 0b01100000:
		case 0b00100000:
			line_status = LINE_LEFT2;
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <SensorScan+0x210>)
 80020c8:	2205      	movs	r2, #5
 80020ca:	701a      	strb	r2, [r3, #0]
			break;
 80020cc:	e007      	b.n	80020de <SensorScan+0x1f6>
		case 0b01000000:
			line_status = LINE_LEFT3;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <SensorScan+0x210>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	701a      	strb	r2, [r3, #0]
			break;
 80020d4:	e003      	b.n	80020de <SensorScan+0x1f6>
		default:
			line_status = LINE_ERROR;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <SensorScan+0x210>)
 80020d8:	2209      	movs	r2, #9
 80020da:	701a      	strb	r2, [r3, #0]
			break;
 80020dc:	bf00      	nop
	}
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000224 	.word	0x20000224
 80020ec:	200000cc 	.word	0x200000cc
 80020f0:	20000234 	.word	0x20000234
 80020f4:	20000014 	.word	0x20000014
 80020f8:	20000244 	.word	0x20000244

080020fc <SensorGetLine>:

uint8_t SensorGetLine(){
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
	return line_status;
 8002100:	4b02      	ldr	r3, [pc, #8]	; (800210c <SensorGetLine+0x10>)
 8002102:	781b      	ldrb	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000244 	.word	0x20000244

08002110 <servo_init>:

#include "servo.h"

uint32_t servo_channel[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};

void servo_init(int servo_id){
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]);
 8002118:	4a05      	ldr	r2, [pc, #20]	; (8002130 <servo_init+0x20>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	4619      	mov	r1, r3
 8002122:	4804      	ldr	r0, [pc, #16]	; (8002134 <servo_init+0x24>)
 8002124:	f004 fd60 	bl	8006be8 <HAL_TIM_PWM_Start>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000034 	.word	0x20000034
 8002134:	200003d4 	.word	0x200003d4

08002138 <servo_set_angle>:

void servo_set_angle(int servo_id, int angle){
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	if(angle < 0 || angle > 180) return;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db35      	blt.n	80021b4 <servo_set_angle+0x7c>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2bb4      	cmp	r3, #180	; 0xb4
 800214c:	dc32      	bgt.n	80021b4 <servo_set_angle+0x7c>
	int duty = (angle*100)/180 + 25;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2264      	movs	r2, #100	; 0x64
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <servo_set_angle+0x88>)
 8002158:	fb82 1203 	smull	r1, r2, r2, r3
 800215c:	441a      	add	r2, r3
 800215e:	11d2      	asrs	r2, r2, #7
 8002160:	17db      	asrs	r3, r3, #31
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	3319      	adds	r3, #25
 8002166:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty);
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <servo_set_angle+0x8c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <servo_set_angle+0x46>
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <servo_set_angle+0x90>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
 800217c:	e01b      	b.n	80021b6 <servo_set_angle+0x7e>
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <servo_set_angle+0x8c>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d104      	bne.n	8002194 <servo_set_angle+0x5c>
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <servo_set_angle+0x90>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6393      	str	r3, [r2, #56]	; 0x38
 8002192:	e010      	b.n	80021b6 <servo_set_angle+0x7e>
 8002194:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <servo_set_angle+0x8c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	2b08      	cmp	r3, #8
 800219e:	d104      	bne.n	80021aa <servo_set_angle+0x72>
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <servo_set_angle+0x90>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80021a8:	e005      	b.n	80021b6 <servo_set_angle+0x7e>
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <servo_set_angle+0x90>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	e000      	b.n	80021b6 <servo_set_angle+0x7e>
	if(angle < 0 || angle > 180) return;
 80021b4:	bf00      	nop
}
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	b60b60b7 	.word	0xb60b60b7
 80021c4:	20000034 	.word	0x20000034
 80021c8:	200003d4 	.word	0x200003d4

080021cc <setTimer>:
#include "software_timer.h"

int timer_counter[20] = {0};
int timer_flag[20] = {0};

void setTimer(int index, int duration){
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 80021d6:	4907      	ldr	r1, [pc, #28]	; (80021f4 <setTimer+0x28>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80021e0:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <setTimer+0x2c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2100      	movs	r1, #0
 80021e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	20000248 	.word	0x20000248
 80021f8:	20000298 	.word	0x20000298

080021fc <timerRun>:

void timerRun(int index){
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <timerRun+0x48>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	2b00      	cmp	r3, #0
 800220e:	dd13      	ble.n	8002238 <timerRun+0x3c>
		timer_counter[index]--;
 8002210:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <timerRun+0x48>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	490a      	ldr	r1, [pc, #40]	; (8002244 <timerRun+0x48>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <timerRun+0x48>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	2b00      	cmp	r3, #0
 800222c:	dc04      	bgt.n	8002238 <timerRun+0x3c>
			timer_flag[index] = 1;
 800222e:	4a06      	ldr	r2, [pc, #24]	; (8002248 <timerRun+0x4c>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2101      	movs	r1, #1
 8002234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000248 	.word	0x20000248
 8002248:	20000298 	.word	0x20000298

0800224c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <MX_SPI1_Init+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800225c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_SPI1_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002278:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800227c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002280:	2208      	movs	r2, #8
 8002282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_SPI1_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_SPI1_Init+0x64>)
 8002298:	220a      	movs	r2, #10
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <MX_SPI1_Init+0x64>)
 800229e:	f003 fe13 	bl	8005ec8 <HAL_SPI_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022a8:	f7ff fc78 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200002e8 	.word	0x200002e8
 80022b4:	40013000 	.word	0x40013000

080022b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <HAL_SPI_MspInit+0x88>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d12f      	bne.n	8002338 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_SPI_MspInit+0x8c>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_SPI_MspInit+0x8c>)
 80022de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_SPI_MspInit+0x8c>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_SPI_MspInit+0x8c>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a13      	ldr	r2, [pc, #76]	; (8002344 <HAL_SPI_MspInit+0x8c>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_SPI_MspInit+0x8c>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002308:	23b0      	movs	r3, #176	; 0xb0
 800230a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4619      	mov	r1, r3
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <HAL_SPI_MspInit+0x90>)
 800231c:	f002 f824 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002320:	2340      	movs	r3, #64	; 0x40
 8002322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <HAL_SPI_MspInit+0x90>)
 8002334:	f002 f818 	bl	8004368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40013000 	.word	0x40013000
 8002344:	40021000 	.word	0x40021000
 8002348:	40010800 	.word	0x40010800

0800234c <moveSM>:
#define DUTY	50
#define SPR		200

int count_spr = 0;

void moveSM(int cycle){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	if(cycle >= 0){
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0a      	blt.n	8002370 <moveSM+0x24>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	2120      	movs	r1, #32
 800235e:	4812      	ldr	r0, [pc, #72]	; (80023a8 <moveSM+0x5c>)
 8002360:	f002 f996 	bl	8004690 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	22c8      	movs	r2, #200	; 0xc8
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <moveSM+0x60>)
 800236e:	6013      	str	r3, [r2, #0]
	}
	if(cycle < 0){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da0b      	bge.n	800238e <moveSM+0x42>
		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, GPIO_PIN_RESET);
 8002376:	2200      	movs	r2, #0
 8002378:	2120      	movs	r1, #32
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <moveSM+0x5c>)
 800237c:	f002 f988 	bl	8004690 <HAL_GPIO_WritePin>
		count_spr = SPR * cycle * -1;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a08      	ldr	r2, [pc, #32]	; (80023ac <moveSM+0x60>)
 800238c:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY);
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <moveSM+0x64>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2232      	movs	r2, #50	; 0x32
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002396:	2100      	movs	r1, #0
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <moveSM+0x64>)
 800239a:	f004 fd4f 	bl	8006e3c <HAL_TIM_PWM_Start_IT>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40010c00 	.word	0x40010c00
 80023ac:	20000340 	.word	0x20000340
 80023b0:	2000038c 	.word	0x2000038c

080023b4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10c      	bne.n	80023e0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		count_spr--;
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80023ce:	6013      	str	r3, [r2, #0]
		if(count_spr <= 0)
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	dc03      	bgt.n	80023e0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80023d8:	2100      	movs	r1, #0
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80023dc:	f004 fe36 	bl	800704c <HAL_TIM_PWM_Stop_IT>
	}
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40000400 	.word	0x40000400
 80023ec:	20000340 	.word	0x20000340
 80023f0:	2000038c 	.word	0x2000038c

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_MspInit+0x5c>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4a14      	ldr	r2, [pc, #80]	; (8002450 <HAL_MspInit+0x5c>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6193      	str	r3, [r2, #24]
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_MspInit+0x5c>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <HAL_MspInit+0x5c>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_MspInit+0x5c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_MspInit+0x60>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_MspInit+0x60>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249e:	f000 fdb3 	bl	8003008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <DMA1_Channel1_IRQHandler+0x10>)
 80024ae:	f001 fcf1 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200000fc 	.word	0x200000fc

080024bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM2_IRQHandler+0x10>)
 80024c2:	f004 fe81 	bl	80071c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000344 	.word	0x20000344

080024d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM3_IRQHandler+0x10>)
 80024d6:	f004 fe77 	bl	80071c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000038c 	.word	0x2000038c

080024e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <USART1_IRQHandler+0x10>)
 80024ea:	f005 fd19 	bl	8007f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200004ac 	.word	0x200004ac

080024f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <USART2_IRQHandler+0x10>)
 80024fe:	f005 fd0f 	bl	8007f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200004f4 	.word	0x200004f4

0800250c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <MX_TIM2_Init+0x94>)
 8002536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800253a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <MX_TIM2_Init+0x94>)
 800253e:	2247      	movs	r2, #71	; 0x47
 8002540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <MX_TIM2_Init+0x94>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <MX_TIM2_Init+0x94>)
 800254a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800254e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <MX_TIM2_Init+0x94>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <MX_TIM2_Init+0x94>)
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800255c:	4813      	ldr	r0, [pc, #76]	; (80025ac <MX_TIM2_Init+0x94>)
 800255e:	f004 fa3b 	bl	80069d8 <HAL_TIM_Base_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002568:	f7ff fb18 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	4619      	mov	r1, r3
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <MX_TIM2_Init+0x94>)
 800257a:	f004 ffef 	bl	800755c <HAL_TIM_ConfigClockSource>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002584:	f7ff fb0a 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_TIM2_Init+0x94>)
 8002596:	f005 fba3 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025a0:	f7ff fafc 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000344 	.word	0x20000344

080025b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	f107 0320 	add.w	r3, r7, #32
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
 80025dc:	615a      	str	r2, [r3, #20]
 80025de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <MX_TIM3_Init+0xe4>)
 80025e2:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <MX_TIM3_Init+0xe8>)
 80025e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80025e6:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <MX_TIM3_Init+0xe4>)
 80025e8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80025ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <MX_TIM3_Init+0xe4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <MX_TIM3_Init+0xe4>)
 80025f6:	2263      	movs	r2, #99	; 0x63
 80025f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <MX_TIM3_Init+0xe4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <MX_TIM3_Init+0xe4>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002606:	4823      	ldr	r0, [pc, #140]	; (8002694 <MX_TIM3_Init+0xe4>)
 8002608:	f004 f9e6 	bl	80069d8 <HAL_TIM_Base_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002612:	f7ff fac3 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800261c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002620:	4619      	mov	r1, r3
 8002622:	481c      	ldr	r0, [pc, #112]	; (8002694 <MX_TIM3_Init+0xe4>)
 8002624:	f004 ff9a 	bl	800755c <HAL_TIM_ConfigClockSource>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800262e:	f7ff fab5 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002632:	4818      	ldr	r0, [pc, #96]	; (8002694 <MX_TIM3_Init+0xe4>)
 8002634:	f004 fa80 	bl	8006b38 <HAL_TIM_PWM_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800263e:	f7ff faad 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800264a:	f107 0320 	add.w	r3, r7, #32
 800264e:	4619      	mov	r1, r3
 8002650:	4810      	ldr	r0, [pc, #64]	; (8002694 <MX_TIM3_Init+0xe4>)
 8002652:	f005 fb45 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800265c:	f7ff fa9e 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002660:	2360      	movs	r3, #96	; 0x60
 8002662:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	4619      	mov	r1, r3
 8002676:	4807      	ldr	r0, [pc, #28]	; (8002694 <MX_TIM3_Init+0xe4>)
 8002678:	f004 feae 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002682:	f7ff fa8b 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002686:	4803      	ldr	r0, [pc, #12]	; (8002694 <MX_TIM3_Init+0xe4>)
 8002688:	f000 fa4c 	bl	8002b24 <HAL_TIM_MspPostInit>

}
 800268c:	bf00      	nop
 800268e:	3738      	adds	r7, #56	; 0x38
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2000038c 	.word	0x2000038c
 8002698:	40000400 	.word	0x40000400

0800269c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b0:	f107 0320 	add.w	r3, r7, #32
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
 80026c8:	615a      	str	r2, [r3, #20]
 80026ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <MX_TIM4_Init+0x114>)
 80026ce:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <MX_TIM4_Init+0x118>)
 80026d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <MX_TIM4_Init+0x114>)
 80026d4:	f240 529f 	movw	r2, #1439	; 0x59f
 80026d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <MX_TIM4_Init+0x114>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80026e0:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <MX_TIM4_Init+0x114>)
 80026e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e8:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <MX_TIM4_Init+0x114>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <MX_TIM4_Init+0x114>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026f4:	482e      	ldr	r0, [pc, #184]	; (80027b0 <MX_TIM4_Init+0x114>)
 80026f6:	f004 f96f 	bl	80069d8 <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002700:	f7ff fa4c 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800270a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800270e:	4619      	mov	r1, r3
 8002710:	4827      	ldr	r0, [pc, #156]	; (80027b0 <MX_TIM4_Init+0x114>)
 8002712:	f004 ff23 	bl	800755c <HAL_TIM_ConfigClockSource>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800271c:	f7ff fa3e 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002720:	4823      	ldr	r0, [pc, #140]	; (80027b0 <MX_TIM4_Init+0x114>)
 8002722:	f004 fa09 	bl	8006b38 <HAL_TIM_PWM_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800272c:	f7ff fa36 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002738:	f107 0320 	add.w	r3, r7, #32
 800273c:	4619      	mov	r1, r3
 800273e:	481c      	ldr	r0, [pc, #112]	; (80027b0 <MX_TIM4_Init+0x114>)
 8002740:	f005 face 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800274a:	f7ff fa27 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800274e:	2360      	movs	r3, #96	; 0x60
 8002750:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8002752:	2319      	movs	r3, #25
 8002754:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	2200      	movs	r2, #0
 8002762:	4619      	mov	r1, r3
 8002764:	4812      	ldr	r0, [pc, #72]	; (80027b0 <MX_TIM4_Init+0x114>)
 8002766:	f004 fe37 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002770:	f7ff fa14 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	2204      	movs	r2, #4
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_TIM4_Init+0x114>)
 800277c:	f004 fe2c 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002786:	f7ff fa09 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	2208      	movs	r2, #8
 800278e:	4619      	mov	r1, r3
 8002790:	4807      	ldr	r0, [pc, #28]	; (80027b0 <MX_TIM4_Init+0x114>)
 8002792:	f004 fe21 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800279c:	f7ff f9fe 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027a0:	4803      	ldr	r0, [pc, #12]	; (80027b0 <MX_TIM4_Init+0x114>)
 80027a2:	f000 f9bf 	bl	8002b24 <HAL_TIM_MspPostInit>

}
 80027a6:	bf00      	nop
 80027a8:	3738      	adds	r7, #56	; 0x38
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003d4 	.word	0x200003d4
 80027b4:	40000800 	.word	0x40000800

080027b8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08e      	sub	sp, #56	; 0x38
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
 80027e4:	615a      	str	r2, [r3, #20]
 80027e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027e8:	4b2c      	ldr	r3, [pc, #176]	; (800289c <MX_TIM5_Init+0xe4>)
 80027ea:	4a2d      	ldr	r2, [pc, #180]	; (80028a0 <MX_TIM5_Init+0xe8>)
 80027ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <MX_TIM5_Init+0xe4>)
 80027f0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80027f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <MX_TIM5_Init+0xe4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <MX_TIM5_Init+0xe4>)
 80027fe:	2263      	movs	r2, #99	; 0x63
 8002800:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <MX_TIM5_Init+0xe4>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <MX_TIM5_Init+0xe4>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800280e:	4823      	ldr	r0, [pc, #140]	; (800289c <MX_TIM5_Init+0xe4>)
 8002810:	f004 f8e2 	bl	80069d8 <HAL_TIM_Base_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800281a:	f7ff f9bf 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002828:	4619      	mov	r1, r3
 800282a:	481c      	ldr	r0, [pc, #112]	; (800289c <MX_TIM5_Init+0xe4>)
 800282c:	f004 fe96 	bl	800755c <HAL_TIM_ConfigClockSource>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002836:	f7ff f9b1 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800283a:	4818      	ldr	r0, [pc, #96]	; (800289c <MX_TIM5_Init+0xe4>)
 800283c:	f004 f97c 	bl	8006b38 <HAL_TIM_PWM_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002846:	f7ff f9a9 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002852:	f107 0320 	add.w	r3, r7, #32
 8002856:	4619      	mov	r1, r3
 8002858:	4810      	ldr	r0, [pc, #64]	; (800289c <MX_TIM5_Init+0xe4>)
 800285a:	f005 fa41 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002864:	f7ff f99a 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002868:	2360      	movs	r3, #96	; 0x60
 800286a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	4619      	mov	r1, r3
 800287e:	4807      	ldr	r0, [pc, #28]	; (800289c <MX_TIM5_Init+0xe4>)
 8002880:	f004 fdaa 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800288a:	f7ff f987 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800288e:	4803      	ldr	r0, [pc, #12]	; (800289c <MX_TIM5_Init+0xe4>)
 8002890:	f000 f948 	bl	8002b24 <HAL_TIM_MspPostInit>

}
 8002894:	bf00      	nop
 8002896:	3738      	adds	r7, #56	; 0x38
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	2000041c 	.word	0x2000041c
 80028a0:	40000c00 	.word	0x40000c00

080028a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b096      	sub	sp, #88	; 0x58
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2220      	movs	r2, #32
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f006 f801 	bl	80088e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80028e2:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <MX_TIM8_Init+0x180>)
 80028e4:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <MX_TIM8_Init+0x184>)
 80028e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <MX_TIM8_Init+0x180>)
 80028ea:	f240 1267 	movw	r2, #359	; 0x167
 80028ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <MX_TIM8_Init+0x180>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80028f6:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <MX_TIM8_Init+0x180>)
 80028f8:	2263      	movs	r2, #99	; 0x63
 80028fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <MX_TIM8_Init+0x180>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002902:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <MX_TIM8_Init+0x180>)
 8002904:	2200      	movs	r2, #0
 8002906:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <MX_TIM8_Init+0x180>)
 800290a:	2200      	movs	r2, #0
 800290c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800290e:	4845      	ldr	r0, [pc, #276]	; (8002a24 <MX_TIM8_Init+0x180>)
 8002910:	f004 f862 	bl	80069d8 <HAL_TIM_Base_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800291a:	f7ff f93f 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002928:	4619      	mov	r1, r3
 800292a:	483e      	ldr	r0, [pc, #248]	; (8002a24 <MX_TIM8_Init+0x180>)
 800292c:	f004 fe16 	bl	800755c <HAL_TIM_ConfigClockSource>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002936:	f7ff f931 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800293a:	483a      	ldr	r0, [pc, #232]	; (8002a24 <MX_TIM8_Init+0x180>)
 800293c:	f004 f8fc 	bl	8006b38 <HAL_TIM_PWM_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002946:	f7ff f929 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002956:	4619      	mov	r1, r3
 8002958:	4832      	ldr	r0, [pc, #200]	; (8002a24 <MX_TIM8_Init+0x180>)
 800295a:	f005 f9c1 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002964:	f7ff f91a 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002968:	2360      	movs	r3, #96	; 0x60
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002988:	2200      	movs	r2, #0
 800298a:	4619      	mov	r1, r3
 800298c:	4825      	ldr	r0, [pc, #148]	; (8002a24 <MX_TIM8_Init+0x180>)
 800298e:	f004 fd23 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002998:	f7ff f900 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	2204      	movs	r2, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	481f      	ldr	r0, [pc, #124]	; (8002a24 <MX_TIM8_Init+0x180>)
 80029a6:	f004 fd17 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80029b0:	f7ff f8f4 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	2208      	movs	r2, #8
 80029ba:	4619      	mov	r1, r3
 80029bc:	4819      	ldr	r0, [pc, #100]	; (8002a24 <MX_TIM8_Init+0x180>)
 80029be:	f004 fd0b 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80029c8:	f7ff f8e8 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d0:	220c      	movs	r2, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	4813      	ldr	r0, [pc, #76]	; (8002a24 <MX_TIM8_Init+0x180>)
 80029d6:	f004 fcff 	bl	80073d8 <HAL_TIM_PWM_ConfigChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80029e0:	f7ff f8dc 	bl	8001b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <MX_TIM8_Init+0x180>)
 8002a08:	f005 f9d6 	bl	8007db8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002a12:	f7ff f8c3 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <MX_TIM8_Init+0x180>)
 8002a18:	f000 f884 	bl	8002b24 <HAL_TIM_MspPostInit>

}
 8002a1c:	bf00      	nop
 8002a1e:	3758      	adds	r7, #88	; 0x58
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000464 	.word	0x20000464
 8002a28:	40013400 	.word	0x40013400

08002a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d114      	bne.n	8002a68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	61d3      	str	r3, [r2, #28]
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2101      	movs	r1, #1
 8002a5a:	201c      	movs	r0, #28
 8002a5c:	f000 ffc9 	bl	80039f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a60:	201c      	movs	r0, #28
 8002a62:	f000 ffe2 	bl	8003a2a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002a66:	e04e      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d114      	bne.n	8002a9c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a72:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	61d3      	str	r3, [r2, #28]
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	201d      	movs	r0, #29
 8002a90:	f000 ffaf 	bl	80039f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a94:	201d      	movs	r0, #29
 8002a96:	f000 ffc8 	bl	8003a2a <HAL_NVIC_EnableIRQ>
}
 8002a9a:	e034      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	61d3      	str	r3, [r2, #28]
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]
}
 8002abe:	e022      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM5)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <HAL_TIM_Base_MspInit+0xf0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002ad0:	f043 0308 	orr.w	r3, r3, #8
 8002ad4:	61d3      	str	r3, [r2, #28]
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
}
 8002ae2:	e010      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM8)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <HAL_TIM_Base_MspInit+0xf4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10b      	bne.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af8:	6193      	str	r3, [r2, #24]
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40000800 	.word	0x40000800
 8002b1c:	40000c00 	.word	0x40000c00
 8002b20:	40013400 	.word	0x40013400

08002b24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	; 0x30
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <HAL_TIM_MspPostInit+0x134>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d12a      	bne.n	8002b9a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b44:	4b45      	ldr	r3, [pc, #276]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	4a44      	ldr	r2, [pc, #272]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002b4a:	f043 0308 	orr.w	r3, r3, #8
 8002b4e:	6193      	str	r3, [r2, #24]
 8002b50:	4b42      	ldr	r3, [pc, #264]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2302      	movs	r3, #2
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	483c      	ldr	r0, [pc, #240]	; (8002c60 <HAL_TIM_MspPostInit+0x13c>)
 8002b70:	f001 fbfa 	bl	8004368 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_TIM_MspPostInit+0x140>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_TIM_MspPostInit+0x140>)
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b98:	e05a      	b.n	8002c50 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a32      	ldr	r2, [pc, #200]	; (8002c68 <HAL_TIM_MspPostInit+0x144>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d119      	bne.n	8002bd8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8002bbc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4823      	ldr	r0, [pc, #140]	; (8002c60 <HAL_TIM_MspPostInit+0x13c>)
 8002bd2:	f001 fbc9 	bl	8004368 <HAL_GPIO_Init>
}
 8002bd6:	e03b      	b.n	8002c50 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <HAL_TIM_MspPostInit+0x148>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d118      	bne.n	8002c14 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6193      	str	r3, [r2, #24]
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2302      	movs	r3, #2
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4818      	ldr	r0, [pc, #96]	; (8002c70 <HAL_TIM_MspPostInit+0x14c>)
 8002c0e:	f001 fbab 	bl	8004368 <HAL_GPIO_Init>
}
 8002c12:	e01d      	b.n	8002c50 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_TIM_MspPostInit+0x150>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d118      	bne.n	8002c50 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002c24:	f043 0310 	orr.w	r3, r3, #16
 8002c28:	6193      	str	r3, [r2, #24]
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_TIM_MspPostInit+0x138>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M2_PWM_Pin|M1_PWM_Pin;
 8002c36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480b      	ldr	r0, [pc, #44]	; (8002c78 <HAL_TIM_MspPostInit+0x154>)
 8002c4c:	f001 fb8c 	bl	8004368 <HAL_GPIO_Init>
}
 8002c50:	bf00      	nop
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40010c00 	.word	0x40010c00
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000800 	.word	0x40000800
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40010800 	.word	0x40010800
 8002c74:	40013400 	.word	0x40013400
 8002c78:	40011000 	.word	0x40011000

08002c7c <buzzer_start_freq>:
 *      Author: phamv
 */

#include "tone.h"

void buzzer_start_freq(uint32_t frequency){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	if(frequency == 0) return;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d030      	beq.n	8002cec <buzzer_start_freq+0x70>
	uint32_t timer_clock = 72000000;  // Example for APB1 timer
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <buzzer_start_freq+0x78>)
 8002c8c:	60fb      	str	r3, [r7, #12]
	uint32_t prescaler = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
	uint32_t period = (timer_clock / frequency) - 1;
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	613b      	str	r3, [r7, #16]

	// Adjust prescaler if period is too large for 16-bit timer
	while (period > 65535) {
 8002c9e:	e00c      	b.n	8002cba <buzzer_start_freq+0x3e>
		prescaler++;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
		period = (timer_clock / (prescaler + 1) / frequency) - 1;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	613b      	str	r3, [r7, #16]
	while (period > 65535) {
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d2ee      	bcs.n	8002ca0 <buzzer_start_freq+0x24>
	}

	__HAL_TIM_SET_PRESCALER(&htim5, prescaler);
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <buzzer_start_freq+0x7c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim5, period);
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <buzzer_start_freq+0x7c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <buzzer_start_freq+0x7c>)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,period/2);
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <buzzer_start_freq+0x7c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	0852      	lsrs	r2, r2, #1
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); // Re-start PWM to apply changes
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <buzzer_start_freq+0x7c>)
 8002ce6:	f003 ff7f 	bl	8006be8 <HAL_TIM_PWM_Start>
 8002cea:	e000      	b.n	8002cee <buzzer_start_freq+0x72>
	if(frequency == 0) return;
 8002cec:	bf00      	nop
}
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	044aa200 	.word	0x044aa200
 8002cf8:	2000041c 	.word	0x2000041c

08002cfc <buzzer_stop>:

void buzzer_stop(){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8002d00:	2100      	movs	r1, #0
 8002d02:	4802      	ldr	r0, [pc, #8]	; (8002d0c <buzzer_stop+0x10>)
 8002d04:	f004 f82a 	bl	8006d5c <HAL_TIM_PWM_Stop>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	2000041c 	.word	0x2000041c

08002d10 <tone_play>:

//blocking function
void tone_play(int* note, int* dur, int len){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e014      	b.n	8002d4c <tone_play+0x3c>
		buzzer_start_freq(note[i]);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffa5 	bl	8002c7c <buzzer_start_freq>
		HAL_Delay(dur[i]);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	4413      	add	r3, r2
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f97f 	bl	8003040 <HAL_Delay>
		buzzer_stop();
 8002d42:	f7ff ffdb 	bl	8002cfc <buzzer_stop>
	for(int i = 0; i < len; i++){
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbe6      	blt.n	8002d22 <tone_play+0x12>
	}
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <MX_USART1_UART_Init+0x50>)
 8002d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d86:	220c      	movs	r2, #12
 8002d88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d96:	4805      	ldr	r0, [pc, #20]	; (8002dac <MX_USART1_UART_Init+0x4c>)
 8002d98:	f005 f871 	bl	8007e7e <HAL_UART_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002da2:	f7fe fefb 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200004ac 	.word	0x200004ac
 8002db0:	40013800 	.word	0x40013800

08002db4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <MX_USART2_UART_Init+0x50>)
 8002dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dda:	220c      	movs	r2, #12
 8002ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <MX_USART2_UART_Init+0x4c>)
 8002dec:	f005 f847 	bl	8007e7e <HAL_UART_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002df6:	f7fe fed1 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200004f4 	.word	0x200004f4
 8002e04:	40004400 	.word	0x40004400

08002e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 0318 	add.w	r3, r7, #24
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a3f      	ldr	r2, [pc, #252]	; (8002f20 <HAL_UART_MspInit+0x118>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d13a      	bne.n	8002e9e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e40:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	4a37      	ldr	r2, [pc, #220]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6193      	str	r3, [r2, #24]
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0318 	add.w	r3, r7, #24
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	482e      	ldr	r0, [pc, #184]	; (8002f28 <HAL_UART_MspInit+0x120>)
 8002e6e:	f001 fa7b 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e80:	f107 0318 	add.w	r3, r7, #24
 8002e84:	4619      	mov	r1, r3
 8002e86:	4828      	ldr	r0, [pc, #160]	; (8002f28 <HAL_UART_MspInit+0x120>)
 8002e88:	f001 fa6e 	bl	8004368 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2025      	movs	r0, #37	; 0x25
 8002e92:	f000 fdae 	bl	80039f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e96:	2025      	movs	r0, #37	; 0x25
 8002e98:	f000 fdc7 	bl	8003a2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e9c:	e03c      	b.n	8002f18 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_UART_MspInit+0x124>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d137      	bne.n	8002f18 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb2:	61d3      	str	r3, [r2, #28]
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_UART_MspInit+0x11c>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480f      	ldr	r0, [pc, #60]	; (8002f28 <HAL_UART_MspInit+0x120>)
 8002eec:	f001 fa3c 	bl	8004368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	f107 0318 	add.w	r3, r7, #24
 8002f00:	4619      	mov	r1, r3
 8002f02:	4809      	ldr	r0, [pc, #36]	; (8002f28 <HAL_UART_MspInit+0x120>)
 8002f04:	f001 fa30 	bl	8004368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	2026      	movs	r0, #38	; 0x26
 8002f0e:	f000 fd70 	bl	80039f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f12:	2026      	movs	r0, #38	; 0x26
 8002f14:	f000 fd89 	bl	8003a2a <HAL_NVIC_EnableIRQ>
}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40013800 	.word	0x40013800
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	40004400 	.word	0x40004400

08002f30 <Reset_Handler>:
 8002f30:	f7ff faec 	bl	800250c <SystemInit>
 8002f34:	480b      	ldr	r0, [pc, #44]	; (8002f64 <LoopFillZerobss+0xe>)
 8002f36:	490c      	ldr	r1, [pc, #48]	; (8002f68 <LoopFillZerobss+0x12>)
 8002f38:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <LoopFillZerobss+0x16>)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:
 8002f3e:	58d4      	ldr	r4, [r2, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:
 8002f44:	18c4      	adds	r4, r0, r3
 8002f46:	428c      	cmp	r4, r1
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <LoopFillZerobss+0x1a>)
 8002f4c:	4c09      	ldr	r4, [pc, #36]	; (8002f74 <LoopFillZerobss+0x1e>)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:
 8002f56:	42a2      	cmp	r2, r4
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>
 8002f5a:	f005 fcd1 	bl	8008900 <__libc_init_array>
 8002f5e:	f7fe fcf7 	bl	8001950 <main>
 8002f62:	4770      	bx	lr
 8002f64:	20000000 	.word	0x20000000
 8002f68:	200000b0 	.word	0x200000b0
 8002f6c:	08009168 	.word	0x08009168
 8002f70:	200000b0 	.word	0x200000b0
 8002f74:	20000678 	.word	0x20000678

08002f78 <ADC1_2_IRQHandler>:
 8002f78:	e7fe      	b.n	8002f78 <ADC1_2_IRQHandler>
	...

08002f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_Init+0x28>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <HAL_Init+0x28>)
 8002f86:	f043 0310 	orr.w	r3, r3, #16
 8002f8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f000 fd25 	bl	80039dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f92:	200f      	movs	r0, #15
 8002f94:	f000 f808 	bl	8002fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f98:	f7ff fa2c 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_InitTick+0x54>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_InitTick+0x58>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fd3d 	bl	8003a46 <HAL_SYSTICK_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00e      	b.n	8002ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d80a      	bhi.n	8002ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f000 fd05 	bl	80039f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe8:	4a06      	ldr	r2, [pc, #24]	; (8003004 <HAL_InitTick+0x5c>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000040 	.word	0x20000040
 8003000:	20000048 	.word	0x20000048
 8003004:	20000044 	.word	0x20000044

08003008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_IncTick+0x1c>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_IncTick+0x20>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4413      	add	r3, r2
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <HAL_IncTick+0x20>)
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	20000048 	.word	0x20000048
 8003028:	2000053c 	.word	0x2000053c

0800302c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return uwTick;
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <HAL_GetTick+0x10>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	2000053c 	.word	0x2000053c

08003040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff fff0 	bl	800302c <HAL_GetTick>
 800304c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d005      	beq.n	8003066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_Delay+0x44>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003066:	bf00      	nop
 8003068:	f7ff ffe0 	bl	800302c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	429a      	cmp	r2, r3
 8003076:	d8f7      	bhi.n	8003068 <HAL_Delay+0x28>
  {
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000048 	.word	0x20000048

08003088 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0ce      	b.n	8003248 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd fde4 	bl	8000c94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fb11 	bl	80036f4 <ADC_ConversionStop_Disable>
 80030d2:	4603      	mov	r3, r0
 80030d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 80a9 	bne.w	8003236 <HAL_ADC_Init+0x1ae>
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 80a5 	bne.w	8003236 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030f4:	f023 0302 	bic.w	r3, r3, #2
 80030f8:	f043 0202 	orr.w	r2, r3, #2
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4951      	ldr	r1, [pc, #324]	; (8003250 <HAL_ADC_Init+0x1c8>)
 800310a:	428b      	cmp	r3, r1
 800310c:	d10a      	bne.n	8003124 <HAL_ADC_Init+0x9c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003116:	d002      	beq.n	800311e <HAL_ADC_Init+0x96>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	e004      	b.n	8003128 <HAL_ADC_Init+0xa0>
 800311e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003122:	e001      	b.n	8003128 <HAL_ADC_Init+0xa0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003128:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7b1b      	ldrb	r3, [r3, #12]
 800312e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003130:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4313      	orrs	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003140:	d003      	beq.n	800314a <HAL_ADC_Init+0xc2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_ADC_Init+0xc8>
 800314a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800314e:	e000      	b.n	8003152 <HAL_ADC_Init+0xca>
 8003150:	2300      	movs	r3, #0
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7d1b      	ldrb	r3, [r3, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d119      	bne.n	8003194 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7b1b      	ldrb	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	3b01      	subs	r3, #1
 800316e:	035a      	lsls	r2, r3, #13
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	e00b      	b.n	8003194 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_ADC_Init+0x1cc>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d003      	beq.n	80031ce <HAL_ADC_Init+0x146>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d104      	bne.n	80031d8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	051b      	lsls	r3, r3, #20
 80031d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_ADC_Init+0x1d0>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d10b      	bne.n	8003214 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003212:	e018      	b.n	8003246 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f023 0312 	bic.w	r3, r3, #18
 800321c:	f043 0210 	orr.w	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003234:	e007      	b.n	8003246 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40013c00 	.word	0x40013c00
 8003254:	ffe1f7fd 	.word	0xffe1f7fd
 8003258:	ff1f0efe 	.word	0xff1f0efe

0800325c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a64      	ldr	r2, [pc, #400]	; (8003404 <HAL_ADC_Start_DMA+0x1a8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_ADC_Start_DMA+0x24>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a63      	ldr	r2, [pc, #396]	; (8003408 <HAL_ADC_Start_DMA+0x1ac>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d106      	bne.n	800328e <HAL_ADC_Start_DMA+0x32>
 8003280:	4b60      	ldr	r3, [pc, #384]	; (8003404 <HAL_ADC_Start_DMA+0x1a8>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 80b3 	bne.w	80033f4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_ADC_Start_DMA+0x40>
 8003298:	2302      	movs	r3, #2
 800329a:	e0ae      	b.n	80033fa <HAL_ADC_Start_DMA+0x19e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f9cb 	bl	8003640 <ADC_Enable>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 809a 	bne.w	80033ea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a4e      	ldr	r2, [pc, #312]	; (8003408 <HAL_ADC_Start_DMA+0x1ac>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_Start_DMA+0x84>
 80032d4:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_ADC_Start_DMA+0x1a8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d115      	bne.n	800330c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d026      	beq.n	8003348 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003302:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800330a:	e01d      	b.n	8003348 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a39      	ldr	r2, [pc, #228]	; (8003404 <HAL_ADC_Start_DMA+0x1a8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_ADC_Start_DMA+0xd0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a38      	ldr	r2, [pc, #224]	; (8003408 <HAL_ADC_Start_DMA+0x1ac>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10d      	bne.n	8003348 <HAL_ADC_Start_DMA+0xec>
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_ADC_Start_DMA+0x1a8>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003340:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f023 0206 	bic.w	r2, r3, #6
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003360:	e002      	b.n	8003368 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4a25      	ldr	r2, [pc, #148]	; (800340c <HAL_ADC_Start_DMA+0x1b0>)
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_ADC_Start_DMA+0x1b4>)
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_ADC_Start_DMA+0x1b8>)
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0202 	mvn.w	r2, #2
 8003390:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a18      	ldr	r0, [r3, #32]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	334c      	adds	r3, #76	; 0x4c
 80033ac:	4619      	mov	r1, r3
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f000 fbcb 	bl	8003b4c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033c4:	d108      	bne.n	80033d8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80033d4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80033d6:	e00f      	b.n	80033f8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033e6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80033e8:	e006      	b.n	80033f8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80033f2:	e001      	b.n	80033f8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40012400 	.word	0x40012400
 8003408:	40012800 	.word	0x40012800
 800340c:	08003777 	.word	0x08003777
 8003410:	080037f3 	.word	0x080037f3
 8003414:	0800380f 	.word	0x0800380f

08003418 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
	...

08003450 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x20>
 800346c:	2302      	movs	r3, #2
 800346e:	e0dc      	b.n	800362a <HAL_ADC_ConfigChannel+0x1da>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b06      	cmp	r3, #6
 800347e:	d81c      	bhi.n	80034ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	3b05      	subs	r3, #5
 8003492:	221f      	movs	r2, #31
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	4019      	ands	r1, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	3b05      	subs	r3, #5
 80034ac:	fa00 f203 	lsl.w	r2, r0, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	635a      	str	r2, [r3, #52]	; 0x34
 80034b8:	e03c      	b.n	8003534 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d81c      	bhi.n	80034fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b23      	subs	r3, #35	; 0x23
 80034d4:	221f      	movs	r2, #31
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	4019      	ands	r1, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b23      	subs	r3, #35	; 0x23
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
 80034fa:	e01b      	b.n	8003534 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	3b41      	subs	r3, #65	; 0x41
 800350e:	221f      	movs	r2, #31
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	4019      	ands	r1, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	3b41      	subs	r3, #65	; 0x41
 8003528:	fa00 f203 	lsl.w	r2, r0, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b09      	cmp	r3, #9
 800353a:	d91c      	bls.n	8003576 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68d9      	ldr	r1, [r3, #12]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	3b1e      	subs	r3, #30
 800354e:	2207      	movs	r2, #7
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	4019      	ands	r1, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6898      	ldr	r0, [r3, #8]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	3b1e      	subs	r3, #30
 8003568:	fa00 f203 	lsl.w	r2, r0, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	e019      	b.n	80035aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6919      	ldr	r1, [r3, #16]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	2207      	movs	r2, #7
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	4019      	ands	r1, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6898      	ldr	r0, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	fa00 f203 	lsl.w	r2, r0, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d003      	beq.n	80035ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035b6:	2b11      	cmp	r3, #17
 80035b8:	d132      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_ADC_ConfigChannel+0x1e4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d125      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d126      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d11a      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <HAL_ADC_ConfigChannel+0x1e8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a13      	ldr	r2, [pc, #76]	; (800363c <HAL_ADC_ConfigChannel+0x1ec>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	0c9a      	lsrs	r2, r3, #18
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003600:	e002      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3b01      	subs	r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f9      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x1b2>
 800360e:	e007      	b.n	8003620 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012400 	.word	0x40012400
 8003638:	20000040 	.word	0x20000040
 800363c:	431bde83 	.word	0x431bde83

08003640 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d040      	beq.n	80036e0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800366e:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <ADC_Enable+0xac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <ADC_Enable+0xb0>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800367c:	e002      	b.n	8003684 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3b01      	subs	r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f9      	bne.n	800367e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800368a:	f7ff fccf 	bl	800302c <HAL_GetTick>
 800368e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003690:	e01f      	b.n	80036d2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003692:	f7ff fccb 	bl	800302c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d918      	bls.n	80036d2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d011      	beq.n	80036d2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	f043 0210 	orr.w	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e007      	b.n	80036e2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d1d8      	bne.n	8003692 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000040 	.word	0x20000040
 80036f0:	431bde83 	.word	0x431bde83

080036f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d12e      	bne.n	800376c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800371e:	f7ff fc85 	bl	800302c <HAL_GetTick>
 8003722:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003724:	e01b      	b.n	800375e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003726:	f7ff fc81 	bl	800302c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d914      	bls.n	800375e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10d      	bne.n	800375e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e007      	b.n	800376e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d0dc      	beq.n	8003726 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800378c:	2b00      	cmp	r3, #0
 800378e:	d127      	bne.n	80037e0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037aa:	d115      	bne.n	80037d8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	f043 0201 	orr.w	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fe1d 	bl	8003418 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80037de:	e004      	b.n	80037ea <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fe12 	bl	800342a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	f043 0204 	orr.w	r2, r3, #4
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff fe01 	bl	800343c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800386c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003876:	4a04      	ldr	r2, [pc, #16]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0307 	and.w	r3, r3, #7
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	db0b      	blt.n	80038d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4906      	ldr	r1, [pc, #24]	; (80038dc <__NVIC_EnableIRQ+0x34>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2001      	movs	r0, #1
 80038ca:	fa00 f202 	lsl.w	r2, r0, r2
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	e000e100 	.word	0xe000e100

080038e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	db0a      	blt.n	800390a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	490c      	ldr	r1, [pc, #48]	; (800392c <__NVIC_SetPriority+0x4c>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	0112      	lsls	r2, r2, #4
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	440b      	add	r3, r1
 8003904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003908:	e00a      	b.n	8003920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <__NVIC_SetPriority+0x50>)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	3b04      	subs	r3, #4
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	440b      	add	r3, r1
 800391e:	761a      	strb	r2, [r3, #24]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f1c3 0307 	rsb	r3, r3, #7
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf28      	it	cs
 8003952:	2304      	movcs	r3, #4
 8003954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3304      	adds	r3, #4
 800395a:	2b06      	cmp	r3, #6
 800395c:	d902      	bls.n	8003964 <NVIC_EncodePriority+0x30>
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3b03      	subs	r3, #3
 8003962:	e000      	b.n	8003966 <NVIC_EncodePriority+0x32>
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	401a      	ands	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800397c:	f04f 31ff 	mov.w	r1, #4294967295
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43d9      	mvns	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	4313      	orrs	r3, r2
         );
}
 800398e:	4618      	mov	r0, r3
 8003990:	3724      	adds	r7, #36	; 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a8:	d301      	bcc.n	80039ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00f      	b.n	80039ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <SysTick_Config+0x40>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b6:	210f      	movs	r1, #15
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	f7ff ff90 	bl	80038e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <SysTick_Config+0x40>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <SysTick_Config+0x40>)
 80039c8:	2207      	movs	r2, #7
 80039ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000e010 	.word	0xe000e010

080039dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff2d 	bl	8003844 <__NVIC_SetPriorityGrouping>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a04:	f7ff ff42 	bl	800388c <__NVIC_GetPriorityGrouping>
 8003a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff ff90 	bl	8003934 <NVIC_EncodePriority>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff5f 	bl	80038e0 <__NVIC_SetPriority>
}
 8003a22:	bf00      	nop
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4603      	mov	r3, r0
 8003a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff35 	bl	80038a8 <__NVIC_EnableIRQ>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ffa2 	bl	8003998 <SysTick_Config>
 8003a54:	4603      	mov	r3, r0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e059      	b.n	8003b2a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_DMA_Init+0xd4>)
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d80f      	bhi.n	8003aa2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_DMA_Init+0xd8>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <HAL_DMA_Init+0xdc>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <HAL_DMA_Init+0xe0>)
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003aa0:	e00e      	b.n	8003ac0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <HAL_DMA_Init+0xe4>)
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_DMA_Init+0xdc>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	009a      	lsls	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_DMA_Init+0xe8>)
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40020407 	.word	0x40020407
 8003b38:	bffdfff8 	.word	0xbffdfff8
 8003b3c:	cccccccd 	.word	0xcccccccd
 8003b40:	40020000 	.word	0x40020000
 8003b44:	bffdfbf8 	.word	0xbffdfbf8
 8003b48:	40020400 	.word	0x40020400

08003b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_DMA_Start_IT+0x20>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e04b      	b.n	8003c04 <HAL_DMA_Start_IT+0xb8>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d13a      	bne.n	8003bf6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fbb1 	bl	800430c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 020e 	orr.w	r2, r2, #14
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00f      	b.n	8003be4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 020a 	orr.w	r2, r2, #10
 8003be2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e005      	b.n	8003c02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d008      	beq.n	8003c36 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2204      	movs	r2, #4
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e020      	b.n	8003c78 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 020e 	bic.w	r2, r2, #14
 8003c44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f202 	lsl.w	r2, r1, r2
 8003c64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d005      	beq.n	8003ca8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
 8003ca6:	e0d6      	b.n	8003e56 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 020e 	bic.w	r2, r2, #14
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b64      	ldr	r3, [pc, #400]	; (8003e60 <HAL_DMA_Abort_IT+0x1dc>)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d958      	bls.n	8003d86 <HAL_DMA_Abort_IT+0x102>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a62      	ldr	r2, [pc, #392]	; (8003e64 <HAL_DMA_Abort_IT+0x1e0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04f      	beq.n	8003d7e <HAL_DMA_Abort_IT+0xfa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a61      	ldr	r2, [pc, #388]	; (8003e68 <HAL_DMA_Abort_IT+0x1e4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d048      	beq.n	8003d7a <HAL_DMA_Abort_IT+0xf6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5f      	ldr	r2, [pc, #380]	; (8003e6c <HAL_DMA_Abort_IT+0x1e8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d040      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xf0>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5e      	ldr	r2, [pc, #376]	; (8003e70 <HAL_DMA_Abort_IT+0x1ec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d038      	beq.n	8003d6e <HAL_DMA_Abort_IT+0xea>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a5c      	ldr	r2, [pc, #368]	; (8003e74 <HAL_DMA_Abort_IT+0x1f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d030      	beq.n	8003d68 <HAL_DMA_Abort_IT+0xe4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	; (8003e78 <HAL_DMA_Abort_IT+0x1f4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d028      	beq.n	8003d62 <HAL_DMA_Abort_IT+0xde>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a52      	ldr	r2, [pc, #328]	; (8003e60 <HAL_DMA_Abort_IT+0x1dc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d020      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xd8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a57      	ldr	r2, [pc, #348]	; (8003e7c <HAL_DMA_Abort_IT+0x1f8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d019      	beq.n	8003d58 <HAL_DMA_Abort_IT+0xd4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a55      	ldr	r2, [pc, #340]	; (8003e80 <HAL_DMA_Abort_IT+0x1fc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d012      	beq.n	8003d54 <HAL_DMA_Abort_IT+0xd0>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a54      	ldr	r2, [pc, #336]	; (8003e84 <HAL_DMA_Abort_IT+0x200>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00a      	beq.n	8003d4e <HAL_DMA_Abort_IT+0xca>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a52      	ldr	r2, [pc, #328]	; (8003e88 <HAL_DMA_Abort_IT+0x204>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d102      	bne.n	8003d48 <HAL_DMA_Abort_IT+0xc4>
 8003d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d46:	e01b      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d4c:	e018      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d52:	e015      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d54:	2310      	movs	r3, #16
 8003d56:	e013      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e011      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d60:	e00e      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d66:	e00b      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d6c:	e008      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d72:	e005      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d78:	e002      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	e000      	b.n	8003d80 <HAL_DMA_Abort_IT+0xfc>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	4a42      	ldr	r2, [pc, #264]	; (8003e8c <HAL_DMA_Abort_IT+0x208>)
 8003d82:	6053      	str	r3, [r2, #4]
 8003d84:	e057      	b.n	8003e36 <HAL_DMA_Abort_IT+0x1b2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a36      	ldr	r2, [pc, #216]	; (8003e64 <HAL_DMA_Abort_IT+0x1e0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04f      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x1ac>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a34      	ldr	r2, [pc, #208]	; (8003e68 <HAL_DMA_Abort_IT+0x1e4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d048      	beq.n	8003e2c <HAL_DMA_Abort_IT+0x1a8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <HAL_DMA_Abort_IT+0x1e8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d040      	beq.n	8003e26 <HAL_DMA_Abort_IT+0x1a2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a31      	ldr	r2, [pc, #196]	; (8003e70 <HAL_DMA_Abort_IT+0x1ec>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d038      	beq.n	8003e20 <HAL_DMA_Abort_IT+0x19c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a30      	ldr	r2, [pc, #192]	; (8003e74 <HAL_DMA_Abort_IT+0x1f0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d030      	beq.n	8003e1a <HAL_DMA_Abort_IT+0x196>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2e      	ldr	r2, [pc, #184]	; (8003e78 <HAL_DMA_Abort_IT+0x1f4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d028      	beq.n	8003e14 <HAL_DMA_Abort_IT+0x190>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <HAL_DMA_Abort_IT+0x1dc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d020      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x18a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <HAL_DMA_Abort_IT+0x1f8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d019      	beq.n	8003e0a <HAL_DMA_Abort_IT+0x186>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_DMA_Abort_IT+0x1fc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d012      	beq.n	8003e06 <HAL_DMA_Abort_IT+0x182>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <HAL_DMA_Abort_IT+0x200>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00a      	beq.n	8003e00 <HAL_DMA_Abort_IT+0x17c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a26      	ldr	r2, [pc, #152]	; (8003e88 <HAL_DMA_Abort_IT+0x204>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d102      	bne.n	8003dfa <HAL_DMA_Abort_IT+0x176>
 8003df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df8:	e01b      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dfe:	e018      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e04:	e015      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e06:	2310      	movs	r3, #16
 8003e08:	e013      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e011      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e12:	e00e      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e18:	e00b      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e1e:	e008      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e24:	e005      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e2a:	e002      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	e000      	b.n	8003e32 <HAL_DMA_Abort_IT+0x1ae>
 8003e30:	2301      	movs	r3, #1
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_DMA_Abort_IT+0x20c>)
 8003e34:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
    } 
  }
  return status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40020080 	.word	0x40020080
 8003e64:	40020008 	.word	0x40020008
 8003e68:	4002001c 	.word	0x4002001c
 8003e6c:	40020030 	.word	0x40020030
 8003e70:	40020044 	.word	0x40020044
 8003e74:	40020058 	.word	0x40020058
 8003e78:	4002006c 	.word	0x4002006c
 8003e7c:	40020408 	.word	0x40020408
 8003e80:	4002041c 	.word	0x4002041c
 8003e84:	40020430 	.word	0x40020430
 8003e88:	40020444 	.word	0x40020444
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	40020000 	.word	0x40020000

08003e94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80f1 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x20c>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80eb 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d107      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0204 	bic.w	r2, r2, #4
 8003ee6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b5f      	ldr	r3, [pc, #380]	; (800406c <HAL_DMA_IRQHandler+0x1d8>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d958      	bls.n	8003fa6 <HAL_DMA_IRQHandler+0x112>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5d      	ldr	r2, [pc, #372]	; (8004070 <HAL_DMA_IRQHandler+0x1dc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04f      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x10a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5c      	ldr	r2, [pc, #368]	; (8004074 <HAL_DMA_IRQHandler+0x1e0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d048      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x106>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5a      	ldr	r2, [pc, #360]	; (8004078 <HAL_DMA_IRQHandler+0x1e4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x100>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a59      	ldr	r2, [pc, #356]	; (800407c <HAL_DMA_IRQHandler+0x1e8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d038      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xfa>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a57      	ldr	r2, [pc, #348]	; (8004080 <HAL_DMA_IRQHandler+0x1ec>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d030      	beq.n	8003f88 <HAL_DMA_IRQHandler+0xf4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a56      	ldr	r2, [pc, #344]	; (8004084 <HAL_DMA_IRQHandler+0x1f0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d028      	beq.n	8003f82 <HAL_DMA_IRQHandler+0xee>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a4d      	ldr	r2, [pc, #308]	; (800406c <HAL_DMA_IRQHandler+0x1d8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d020      	beq.n	8003f7c <HAL_DMA_IRQHandler+0xe8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a52      	ldr	r2, [pc, #328]	; (8004088 <HAL_DMA_IRQHandler+0x1f4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d019      	beq.n	8003f78 <HAL_DMA_IRQHandler+0xe4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a50      	ldr	r2, [pc, #320]	; (800408c <HAL_DMA_IRQHandler+0x1f8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d012      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xe0>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4f      	ldr	r2, [pc, #316]	; (8004090 <HAL_DMA_IRQHandler+0x1fc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00a      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xda>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4d      	ldr	r2, [pc, #308]	; (8004094 <HAL_DMA_IRQHandler+0x200>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d102      	bne.n	8003f68 <HAL_DMA_IRQHandler+0xd4>
 8003f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f66:	e01b      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f6c:	e018      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f72:	e015      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f74:	2340      	movs	r3, #64	; 0x40
 8003f76:	e013      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	e011      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f80:	e00e      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f86:	e00b      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f8c:	e008      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f92:	e005      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f98:	e002      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f9a:	2340      	movs	r3, #64	; 0x40
 8003f9c:	e000      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x10c>
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	4a3d      	ldr	r2, [pc, #244]	; (8004098 <HAL_DMA_IRQHandler+0x204>)
 8003fa2:	6053      	str	r3, [r2, #4]
 8003fa4:	e057      	b.n	8004056 <HAL_DMA_IRQHandler+0x1c2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a31      	ldr	r2, [pc, #196]	; (8004070 <HAL_DMA_IRQHandler+0x1dc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04f      	beq.n	8004050 <HAL_DMA_IRQHandler+0x1bc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <HAL_DMA_IRQHandler+0x1e0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d048      	beq.n	800404c <HAL_DMA_IRQHandler+0x1b8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <HAL_DMA_IRQHandler+0x1e4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_IRQHandler+0x1b2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <HAL_DMA_IRQHandler+0x1e8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d038      	beq.n	8004040 <HAL_DMA_IRQHandler+0x1ac>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <HAL_DMA_IRQHandler+0x1ec>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d030      	beq.n	800403a <HAL_DMA_IRQHandler+0x1a6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a29      	ldr	r2, [pc, #164]	; (8004084 <HAL_DMA_IRQHandler+0x1f0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d028      	beq.n	8004034 <HAL_DMA_IRQHandler+0x1a0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	; (800406c <HAL_DMA_IRQHandler+0x1d8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d020      	beq.n	800402e <HAL_DMA_IRQHandler+0x19a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a25      	ldr	r2, [pc, #148]	; (8004088 <HAL_DMA_IRQHandler+0x1f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_DMA_IRQHandler+0x196>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_DMA_IRQHandler+0x1f8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d012      	beq.n	8004026 <HAL_DMA_IRQHandler+0x192>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_DMA_IRQHandler+0x1fc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00a      	beq.n	8004020 <HAL_DMA_IRQHandler+0x18c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	; (8004094 <HAL_DMA_IRQHandler+0x200>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d102      	bne.n	800401a <HAL_DMA_IRQHandler+0x186>
 8004014:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004018:	e01b      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 800401a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800401e:	e018      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 8004020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004024:	e015      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 8004026:	2340      	movs	r3, #64	; 0x40
 8004028:	e013      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 800402a:	2304      	movs	r3, #4
 800402c:	e011      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 800402e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004032:	e00e      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 8004034:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004038:	e00b      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 800403a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800403e:	e008      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 8004040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004044:	e005      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 8004046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404a:	e002      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 800404c:	2340      	movs	r3, #64	; 0x40
 800404e:	e000      	b.n	8004052 <HAL_DMA_IRQHandler+0x1be>
 8004050:	2304      	movs	r3, #4
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_DMA_IRQHandler+0x208>)
 8004054:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8136 	beq.w	80042cc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004068:	e130      	b.n	80042cc <HAL_DMA_IRQHandler+0x438>
 800406a:	bf00      	nop
 800406c:	40020080 	.word	0x40020080
 8004070:	40020008 	.word	0x40020008
 8004074:	4002001c 	.word	0x4002001c
 8004078:	40020030 	.word	0x40020030
 800407c:	40020044 	.word	0x40020044
 8004080:	40020058 	.word	0x40020058
 8004084:	4002006c 	.word	0x4002006c
 8004088:	40020408 	.word	0x40020408
 800408c:	4002041c 	.word	0x4002041c
 8004090:	40020430 	.word	0x40020430
 8004094:	40020444 	.word	0x40020444
 8004098:	40020400 	.word	0x40020400
 800409c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2202      	movs	r2, #2
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80dd 	beq.w	800426c <HAL_DMA_IRQHandler+0x3d8>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80d7 	beq.w	800426c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 020a 	bic.w	r2, r2, #10
 80040da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b7b      	ldr	r3, [pc, #492]	; (80042d8 <HAL_DMA_IRQHandler+0x444>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d958      	bls.n	80041a2 <HAL_DMA_IRQHandler+0x30e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a79      	ldr	r2, [pc, #484]	; (80042dc <HAL_DMA_IRQHandler+0x448>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d04f      	beq.n	800419a <HAL_DMA_IRQHandler+0x306>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a78      	ldr	r2, [pc, #480]	; (80042e0 <HAL_DMA_IRQHandler+0x44c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d048      	beq.n	8004196 <HAL_DMA_IRQHandler+0x302>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a76      	ldr	r2, [pc, #472]	; (80042e4 <HAL_DMA_IRQHandler+0x450>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d040      	beq.n	8004190 <HAL_DMA_IRQHandler+0x2fc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a75      	ldr	r2, [pc, #468]	; (80042e8 <HAL_DMA_IRQHandler+0x454>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d038      	beq.n	800418a <HAL_DMA_IRQHandler+0x2f6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a73      	ldr	r2, [pc, #460]	; (80042ec <HAL_DMA_IRQHandler+0x458>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d030      	beq.n	8004184 <HAL_DMA_IRQHandler+0x2f0>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <HAL_DMA_IRQHandler+0x45c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d028      	beq.n	800417e <HAL_DMA_IRQHandler+0x2ea>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a69      	ldr	r2, [pc, #420]	; (80042d8 <HAL_DMA_IRQHandler+0x444>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d020      	beq.n	8004178 <HAL_DMA_IRQHandler+0x2e4>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6e      	ldr	r2, [pc, #440]	; (80042f4 <HAL_DMA_IRQHandler+0x460>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d019      	beq.n	8004174 <HAL_DMA_IRQHandler+0x2e0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6c      	ldr	r2, [pc, #432]	; (80042f8 <HAL_DMA_IRQHandler+0x464>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d012      	beq.n	8004170 <HAL_DMA_IRQHandler+0x2dc>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6b      	ldr	r2, [pc, #428]	; (80042fc <HAL_DMA_IRQHandler+0x468>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00a      	beq.n	800416a <HAL_DMA_IRQHandler+0x2d6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a69      	ldr	r2, [pc, #420]	; (8004300 <HAL_DMA_IRQHandler+0x46c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d102      	bne.n	8004164 <HAL_DMA_IRQHandler+0x2d0>
 800415e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004162:	e01b      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 8004164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004168:	e018      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 800416a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800416e:	e015      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 8004170:	2320      	movs	r3, #32
 8004172:	e013      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 8004174:	2302      	movs	r3, #2
 8004176:	e011      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 8004178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800417c:	e00e      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 800417e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004182:	e00b      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 8004184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004188:	e008      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 800418a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800418e:	e005      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 8004190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004194:	e002      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 8004196:	2320      	movs	r3, #32
 8004198:	e000      	b.n	800419c <HAL_DMA_IRQHandler+0x308>
 800419a:	2302      	movs	r3, #2
 800419c:	4a59      	ldr	r2, [pc, #356]	; (8004304 <HAL_DMA_IRQHandler+0x470>)
 800419e:	6053      	str	r3, [r2, #4]
 80041a0:	e057      	b.n	8004252 <HAL_DMA_IRQHandler+0x3be>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a4d      	ldr	r2, [pc, #308]	; (80042dc <HAL_DMA_IRQHandler+0x448>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d04f      	beq.n	800424c <HAL_DMA_IRQHandler+0x3b8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a4b      	ldr	r2, [pc, #300]	; (80042e0 <HAL_DMA_IRQHandler+0x44c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d048      	beq.n	8004248 <HAL_DMA_IRQHandler+0x3b4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a4a      	ldr	r2, [pc, #296]	; (80042e4 <HAL_DMA_IRQHandler+0x450>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d040      	beq.n	8004242 <HAL_DMA_IRQHandler+0x3ae>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a48      	ldr	r2, [pc, #288]	; (80042e8 <HAL_DMA_IRQHandler+0x454>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d038      	beq.n	800423c <HAL_DMA_IRQHandler+0x3a8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a47      	ldr	r2, [pc, #284]	; (80042ec <HAL_DMA_IRQHandler+0x458>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d030      	beq.n	8004236 <HAL_DMA_IRQHandler+0x3a2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a45      	ldr	r2, [pc, #276]	; (80042f0 <HAL_DMA_IRQHandler+0x45c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d028      	beq.n	8004230 <HAL_DMA_IRQHandler+0x39c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <HAL_DMA_IRQHandler+0x444>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d020      	beq.n	800422a <HAL_DMA_IRQHandler+0x396>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a41      	ldr	r2, [pc, #260]	; (80042f4 <HAL_DMA_IRQHandler+0x460>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d019      	beq.n	8004226 <HAL_DMA_IRQHandler+0x392>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a40      	ldr	r2, [pc, #256]	; (80042f8 <HAL_DMA_IRQHandler+0x464>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d012      	beq.n	8004222 <HAL_DMA_IRQHandler+0x38e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3e      	ldr	r2, [pc, #248]	; (80042fc <HAL_DMA_IRQHandler+0x468>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00a      	beq.n	800421c <HAL_DMA_IRQHandler+0x388>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <HAL_DMA_IRQHandler+0x46c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d102      	bne.n	8004216 <HAL_DMA_IRQHandler+0x382>
 8004210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004214:	e01b      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 8004216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421a:	e018      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 800421c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004220:	e015      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 8004222:	2320      	movs	r3, #32
 8004224:	e013      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 8004226:	2302      	movs	r3, #2
 8004228:	e011      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 800422a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800422e:	e00e      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 8004230:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004234:	e00b      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 8004236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800423a:	e008      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 800423c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004240:	e005      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 8004242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004246:	e002      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 8004248:	2320      	movs	r3, #32
 800424a:	e000      	b.n	800424e <HAL_DMA_IRQHandler+0x3ba>
 800424c:	2302      	movs	r3, #2
 800424e:	4a2e      	ldr	r2, [pc, #184]	; (8004308 <HAL_DMA_IRQHandler+0x474>)
 8004250:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d034      	beq.n	80042cc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800426a:	e02f      	b.n	80042cc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	2208      	movs	r2, #8
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d028      	beq.n	80042ce <HAL_DMA_IRQHandler+0x43a>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d023      	beq.n	80042ce <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 020e 	bic.w	r2, r2, #14
 8004294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
    }
  }
  return;
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
}
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40020080 	.word	0x40020080
 80042dc:	40020008 	.word	0x40020008
 80042e0:	4002001c 	.word	0x4002001c
 80042e4:	40020030 	.word	0x40020030
 80042e8:	40020044 	.word	0x40020044
 80042ec:	40020058 	.word	0x40020058
 80042f0:	4002006c 	.word	0x4002006c
 80042f4:	40020408 	.word	0x40020408
 80042f8:	4002041c 	.word	0x4002041c
 80042fc:	40020430 	.word	0x40020430
 8004300:	40020444 	.word	0x40020444
 8004304:	40020400 	.word	0x40020400
 8004308:	40020000 	.word	0x40020000

0800430c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f202 	lsl.w	r2, r1, r2
 8004328:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b10      	cmp	r3, #16
 8004338:	d108      	bne.n	800434c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800434a:	e007      	b.n	800435c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
	...

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	b480      	push	{r7}
 800436a:	b08b      	sub	sp, #44	; 0x2c
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800437a:	e179      	b.n	8004670 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800437c:	2201      	movs	r2, #1
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	429a      	cmp	r2, r3
 8004396:	f040 8168 	bne.w	800466a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4a96      	ldr	r2, [pc, #600]	; (80045f8 <HAL_GPIO_Init+0x290>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d05e      	beq.n	8004462 <HAL_GPIO_Init+0xfa>
 80043a4:	4a94      	ldr	r2, [pc, #592]	; (80045f8 <HAL_GPIO_Init+0x290>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d875      	bhi.n	8004496 <HAL_GPIO_Init+0x12e>
 80043aa:	4a94      	ldr	r2, [pc, #592]	; (80045fc <HAL_GPIO_Init+0x294>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d058      	beq.n	8004462 <HAL_GPIO_Init+0xfa>
 80043b0:	4a92      	ldr	r2, [pc, #584]	; (80045fc <HAL_GPIO_Init+0x294>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d86f      	bhi.n	8004496 <HAL_GPIO_Init+0x12e>
 80043b6:	4a92      	ldr	r2, [pc, #584]	; (8004600 <HAL_GPIO_Init+0x298>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d052      	beq.n	8004462 <HAL_GPIO_Init+0xfa>
 80043bc:	4a90      	ldr	r2, [pc, #576]	; (8004600 <HAL_GPIO_Init+0x298>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d869      	bhi.n	8004496 <HAL_GPIO_Init+0x12e>
 80043c2:	4a90      	ldr	r2, [pc, #576]	; (8004604 <HAL_GPIO_Init+0x29c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d04c      	beq.n	8004462 <HAL_GPIO_Init+0xfa>
 80043c8:	4a8e      	ldr	r2, [pc, #568]	; (8004604 <HAL_GPIO_Init+0x29c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d863      	bhi.n	8004496 <HAL_GPIO_Init+0x12e>
 80043ce:	4a8e      	ldr	r2, [pc, #568]	; (8004608 <HAL_GPIO_Init+0x2a0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d046      	beq.n	8004462 <HAL_GPIO_Init+0xfa>
 80043d4:	4a8c      	ldr	r2, [pc, #560]	; (8004608 <HAL_GPIO_Init+0x2a0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d85d      	bhi.n	8004496 <HAL_GPIO_Init+0x12e>
 80043da:	2b12      	cmp	r3, #18
 80043dc:	d82a      	bhi.n	8004434 <HAL_GPIO_Init+0xcc>
 80043de:	2b12      	cmp	r3, #18
 80043e0:	d859      	bhi.n	8004496 <HAL_GPIO_Init+0x12e>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_GPIO_Init+0x80>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004463 	.word	0x08004463
 80043ec:	0800443d 	.word	0x0800443d
 80043f0:	0800444f 	.word	0x0800444f
 80043f4:	08004491 	.word	0x08004491
 80043f8:	08004497 	.word	0x08004497
 80043fc:	08004497 	.word	0x08004497
 8004400:	08004497 	.word	0x08004497
 8004404:	08004497 	.word	0x08004497
 8004408:	08004497 	.word	0x08004497
 800440c:	08004497 	.word	0x08004497
 8004410:	08004497 	.word	0x08004497
 8004414:	08004497 	.word	0x08004497
 8004418:	08004497 	.word	0x08004497
 800441c:	08004497 	.word	0x08004497
 8004420:	08004497 	.word	0x08004497
 8004424:	08004497 	.word	0x08004497
 8004428:	08004497 	.word	0x08004497
 800442c:	08004445 	.word	0x08004445
 8004430:	08004459 	.word	0x08004459
 8004434:	4a75      	ldr	r2, [pc, #468]	; (800460c <HAL_GPIO_Init+0x2a4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800443a:	e02c      	b.n	8004496 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	623b      	str	r3, [r7, #32]
          break;
 8004442:	e029      	b.n	8004498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	3304      	adds	r3, #4
 800444a:	623b      	str	r3, [r7, #32]
          break;
 800444c:	e024      	b.n	8004498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	3308      	adds	r3, #8
 8004454:	623b      	str	r3, [r7, #32]
          break;
 8004456:	e01f      	b.n	8004498 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	330c      	adds	r3, #12
 800445e:	623b      	str	r3, [r7, #32]
          break;
 8004460:	e01a      	b.n	8004498 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800446a:	2304      	movs	r3, #4
 800446c:	623b      	str	r3, [r7, #32]
          break;
 800446e:	e013      	b.n	8004498 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004478:	2308      	movs	r3, #8
 800447a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	611a      	str	r2, [r3, #16]
          break;
 8004482:	e009      	b.n	8004498 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004484:	2308      	movs	r3, #8
 8004486:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	615a      	str	r2, [r3, #20]
          break;
 800448e:	e003      	b.n	8004498 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004490:	2300      	movs	r3, #0
 8004492:	623b      	str	r3, [r7, #32]
          break;
 8004494:	e000      	b.n	8004498 <HAL_GPIO_Init+0x130>
          break;
 8004496:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2bff      	cmp	r3, #255	; 0xff
 800449c:	d801      	bhi.n	80044a2 <HAL_GPIO_Init+0x13a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	e001      	b.n	80044a6 <HAL_GPIO_Init+0x13e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2bff      	cmp	r3, #255	; 0xff
 80044ac:	d802      	bhi.n	80044b4 <HAL_GPIO_Init+0x14c>
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	e002      	b.n	80044ba <HAL_GPIO_Init+0x152>
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	3b08      	subs	r3, #8
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	210f      	movs	r1, #15
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	401a      	ands	r2, r3
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	431a      	orrs	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80c1 	beq.w	800466a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044e8:	4b49      	ldr	r3, [pc, #292]	; (8004610 <HAL_GPIO_Init+0x2a8>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	4a48      	ldr	r2, [pc, #288]	; (8004610 <HAL_GPIO_Init+0x2a8>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6193      	str	r3, [r2, #24]
 80044f4:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_GPIO_Init+0x2a8>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004500:	4a44      	ldr	r2, [pc, #272]	; (8004614 <HAL_GPIO_Init+0x2ac>)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3302      	adds	r3, #2
 8004508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a3c      	ldr	r2, [pc, #240]	; (8004618 <HAL_GPIO_Init+0x2b0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d01f      	beq.n	800456c <HAL_GPIO_Init+0x204>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3b      	ldr	r2, [pc, #236]	; (800461c <HAL_GPIO_Init+0x2b4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d019      	beq.n	8004568 <HAL_GPIO_Init+0x200>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <HAL_GPIO_Init+0x2b8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <HAL_GPIO_Init+0x1fc>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a39      	ldr	r2, [pc, #228]	; (8004624 <HAL_GPIO_Init+0x2bc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00d      	beq.n	8004560 <HAL_GPIO_Init+0x1f8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a38      	ldr	r2, [pc, #224]	; (8004628 <HAL_GPIO_Init+0x2c0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <HAL_GPIO_Init+0x1f4>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a37      	ldr	r2, [pc, #220]	; (800462c <HAL_GPIO_Init+0x2c4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <HAL_GPIO_Init+0x1f0>
 8004554:	2305      	movs	r3, #5
 8004556:	e00a      	b.n	800456e <HAL_GPIO_Init+0x206>
 8004558:	2306      	movs	r3, #6
 800455a:	e008      	b.n	800456e <HAL_GPIO_Init+0x206>
 800455c:	2304      	movs	r3, #4
 800455e:	e006      	b.n	800456e <HAL_GPIO_Init+0x206>
 8004560:	2303      	movs	r3, #3
 8004562:	e004      	b.n	800456e <HAL_GPIO_Init+0x206>
 8004564:	2302      	movs	r3, #2
 8004566:	e002      	b.n	800456e <HAL_GPIO_Init+0x206>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_GPIO_Init+0x206>
 800456c:	2300      	movs	r3, #0
 800456e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004570:	f002 0203 	and.w	r2, r2, #3
 8004574:	0092      	lsls	r2, r2, #2
 8004576:	4093      	lsls	r3, r2
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800457e:	4925      	ldr	r1, [pc, #148]	; (8004614 <HAL_GPIO_Init+0x2ac>)
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	3302      	adds	r3, #2
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004598:	4b25      	ldr	r3, [pc, #148]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4924      	ldr	r1, [pc, #144]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
 80045a4:	e006      	b.n	80045b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	4920      	ldr	r1, [pc, #128]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	491a      	ldr	r1, [pc, #104]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
 80045cc:	e006      	b.n	80045dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045ce:	4b18      	ldr	r3, [pc, #96]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	4916      	ldr	r1, [pc, #88]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d025      	beq.n	8004634 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4910      	ldr	r1, [pc, #64]	; (8004630 <HAL_GPIO_Init+0x2c8>)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	e025      	b.n	8004642 <HAL_GPIO_Init+0x2da>
 80045f6:	bf00      	nop
 80045f8:	10320000 	.word	0x10320000
 80045fc:	10310000 	.word	0x10310000
 8004600:	10220000 	.word	0x10220000
 8004604:	10210000 	.word	0x10210000
 8004608:	10120000 	.word	0x10120000
 800460c:	10110000 	.word	0x10110000
 8004610:	40021000 	.word	0x40021000
 8004614:	40010000 	.word	0x40010000
 8004618:	40010800 	.word	0x40010800
 800461c:	40010c00 	.word	0x40010c00
 8004620:	40011000 	.word	0x40011000
 8004624:	40011400 	.word	0x40011400
 8004628:	40011800 	.word	0x40011800
 800462c:	40011c00 	.word	0x40011c00
 8004630:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004634:	4b15      	ldr	r3, [pc, #84]	; (800468c <HAL_GPIO_Init+0x324>)
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	43db      	mvns	r3, r3
 800463c:	4913      	ldr	r1, [pc, #76]	; (800468c <HAL_GPIO_Init+0x324>)
 800463e:	4013      	ands	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800464e:	4b0f      	ldr	r3, [pc, #60]	; (800468c <HAL_GPIO_Init+0x324>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	490e      	ldr	r1, [pc, #56]	; (800468c <HAL_GPIO_Init+0x324>)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]
 800465a:	e006      	b.n	800466a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_GPIO_Init+0x324>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	43db      	mvns	r3, r3
 8004664:	4909      	ldr	r1, [pc, #36]	; (800468c <HAL_GPIO_Init+0x324>)
 8004666:	4013      	ands	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	3301      	adds	r3, #1
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	f47f ae7e 	bne.w	800437c <HAL_GPIO_Init+0x14>
  }
}
 8004680:	bf00      	nop
 8004682:	bf00      	nop
 8004684:	372c      	adds	r7, #44	; 0x2c
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	40010400 	.word	0x40010400

08004690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
 800469c:	4613      	mov	r3, r2
 800469e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046a0:	787b      	ldrb	r3, [r7, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046ac:	e003      	b.n	80046b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046ae:	887b      	ldrh	r3, [r7, #2]
 80046b0:	041a      	lsls	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046d2:	887a      	ldrh	r2, [r7, #2]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4013      	ands	r3, r2
 80046d8:	041a      	lsls	r2, r3, #16
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	43d9      	mvns	r1, r3
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	400b      	ands	r3, r1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	611a      	str	r2, [r3, #16]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e12b      	b.n	800495e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fd f8d8 	bl	80018d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	; 0x24
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004758:	f001 faba 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 800475c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4a81      	ldr	r2, [pc, #516]	; (8004968 <HAL_I2C_Init+0x274>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d807      	bhi.n	8004778 <HAL_I2C_Init+0x84>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a80      	ldr	r2, [pc, #512]	; (800496c <HAL_I2C_Init+0x278>)
 800476c:	4293      	cmp	r3, r2
 800476e:	bf94      	ite	ls
 8004770:	2301      	movls	r3, #1
 8004772:	2300      	movhi	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e006      	b.n	8004786 <HAL_I2C_Init+0x92>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a7d      	ldr	r2, [pc, #500]	; (8004970 <HAL_I2C_Init+0x27c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	bf94      	ite	ls
 8004780:	2301      	movls	r3, #1
 8004782:	2300      	movhi	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e0e7      	b.n	800495e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a78      	ldr	r2, [pc, #480]	; (8004974 <HAL_I2C_Init+0x280>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	0c9b      	lsrs	r3, r3, #18
 8004798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a6a      	ldr	r2, [pc, #424]	; (8004968 <HAL_I2C_Init+0x274>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d802      	bhi.n	80047c8 <HAL_I2C_Init+0xd4>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3301      	adds	r3, #1
 80047c6:	e009      	b.n	80047dc <HAL_I2C_Init+0xe8>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	4a69      	ldr	r2, [pc, #420]	; (8004978 <HAL_I2C_Init+0x284>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	099b      	lsrs	r3, r3, #6
 80047da:	3301      	adds	r3, #1
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	495c      	ldr	r1, [pc, #368]	; (8004968 <HAL_I2C_Init+0x274>)
 80047f8:	428b      	cmp	r3, r1
 80047fa:	d819      	bhi.n	8004830 <HAL_I2C_Init+0x13c>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e59      	subs	r1, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	fbb1 f3f3 	udiv	r3, r1, r3
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004810:	400b      	ands	r3, r1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_I2C_Init+0x138>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1e59      	subs	r1, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fbb1 f3f3 	udiv	r3, r1, r3
 8004824:	3301      	adds	r3, #1
 8004826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482a:	e051      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 800482c:	2304      	movs	r3, #4
 800482e:	e04f      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <HAL_I2C_Init+0x168>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1e58      	subs	r0, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	440b      	add	r3, r1
 8004846:	fbb0 f3f3 	udiv	r3, r0, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e012      	b.n	8004882 <HAL_I2C_Init+0x18e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1e58      	subs	r0, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	0099      	lsls	r1, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004872:	3301      	adds	r3, #1
 8004874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Init+0x196>
 8004886:	2301      	movs	r3, #1
 8004888:	e022      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10e      	bne.n	80048b0 <HAL_I2C_Init+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1e58      	subs	r0, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	440b      	add	r3, r1
 80048a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ae:	e00f      	b.n	80048d0 <HAL_I2C_Init+0x1dc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1e58      	subs	r0, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	0099      	lsls	r1, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	6809      	ldr	r1, [r1, #0]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6911      	ldr	r1, [r2, #16]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68d2      	ldr	r2, [r2, #12]
 800490a:	4311      	orrs	r1, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	430b      	orrs	r3, r1
 8004912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	000186a0 	.word	0x000186a0
 800496c:	001e847f 	.word	0x001e847f
 8004970:	003d08ff 	.word	0x003d08ff
 8004974:	431bde83 	.word	0x431bde83
 8004978:	10624dd3 	.word	0x10624dd3

0800497c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08c      	sub	sp, #48	; 0x30
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	461a      	mov	r2, r3
 8004988:	460b      	mov	r3, r1
 800498a:	817b      	strh	r3, [r7, #10]
 800498c:	4613      	mov	r3, r2
 800498e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004994:	f7fe fb4a 	bl	800302c <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 824b 	bne.w	8004e3e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2319      	movs	r3, #25
 80049ae:	2201      	movs	r2, #1
 80049b0:	497f      	ldr	r1, [pc, #508]	; (8004bb0 <HAL_I2C_Master_Receive+0x234>)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fc4a 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
 80049c0:	e23e      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_I2C_Master_Receive+0x54>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e237      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d007      	beq.n	80049f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2222      	movs	r2, #34	; 0x22
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2210      	movs	r2, #16
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	893a      	ldrh	r2, [r7, #8]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a5f      	ldr	r2, [pc, #380]	; (8004bb4 <HAL_I2C_Master_Receive+0x238>)
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a38:	8979      	ldrh	r1, [r7, #10]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fb36 	bl	80050b0 <I2C_MasterRequestRead>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1f8      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d113      	bne.n	8004a7e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e1cc      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d11e      	bne.n	8004ac4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a96:	b672      	cpsid	i
}
 8004a98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ac0:	b662      	cpsie	i
}
 8004ac2:	e035      	b.n	8004b30 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11e      	bne.n	8004b0a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004adc:	b672      	cpsid	i
}
 8004ade:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b06:	b662      	cpsie	i
}
 8004b08:	e012      	b.n	8004b30 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b30:	e172      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	f200 811f 	bhi.w	8004d7a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d123      	bne.n	8004b8c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fc99 	bl	8005480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e173      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b8a:	e145      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d152      	bne.n	8004c3a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4906      	ldr	r1, [pc, #24]	; (8004bb8 <HAL_I2C_Master_Receive+0x23c>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fb54 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e148      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
 8004bae:	bf00      	nop
 8004bb0:	00100002 	.word	0x00100002
 8004bb4:	ffff0000 	.word	0xffff0000
 8004bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bbc:	b672      	cpsid	i
}
 8004bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c02:	b662      	cpsie	i
}
 8004c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c38:	e0ee      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2200      	movs	r2, #0
 8004c42:	4981      	ldr	r1, [pc, #516]	; (8004e48 <HAL_I2C_Master_Receive+0x4cc>)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fb01 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0f5      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c64:	b672      	cpsid	i
}
 8004c66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <HAL_I2C_Master_Receive+0x4d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	08db      	lsrs	r3, r3, #3
 8004ca0:	4a6b      	ldr	r2, [pc, #428]	; (8004e50 <HAL_I2C_Master_Receive+0x4d4>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0a1a      	lsrs	r2, r3, #8
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	00da      	lsls	r2, r3, #3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d118      	bne.n	8004cf2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004ce2:	b662      	cpsie	i
}
 8004ce4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0a6      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d1d9      	bne.n	8004cb4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d42:	b662      	cpsie	i
}
 8004d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d78:	e04e      	b.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fb7e 	bl	8005480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e058      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d124      	bne.n	8004e18 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d107      	bne.n	8004de6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f ae88 	bne.w	8004b32 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3728      	adds	r7, #40	; 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	00010004 	.word	0x00010004
 8004e4c:	20000040 	.word	0x20000040
 8004e50:	14f8b589 	.word	0x14f8b589

08004e54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	607a      	str	r2, [r7, #4]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	460b      	mov	r3, r1
 8004e62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e64:	f7fe f8e2 	bl	800302c <HAL_GetTick>
 8004e68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	f040 8111 	bne.w	800509e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2319      	movs	r3, #25
 8004e82:	2201      	movs	r2, #1
 8004e84:	4988      	ldr	r1, [pc, #544]	; (80050a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f9e0 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	e104      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_I2C_IsDeviceReady+0x50>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0fd      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d007      	beq.n	8004eca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2224      	movs	r2, #36	; 0x24
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a70      	ldr	r2, [pc, #448]	; (80050ac <HAL_I2C_IsDeviceReady+0x258>)
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f99e 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f24:	d103      	bne.n	8004f2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0b6      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f42:	f7fe f873 	bl	800302c <HAL_GetTick>
 8004f46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f76:	e025      	b.n	8004fc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f78:	f7fe f858 	bl	800302c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <HAL_I2C_IsDeviceReady+0x13a>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	22a0      	movs	r2, #160	; 0xa0
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2ba0      	cmp	r3, #160	; 0xa0
 8004fce:	d005      	beq.n	8004fdc <HAL_I2C_IsDeviceReady+0x188>
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <HAL_I2C_IsDeviceReady+0x188>
 8004fd6:	7dbb      	ldrb	r3, [r7, #22]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0cd      	beq.n	8004f78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d129      	bne.n	8005046 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005000:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2319      	movs	r3, #25
 800501e:	2201      	movs	r2, #1
 8005020:	4921      	ldr	r1, [pc, #132]	; (80050a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f912 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e036      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e02c      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005054:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800505e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2319      	movs	r3, #25
 8005066:	2201      	movs	r2, #1
 8005068:	490f      	ldr	r1, [pc, #60]	; (80050a8 <HAL_I2C_IsDeviceReady+0x254>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f8ee 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e012      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	3301      	adds	r3, #1
 800507e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	f4ff af32 	bcc.w	8004eee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	00100002 	.word	0x00100002
 80050ac:	ffff0000 	.word	0xffff0000

080050b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	460b      	mov	r3, r1
 80050be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d006      	beq.n	80050ea <I2C_MasterRequestRead+0x3a>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d003      	beq.n	80050ea <I2C_MasterRequestRead+0x3a>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050e8:	d108      	bne.n	80050fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e00b      	b.n	8005114 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	2b11      	cmp	r3, #17
 8005102:	d107      	bne.n	8005114 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005112:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f893 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	d103      	bne.n	8005144 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e079      	b.n	800523c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005150:	d108      	bne.n	8005164 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005152:	897b      	ldrh	r3, [r7, #10]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	611a      	str	r2, [r3, #16]
 8005162:	e05f      	b.n	8005224 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005164:	897b      	ldrh	r3, [r7, #10]
 8005166:	11db      	asrs	r3, r3, #7
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 0306 	and.w	r3, r3, #6
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f063 030f 	orn	r3, r3, #15
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4930      	ldr	r1, [pc, #192]	; (8005244 <I2C_MasterRequestRead+0x194>)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f8dc 	bl	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e054      	b.n	800523c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4929      	ldr	r1, [pc, #164]	; (8005248 <I2C_MasterRequestRead+0x198>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f8cc 	bl	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e044      	b.n	800523c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f831 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00d      	beq.n	800520c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fe:	d103      	bne.n	8005208 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005206:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e017      	b.n	800523c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800520c:	897b      	ldrh	r3, [r7, #10]
 800520e:	11db      	asrs	r3, r3, #7
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0306 	and.w	r3, r3, #6
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f063 030e 	orn	r3, r3, #14
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4907      	ldr	r1, [pc, #28]	; (8005248 <I2C_MasterRequestRead+0x198>)
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f888 	bl	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	00010008 	.word	0x00010008
 8005248:	00010002 	.word	0x00010002

0800524c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800525c:	e048      	b.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d044      	beq.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fd fee1 	bl	800302c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d139      	bne.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10d      	bne.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	43da      	mvns	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	e00c      	b.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	43da      	mvns	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d116      	bne.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e023      	b.n	8005338 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10d      	bne.n	8005316 <I2C_WaitOnFlagUntilTimeout+0xca>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	43da      	mvns	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	e00c      	b.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	43da      	mvns	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4013      	ands	r3, r2
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	429a      	cmp	r2, r3
 8005334:	d093      	beq.n	800525e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800534e:	e071      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535e:	d123      	bne.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0204 	orr.w	r2, r3, #4
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e067      	b.n	8005478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d041      	beq.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b0:	f7fd fe3c 	bl	800302c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d302      	bcc.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d136      	bne.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	0c1b      	lsrs	r3, r3, #16
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d10c      	bne.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	43da      	mvns	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e00b      	b.n	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	43da      	mvns	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d016      	beq.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e021      	b.n	8005478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	d10c      	bne.n	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	43da      	mvns	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e00b      	b.n	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	43da      	mvns	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf14      	ite	ne
 800546a:	2301      	movne	r3, #1
 800546c:	2300      	moveq	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	f47f af6d 	bne.w	8005350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800548c:	e049      	b.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d119      	bne.n	80054d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0210 	mvn.w	r2, #16
 80054a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e030      	b.n	8005532 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d0:	f7fd fdac 	bl	800302c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d302      	bcc.n	80054e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11d      	bne.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d016      	beq.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f043 0220 	orr.w	r2, r3, #32
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e007      	b.n	8005532 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d1ae      	bne.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e272      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8087 	beq.w	800566a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800555c:	4b92      	ldr	r3, [pc, #584]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b04      	cmp	r3, #4
 8005566:	d00c      	beq.n	8005582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005568:	4b8f      	ldr	r3, [pc, #572]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b08      	cmp	r3, #8
 8005572:	d112      	bne.n	800559a <HAL_RCC_OscConfig+0x5e>
 8005574:	4b8c      	ldr	r3, [pc, #560]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d10b      	bne.n	800559a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005582:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d06c      	beq.n	8005668 <HAL_RCC_OscConfig+0x12c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d168      	bne.n	8005668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e24c      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a2:	d106      	bne.n	80055b2 <HAL_RCC_OscConfig+0x76>
 80055a4:	4b80      	ldr	r3, [pc, #512]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a7f      	ldr	r2, [pc, #508]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	e02e      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x98>
 80055ba:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7a      	ldr	r2, [pc, #488]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b78      	ldr	r3, [pc, #480]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a77      	ldr	r2, [pc, #476]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e01d      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCC_OscConfig+0xbc>
 80055de:	4b72      	ldr	r3, [pc, #456]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	4b6f      	ldr	r3, [pc, #444]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6e      	ldr	r2, [pc, #440]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e00b      	b.n	8005610 <HAL_RCC_OscConfig+0xd4>
 80055f8:	4b6b      	ldr	r3, [pc, #428]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a6a      	ldr	r2, [pc, #424]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	4b68      	ldr	r3, [pc, #416]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a67      	ldr	r2, [pc, #412]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800560a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fd fd08 	bl	800302c <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005620:	f7fd fd04 	bl	800302c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e200      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005632:	4b5d      	ldr	r3, [pc, #372]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0xe4>
 800563e:	e014      	b.n	800566a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fd fcf4 	bl	800302c <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005648:	f7fd fcf0 	bl	800302c <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e1ec      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565a:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x10c>
 8005666:	e000      	b.n	800566a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d063      	beq.n	800573e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005676:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005682:	4b49      	ldr	r3, [pc, #292]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b08      	cmp	r3, #8
 800568c:	d11c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x18c>
 800568e:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d116      	bne.n	80056c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569a:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_RCC_OscConfig+0x176>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e1c0      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4939      	ldr	r1, [pc, #228]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c6:	e03a      	b.n	800573e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d0:	4b36      	ldr	r3, [pc, #216]	; (80057ac <HAL_RCC_OscConfig+0x270>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fd fca9 	bl	800302c <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056de:	f7fd fca5 	bl	800302c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e1a1      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f0:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fc:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4927      	ldr	r1, [pc, #156]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]
 8005710:	e015      	b.n	800573e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <HAL_RCC_OscConfig+0x270>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fd fc88 	bl	800302c <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005720:	f7fd fc84 	bl	800302c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e180      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f0      	bne.n	8005720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d03a      	beq.n	80057c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d019      	beq.n	8005786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005752:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005758:	f7fd fc68 	bl	800302c <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005760:	f7fd fc64 	bl	800302c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e160      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <HAL_RCC_OscConfig+0x26c>)
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800577e:	2001      	movs	r0, #1
 8005780:	f000 face 	bl	8005d20 <RCC_Delay>
 8005784:	e01c      	b.n	80057c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578c:	f7fd fc4e 	bl	800302c <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005792:	e00f      	b.n	80057b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005794:	f7fd fc4a 	bl	800302c <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d908      	bls.n	80057b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e146      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	42420000 	.word	0x42420000
 80057b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b4:	4b92      	ldr	r3, [pc, #584]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e9      	bne.n	8005794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80a6 	beq.w	800591a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d2:	4b8b      	ldr	r3, [pc, #556]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	4b88      	ldr	r3, [pc, #544]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	4a87      	ldr	r2, [pc, #540]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	61d3      	str	r3, [r2, #28]
 80057ea:	4b85      	ldr	r3, [pc, #532]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fa:	4b82      	ldr	r3, [pc, #520]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d118      	bne.n	8005838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005806:	4b7f      	ldr	r3, [pc, #508]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7e      	ldr	r2, [pc, #504]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005812:	f7fd fc0b 	bl	800302c <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581a:	f7fd fc07 	bl	800302c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b64      	cmp	r3, #100	; 0x64
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e103      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	4b75      	ldr	r3, [pc, #468]	; (8005a04 <HAL_RCC_OscConfig+0x4c8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d106      	bne.n	800584e <HAL_RCC_OscConfig+0x312>
 8005840:	4b6f      	ldr	r3, [pc, #444]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	4a6e      	ldr	r2, [pc, #440]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6213      	str	r3, [r2, #32]
 800584c:	e02d      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0x334>
 8005856:	4b6a      	ldr	r3, [pc, #424]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4a69      	ldr	r2, [pc, #420]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6213      	str	r3, [r2, #32]
 8005862:	4b67      	ldr	r3, [pc, #412]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	4a66      	ldr	r2, [pc, #408]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	6213      	str	r3, [r2, #32]
 800586e:	e01c      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x356>
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	4a60      	ldr	r2, [pc, #384]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6213      	str	r3, [r2, #32]
 8005884:	4b5e      	ldr	r3, [pc, #376]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	4a5d      	ldr	r2, [pc, #372]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6213      	str	r3, [r2, #32]
 8005890:	e00b      	b.n	80058aa <HAL_RCC_OscConfig+0x36e>
 8005892:	4b5b      	ldr	r3, [pc, #364]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	4a5a      	ldr	r2, [pc, #360]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6213      	str	r3, [r2, #32]
 800589e:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b2:	f7fd fbbb 	bl	800302c <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fd fbb7 	bl	800302c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0b1      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RCC_OscConfig+0x37e>
 80058dc:	e014      	b.n	8005908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fd fba5 	bl	800302c <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fd fba1 	bl	800302c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e09b      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	4b40      	ldr	r3, [pc, #256]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590e:	4b3c      	ldr	r3, [pc, #240]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4a3b      	ldr	r2, [pc, #236]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8087 	beq.w	8005a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005924:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d061      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d146      	bne.n	80059c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b33      	ldr	r3, [pc, #204]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fd fb75 	bl	800302c <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005946:	f7fd fb71 	bl	800302c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e06d      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005958:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d108      	bne.n	8005980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4921      	ldr	r1, [pc, #132]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a19      	ldr	r1, [r3, #32]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	430b      	orrs	r3, r1
 8005992:	491b      	ldr	r1, [pc, #108]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005998:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599e:	f7fd fb45 	bl	800302c <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a6:	f7fd fb41 	bl	800302c <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e03d      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x46a>
 80059c4:	e035      	b.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HAL_RCC_OscConfig+0x4cc>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fd fb2e 	bl	800302c <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fd fb2a 	bl	800302c <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e026      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x498>
 80059f2:	e01e      	b.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e019      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40007000 	.word	0x40007000
 8005a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_OscConfig+0x500>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40021000 	.word	0x40021000

08005a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0d0      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a54:	4b6a      	ldr	r3, [pc, #424]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d910      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 0207 	bic.w	r2, r3, #7
 8005a6a:	4965      	ldr	r1, [pc, #404]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0b8      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a9c:	4b59      	ldr	r3, [pc, #356]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a58      	ldr	r2, [pc, #352]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab4:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4a52      	ldr	r2, [pc, #328]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005aba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac0:	4b50      	ldr	r3, [pc, #320]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	494d      	ldr	r1, [pc, #308]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d040      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d115      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005afe:	4b41      	ldr	r3, [pc, #260]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e073      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e06b      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b1e:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f023 0203 	bic.w	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4936      	ldr	r1, [pc, #216]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b30:	f7fd fa7c 	bl	800302c <HAL_GetTick>
 8005b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b36:	e00a      	b.n	8005b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b38:	f7fd fa78 	bl	800302c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e053      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 020c 	and.w	r2, r3, #12
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d1eb      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d210      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 0207 	bic.w	r2, r3, #7
 8005b76:	4922      	ldr	r1, [pc, #136]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e032      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4916      	ldr	r1, [pc, #88]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	490e      	ldr	r1, [pc, #56]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bce:	f000 f821 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	490a      	ldr	r1, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x1c8>)
 8005be0:	5ccb      	ldrb	r3, [r1, r3]
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <HAL_RCC_ClockConfig+0x1cc>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_ClockConfig+0x1d0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd f9da 	bl	8002fa8 <HAL_InitTick>

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40021000 	.word	0x40021000
 8005c08:	080090c0 	.word	0x080090c0
 8005c0c:	20000040 	.word	0x20000040
 8005c10:	20000044 	.word	0x20000044

08005c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d002      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x30>
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_GetSysClockFreq+0x36>
 8005c42:	e027      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_RCC_GetSysClockFreq+0x98>)
 8005c46:	613b      	str	r3, [r7, #16]
      break;
 8005c48:	e027      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	0c9b      	lsrs	r3, r3, #18
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c54:	5cd3      	ldrb	r3, [r2, r3]
 8005c56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d010      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c62:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	0c5b      	lsrs	r3, r3, #17
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	4a11      	ldr	r2, [pc, #68]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c6e:	5cd3      	ldrb	r3, [r2, r3]
 8005c70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <HAL_RCC_GetSysClockFreq+0x98>)
 8005c76:	fb03 f202 	mul.w	r2, r3, r2
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e004      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	613b      	str	r3, [r7, #16]
      break;
 8005c92:	e002      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_RCC_GetSysClockFreq+0x98>)
 8005c96:	613b      	str	r3, [r7, #16]
      break;
 8005c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c9a:	693b      	ldr	r3, [r7, #16]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	007a1200 	.word	0x007a1200
 8005cb0:	080090d8 	.word	0x080090d8
 8005cb4:	080090e8 	.word	0x080090e8
 8005cb8:	003d0900 	.word	0x003d0900

08005cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc0:	4b02      	ldr	r3, [pc, #8]	; (8005ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr
 8005ccc:	20000040 	.word	0x20000040

08005cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cd4:	f7ff fff2 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	4903      	ldr	r1, [pc, #12]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	080090d0 	.word	0x080090d0

08005cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cfc:	f7ff ffde 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	0adb      	lsrs	r3, r3, #11
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	4903      	ldr	r1, [pc, #12]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	080090d0 	.word	0x080090d0

08005d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <RCC_Delay+0x34>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <RCC_Delay+0x38>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	0a5b      	lsrs	r3, r3, #9
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d3c:	bf00      	nop
  }
  while (Delay --);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1e5a      	subs	r2, r3, #1
 8005d42:	60fa      	str	r2, [r7, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f9      	bne.n	8005d3c <RCC_Delay+0x1c>
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	20000040 	.word	0x20000040
 8005d58:	10624dd3 	.word	0x10624dd3

08005d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d07d      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7c:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10d      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d88:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d92:	61d3      	str	r3, [r2, #28]
 8005d94:	4b49      	ldr	r3, [pc, #292]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da4:	4b46      	ldr	r3, [pc, #280]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d118      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db0:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a42      	ldr	r2, [pc, #264]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbc:	f7fd f936 	bl	800302c <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc4:	f7fd f932 	bl	800302c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e06d      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd6:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de2:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02e      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d027      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e00:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b2e      	ldr	r3, [pc, #184]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e10:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e16:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fd f901 	bl	800302c <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e2e:	f7fd f8fd 	bl	800302c <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e036      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0ee      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4917      	ldr	r1, [pc, #92]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d105      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e68:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	4a13      	ldr	r2, [pc, #76]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	490b      	ldr	r1, [pc, #44]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4904      	ldr	r1, [pc, #16]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40007000 	.word	0x40007000
 8005ec4:	42420440 	.word	0x42420440

08005ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e076      	b.n	8005fc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d108      	bne.n	8005ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eea:	d009      	beq.n	8005f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	61da      	str	r2, [r3, #28]
 8005ef2:	e005      	b.n	8005f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fc f9cc 	bl	80022b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f84:	ea42 0103 	orr.w	r1, r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	0c1a      	lsrs	r2, r3, #16
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f002 0204 	and.w	r2, r2, #4
 8005fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_SPI_Transmit+0x22>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e12d      	b.n	800624e <HAL_SPI_Transmit+0x27e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ffa:	f7fd f817 	bl	800302c <HAL_GetTick>
 8005ffe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	d002      	beq.n	8006016 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006010:	2302      	movs	r3, #2
 8006012:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006014:	e116      	b.n	8006244 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_SPI_Transmit+0x52>
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006026:	e10d      	b.n	8006244 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2203      	movs	r2, #3
 800602c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606e:	d10f      	bne.n	8006090 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800608e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b40      	cmp	r3, #64	; 0x40
 800609c:	d007      	beq.n	80060ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b6:	d14f      	bne.n	8006158 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Transmit+0xf6>
 80060c0:	8afb      	ldrh	r3, [r7, #22]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d142      	bne.n	800614c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	1c9a      	adds	r2, r3, #2
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060ea:	e02f      	b.n	800614c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d112      	bne.n	8006120 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	881a      	ldrh	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	1c9a      	adds	r2, r3, #2
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	86da      	strh	r2, [r3, #54]	; 0x36
 800611e:	e015      	b.n	800614c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006120:	f7fc ff84 	bl	800302c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d803      	bhi.n	8006138 <HAL_SPI_Transmit+0x168>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d102      	bne.n	800613e <HAL_SPI_Transmit+0x16e>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800614a:	e07b      	b.n	8006244 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1ca      	bne.n	80060ec <HAL_SPI_Transmit+0x11c>
 8006156:	e050      	b.n	80061fa <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_SPI_Transmit+0x196>
 8006160:	8afb      	ldrh	r3, [r7, #22]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d144      	bne.n	80061f0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800618c:	e030      	b.n	80061f0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b02      	cmp	r3, #2
 800619a:	d113      	bne.n	80061c4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80061c2:	e015      	b.n	80061f0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c4:	f7fc ff32 	bl	800302c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d803      	bhi.n	80061dc <HAL_SPI_Transmit+0x20c>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d102      	bne.n	80061e2 <HAL_SPI_Transmit+0x212>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80061ee:	e029      	b.n	8006244 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1c9      	bne.n	800618e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fbcc 	bl	800699c <SPI_EndRxTxTransaction>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e003      	b.n	8006244 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800624c:	7ffb      	ldrb	r3, [r7, #31]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b088      	sub	sp, #32
 800625a:	af02      	add	r7, sp, #8
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b01      	cmp	r3, #1
 8006274:	d002      	beq.n	800627c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006276:	2302      	movs	r3, #2
 8006278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800627a:	e0fb      	b.n	8006474 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006284:	d112      	bne.n	80062ac <HAL_SPI_Receive+0x56>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10e      	bne.n	80062ac <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2204      	movs	r2, #4
 8006292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f8ef 	bl	8006486 <HAL_SPI_TransmitReceive>
 80062a8:	4603      	mov	r3, r0
 80062aa:	e0e8      	b.n	800647e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_SPI_Receive+0x64>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e0e1      	b.n	800647e <HAL_SPI_Receive+0x228>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c2:	f7fc feb3 	bl	800302c <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_SPI_Receive+0x7e>
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062d8:	e0cc      	b.n	8006474 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2204      	movs	r2, #4
 80062de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	88fa      	ldrh	r2, [r7, #6]
 80062f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006320:	d10f      	bne.n	8006342 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d007      	beq.n	8006360 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d16a      	bne.n	800643e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006368:	e032      	b.n	80063d0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d115      	bne.n	80063a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f103 020c 	add.w	r2, r3, #12
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063a2:	e015      	b.n	80063d0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a4:	f7fc fe42 	bl	800302c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d803      	bhi.n	80063bc <HAL_SPI_Receive+0x166>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d102      	bne.n	80063c2 <HAL_SPI_Receive+0x16c>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80063ce:	e051      	b.n	8006474 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1c7      	bne.n	800636a <HAL_SPI_Receive+0x114>
 80063da:	e035      	b.n	8006448 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d113      	bne.n	8006412 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	b292      	uxth	r2, r2
 80063f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006410:	e015      	b.n	800643e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006412:	f7fc fe0b 	bl	800302c <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d803      	bhi.n	800642a <HAL_SPI_Receive+0x1d4>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d102      	bne.n	8006430 <HAL_SPI_Receive+0x1da>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800643c:	e01a      	b.n	8006474 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1c9      	bne.n	80063dc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fa53 	bl	80068f8 <SPI_EndRxTransaction>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
 800646a:	e003      	b.n	8006474 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b08c      	sub	sp, #48	; 0x30
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006494:	2301      	movs	r3, #1
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x26>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e198      	b.n	80067de <HAL_SPI_TransmitReceive+0x358>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064b4:	f7fc fdba 	bl	800302c <HAL_GetTick>
 80064b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d00f      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0x70>
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064dc:	d107      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x68>
 80064e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d003      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064ee:	2302      	movs	r3, #2
 80064f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064f4:	e16d      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x82>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x82>
 8006502:	887b      	ldrh	r3, [r7, #2]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800650e:	e160      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b04      	cmp	r3, #4
 800651a:	d003      	beq.n	8006524 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2205      	movs	r2, #5
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	887a      	ldrh	r2, [r7, #2]
 8006534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	887a      	ldrh	r2, [r7, #2]
 800653a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	887a      	ldrh	r2, [r7, #2]
 8006546:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	887a      	ldrh	r2, [r7, #2]
 800654c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	d007      	beq.n	8006578 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006580:	d17c      	bne.n	800667c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x10a>
 800658a:	8b7b      	ldrh	r3, [r7, #26]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d16a      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b4:	e057      	b.n	8006666 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d11b      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x176>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x176>
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d113      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	881a      	ldrh	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	1c9a      	adds	r2, r3, #2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d119      	bne.n	800663e <HAL_SPI_TransmitReceive+0x1b8>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d014      	beq.n	800663e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	b292      	uxth	r2, r2
 8006620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	1c9a      	adds	r2, r3, #2
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800663a:	2301      	movs	r3, #1
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800663e:	f7fc fcf5 	bl	800302c <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800664a:	429a      	cmp	r2, r3
 800664c:	d80b      	bhi.n	8006666 <HAL_SPI_TransmitReceive+0x1e0>
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d007      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006664:	e0b5      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1a2      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x130>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d19d      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x130>
 800667a:	e080      	b.n	800677e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_SPI_TransmitReceive+0x204>
 8006684:	8b7b      	ldrh	r3, [r7, #26]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d16f      	bne.n	800676a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	330c      	adds	r3, #12
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b0:	e05b      	b.n	800676a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d11c      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x274>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d017      	beq.n	80066fa <HAL_SPI_TransmitReceive+0x274>
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d114      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d119      	bne.n	800673c <HAL_SPI_TransmitReceive+0x2b6>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800673c:	f7fc fc76 	bl	800302c <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006748:	429a      	cmp	r2, r3
 800674a:	d803      	bhi.n	8006754 <HAL_SPI_TransmitReceive+0x2ce>
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d102      	bne.n	800675a <HAL_SPI_TransmitReceive+0x2d4>
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	2b00      	cmp	r3, #0
 8006758:	d107      	bne.n	800676a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006768:	e033      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d19e      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x22c>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d199      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800677e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f90a 	bl	800699c <SPI_EndRxTxTransaction>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d006      	beq.n	800679c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800679a:	e01a      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c8:	e003      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3730      	adds	r7, #48	; 0x30
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067f8:	f7fc fc18 	bl	800302c <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	4413      	add	r3, r2
 8006806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006808:	f7fc fc10 	bl	800302c <HAL_GetTick>
 800680c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800680e:	4b39      	ldr	r3, [pc, #228]	; (80068f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	015b      	lsls	r3, r3, #5
 8006814:	0d1b      	lsrs	r3, r3, #20
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	fb02 f303 	mul.w	r3, r2, r3
 800681c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800681e:	e054      	b.n	80068ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d050      	beq.n	80068ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006828:	f7fc fc00 	bl	800302c <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	429a      	cmp	r2, r3
 8006836:	d902      	bls.n	800683e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d13d      	bne.n	80068ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800684c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006856:	d111      	bne.n	800687c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006860:	d004      	beq.n	800686c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686a:	d107      	bne.n	800687c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006884:	d10f      	bne.n	80068a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e017      	b.n	80068ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4013      	ands	r3, r2
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bf0c      	ite	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	2300      	movne	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d19b      	bne.n	8006820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3720      	adds	r7, #32
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000040 	.word	0x20000040

080068f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690c:	d111      	bne.n	8006932 <SPI_EndRxTransaction+0x3a>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006916:	d004      	beq.n	8006922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006920:	d107      	bne.n	8006932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006930:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693a:	d117      	bne.n	800696c <SPI_EndRxTransaction+0x74>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006944:	d112      	bne.n	800696c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2200      	movs	r2, #0
 800694e:	2101      	movs	r1, #1
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff ff49 	bl	80067e8 <SPI_WaitFlagStateUntilTimeout>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e013      	b.n	8006994 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	2180      	movs	r1, #128	; 0x80
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff ff36 	bl	80067e8 <SPI_WaitFlagStateUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	f043 0220 	orr.w	r2, r3, #32
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e000      	b.n	8006994 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	2180      	movs	r1, #128	; 0x80
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff ff18 	bl	80067e8 <SPI_WaitFlagStateUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	f043 0220 	orr.w	r2, r3, #32
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e000      	b.n	80069d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e041      	b.n	8006a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fc f814 	bl	8002a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f000 fe82 	bl	8007720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d001      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e044      	b.n	8006b1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <HAL_TIM_Base_Start_IT+0xac>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <HAL_TIM_Base_Start_IT+0xb0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d013      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <HAL_TIM_Base_Start_IT+0xb4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <HAL_TIM_Base_Start_IT+0xb8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d111      	bne.n	8006b08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b06      	cmp	r3, #6
 8006af4:	d010      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0201 	orr.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b06:	e007      	b.n	8006b18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40013400 	.word	0x40013400
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00

08006b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e041      	b.n	8006bce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f839 	bl	8006bd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f000 fdd2 	bl	8007720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d109      	bne.n	8006c0c <HAL_TIM_PWM_Start+0x24>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	bf14      	ite	ne
 8006c04:	2301      	movne	r3, #1
 8006c06:	2300      	moveq	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	e022      	b.n	8006c52 <HAL_TIM_PWM_Start+0x6a>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d109      	bne.n	8006c26 <HAL_TIM_PWM_Start+0x3e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	bf14      	ite	ne
 8006c1e:	2301      	movne	r3, #1
 8006c20:	2300      	moveq	r3, #0
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	e015      	b.n	8006c52 <HAL_TIM_PWM_Start+0x6a>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d109      	bne.n	8006c40 <HAL_TIM_PWM_Start+0x58>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	bf14      	ite	ne
 8006c38:	2301      	movne	r3, #1
 8006c3a:	2300      	moveq	r3, #0
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	e008      	b.n	8006c52 <HAL_TIM_PWM_Start+0x6a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	bf14      	ite	ne
 8006c4c:	2301      	movne	r3, #1
 8006c4e:	2300      	moveq	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e072      	b.n	8006d40 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_PWM_Start+0x82>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c68:	e013      	b.n	8006c92 <HAL_TIM_PWM_Start+0xaa>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_PWM_Start+0x92>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c78:	e00b      	b.n	8006c92 <HAL_TIM_PWM_Start+0xaa>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d104      	bne.n	8006c8a <HAL_TIM_PWM_Start+0xa2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c88:	e003      	b.n	8006c92 <HAL_TIM_PWM_Start+0xaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fffc 	bl	8007c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a28      	ldr	r2, [pc, #160]	; (8006d48 <HAL_TIM_PWM_Start+0x160>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d004      	beq.n	8006cb4 <HAL_TIM_PWM_Start+0xcc>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a27      	ldr	r2, [pc, #156]	; (8006d4c <HAL_TIM_PWM_Start+0x164>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIM_PWM_Start+0xd0>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <HAL_TIM_PWM_Start+0xd2>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <HAL_TIM_PWM_Start+0x160>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x122>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <HAL_TIM_PWM_Start+0x164>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x122>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cea:	d00e      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x122>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_TIM_PWM_Start+0x168>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x122>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <HAL_TIM_PWM_Start+0x16c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x122>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <HAL_TIM_PWM_Start+0x170>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d111      	bne.n	8006d2e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	d010      	beq.n	8006d3e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	e007      	b.n	8006d3e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40013400 	.word	0x40013400
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00

08006d5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 ff92 	bl	8007c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2e      	ldr	r2, [pc, #184]	; (8006e34 <HAL_TIM_PWM_Stop+0xd8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_PWM_Stop+0x2c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2d      	ldr	r2, [pc, #180]	; (8006e38 <HAL_TIM_PWM_Stop+0xdc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d101      	bne.n	8006d8c <HAL_TIM_PWM_Stop+0x30>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <HAL_TIM_PWM_Stop+0x32>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d017      	beq.n	8006dc2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10f      	bne.n	8006dc2 <HAL_TIM_PWM_Stop+0x66>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	f240 4344 	movw	r3, #1092	; 0x444
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d107      	bne.n	8006dc2 <HAL_TIM_PWM_Stop+0x66>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dcc:	4013      	ands	r3, r2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10f      	bne.n	8006df2 <HAL_TIM_PWM_Stop+0x96>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	f240 4344 	movw	r3, #1092	; 0x444
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d107      	bne.n	8006df2 <HAL_TIM_PWM_Stop+0x96>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <HAL_TIM_PWM_Stop+0xa6>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e00:	e013      	b.n	8006e2a <HAL_TIM_PWM_Stop+0xce>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d104      	bne.n	8006e12 <HAL_TIM_PWM_Stop+0xb6>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e10:	e00b      	b.n	8006e2a <HAL_TIM_PWM_Stop+0xce>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_PWM_Stop+0xc6>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e20:	e003      	b.n	8006e2a <HAL_TIM_PWM_Stop+0xce>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40013400 	.word	0x40013400

08006e3c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d109      	bne.n	8006e64 <HAL_TIM_PWM_Start_IT+0x28>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	bf14      	ite	ne
 8006e5c:	2301      	movne	r3, #1
 8006e5e:	2300      	moveq	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	e022      	b.n	8006eaa <HAL_TIM_PWM_Start_IT+0x6e>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d109      	bne.n	8006e7e <HAL_TIM_PWM_Start_IT+0x42>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	bf14      	ite	ne
 8006e76:	2301      	movne	r3, #1
 8006e78:	2300      	moveq	r3, #0
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	e015      	b.n	8006eaa <HAL_TIM_PWM_Start_IT+0x6e>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d109      	bne.n	8006e98 <HAL_TIM_PWM_Start_IT+0x5c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	bf14      	ite	ne
 8006e90:	2301      	movne	r3, #1
 8006e92:	2300      	moveq	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	e008      	b.n	8006eaa <HAL_TIM_PWM_Start_IT+0x6e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e0bd      	b.n	800702e <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <HAL_TIM_PWM_Start_IT+0x86>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec0:	e013      	b.n	8006eea <HAL_TIM_PWM_Start_IT+0xae>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d104      	bne.n	8006ed2 <HAL_TIM_PWM_Start_IT+0x96>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed0:	e00b      	b.n	8006eea <HAL_TIM_PWM_Start_IT+0xae>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d104      	bne.n	8006ee2 <HAL_TIM_PWM_Start_IT+0xa6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ee0:	e003      	b.n	8006eea <HAL_TIM_PWM_Start_IT+0xae>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b0c      	cmp	r3, #12
 8006eee:	d841      	bhi.n	8006f74 <HAL_TIM_PWM_Start_IT+0x138>
 8006ef0:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f2d 	.word	0x08006f2d
 8006efc:	08006f75 	.word	0x08006f75
 8006f00:	08006f75 	.word	0x08006f75
 8006f04:	08006f75 	.word	0x08006f75
 8006f08:	08006f3f 	.word	0x08006f3f
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006f75 	.word	0x08006f75
 8006f14:	08006f75 	.word	0x08006f75
 8006f18:	08006f51 	.word	0x08006f51
 8006f1c:	08006f75 	.word	0x08006f75
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006f75 	.word	0x08006f75
 8006f28:	08006f63 	.word	0x08006f63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0202 	orr.w	r2, r2, #2
 8006f3a:	60da      	str	r2, [r3, #12]
      break;
 8006f3c:	e01d      	b.n	8006f7a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0204 	orr.w	r2, r2, #4
 8006f4c:	60da      	str	r2, [r3, #12]
      break;
 8006f4e:	e014      	b.n	8006f7a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0208 	orr.w	r2, r2, #8
 8006f5e:	60da      	str	r2, [r3, #12]
      break;
 8006f60:	e00b      	b.n	8006f7a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f042 0210 	orr.w	r2, r2, #16
 8006f70:	60da      	str	r2, [r3, #12]
      break;
 8006f72:	e002      	b.n	8006f7a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
      break;
 8006f78:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d155      	bne.n	800702c <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2201      	movs	r2, #1
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fe85 	bl	8007c98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a29      	ldr	r2, [pc, #164]	; (8007038 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIM_PWM_Start_IT+0x166>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a27      	ldr	r2, [pc, #156]	; (800703c <HAL_TIM_PWM_Start_IT+0x200>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <HAL_TIM_PWM_Start_IT+0x16a>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <HAL_TIM_PWM_Start_IT+0x16c>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d018      	beq.n	8006ff8 <HAL_TIM_PWM_Start_IT+0x1bc>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1c      	ldr	r2, [pc, #112]	; (800703c <HAL_TIM_PWM_Start_IT+0x200>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <HAL_TIM_PWM_Start_IT+0x1bc>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_TIM_PWM_Start_IT+0x1bc>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a18      	ldr	r2, [pc, #96]	; (8007040 <HAL_TIM_PWM_Start_IT+0x204>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_TIM_PWM_Start_IT+0x1bc>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_TIM_PWM_Start_IT+0x208>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIM_PWM_Start_IT+0x1bc>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a15      	ldr	r2, [pc, #84]	; (8007048 <HAL_TIM_PWM_Start_IT+0x20c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d111      	bne.n	800701c <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b06      	cmp	r3, #6
 8007008:	d010      	beq.n	800702c <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0201 	orr.w	r2, r2, #1
 8007018:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701a:	e007      	b.n	800702c <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	40012c00 	.word	0x40012c00
 800703c:	40013400 	.word	0x40013400
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00

0800704c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b0c      	cmp	r3, #12
 800705e:	d841      	bhi.n	80070e4 <HAL_TIM_PWM_Stop_IT+0x98>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	0800709d 	.word	0x0800709d
 800706c:	080070e5 	.word	0x080070e5
 8007070:	080070e5 	.word	0x080070e5
 8007074:	080070e5 	.word	0x080070e5
 8007078:	080070af 	.word	0x080070af
 800707c:	080070e5 	.word	0x080070e5
 8007080:	080070e5 	.word	0x080070e5
 8007084:	080070e5 	.word	0x080070e5
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070e5 	.word	0x080070e5
 8007094:	080070e5 	.word	0x080070e5
 8007098:	080070d3 	.word	0x080070d3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0202 	bic.w	r2, r2, #2
 80070aa:	60da      	str	r2, [r3, #12]
      break;
 80070ac:	e01d      	b.n	80070ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0204 	bic.w	r2, r2, #4
 80070bc:	60da      	str	r2, [r3, #12]
      break;
 80070be:	e014      	b.n	80070ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0208 	bic.w	r2, r2, #8
 80070ce:	60da      	str	r2, [r3, #12]
      break;
 80070d0:	e00b      	b.n	80070ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0210 	bic.w	r2, r2, #16
 80070e0:	60da      	str	r2, [r3, #12]
      break;
 80070e2:	e002      	b.n	80070ea <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
      break;
 80070e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d161      	bne.n	80071b4 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fdcd 	bl	8007c98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2f      	ldr	r2, [pc, #188]	; (80071c0 <HAL_TIM_PWM_Stop_IT+0x174>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIM_PWM_Stop_IT+0xc6>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2d      	ldr	r2, [pc, #180]	; (80071c4 <HAL_TIM_PWM_Stop_IT+0x178>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d101      	bne.n	8007116 <HAL_TIM_PWM_Stop_IT+0xca>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <HAL_TIM_PWM_Stop_IT+0xcc>
 8007116:	2300      	movs	r3, #0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d017      	beq.n	800714c <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	f241 1311 	movw	r3, #4369	; 0x1111
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10f      	bne.n	800714c <HAL_TIM_PWM_Stop_IT+0x100>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	f240 4344 	movw	r3, #1092	; 0x444
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d107      	bne.n	800714c <HAL_TIM_PWM_Stop_IT+0x100>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800714a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	f241 1311 	movw	r3, #4369	; 0x1111
 8007156:	4013      	ands	r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10f      	bne.n	800717c <HAL_TIM_PWM_Stop_IT+0x130>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a1a      	ldr	r2, [r3, #32]
 8007162:	f240 4344 	movw	r3, #1092	; 0x444
 8007166:	4013      	ands	r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d107      	bne.n	800717c <HAL_TIM_PWM_Stop_IT+0x130>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0201 	bic.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <HAL_TIM_PWM_Stop_IT+0x140>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800718a:	e013      	b.n	80071b4 <HAL_TIM_PWM_Stop_IT+0x168>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b04      	cmp	r3, #4
 8007190:	d104      	bne.n	800719c <HAL_TIM_PWM_Stop_IT+0x150>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800719a:	e00b      	b.n	80071b4 <HAL_TIM_PWM_Stop_IT+0x168>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d104      	bne.n	80071ac <HAL_TIM_PWM_Stop_IT+0x160>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071aa:	e003      	b.n	80071b4 <HAL_TIM_PWM_Stop_IT+0x168>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	40013400 	.word	0x40013400

080071c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d122      	bne.n	8007224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d11b      	bne.n	8007224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0202 	mvn.w	r2, #2
 80071f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa76 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 8007210:	e005      	b.n	800721e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa69 	bl	80076ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7fb f8cb 	bl	80023b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b04      	cmp	r3, #4
 8007230:	d122      	bne.n	8007278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b04      	cmp	r3, #4
 800723e:	d11b      	bne.n	8007278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0204 	mvn.w	r2, #4
 8007248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa4c 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 8007264:	e005      	b.n	8007272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa3f 	bl	80076ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fb f8a1 	bl	80023b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b08      	cmp	r3, #8
 8007284:	d122      	bne.n	80072cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b08      	cmp	r3, #8
 8007292:	d11b      	bne.n	80072cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0208 	mvn.w	r2, #8
 800729c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2204      	movs	r2, #4
 80072a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa22 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 80072b8:	e005      	b.n	80072c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa15 	bl	80076ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fb f877 	bl	80023b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d122      	bne.n	8007320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d11b      	bne.n	8007320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0210 	mvn.w	r2, #16
 80072f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2208      	movs	r2, #8
 80072f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9f8 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9eb 	bl	80076ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fb f84d 	bl	80023b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b01      	cmp	r3, #1
 800732c:	d10e      	bne.n	800734c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d107      	bne.n	800734c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0201 	mvn.w	r2, #1
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fa fbf9 	bl	8001b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	d10e      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d107      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fd7a 	bl	8007e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007382:	2b40      	cmp	r3, #64	; 0x40
 8007384:	d10e      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	d107      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800739c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f9b5 	bl	800770e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d10e      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d107      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0220 	mvn.w	r2, #32
 80073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fd45 	bl	8007e5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e0ae      	b.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b0c      	cmp	r3, #12
 8007402:	f200 809f 	bhi.w	8007544 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007441 	.word	0x08007441
 8007410:	08007545 	.word	0x08007545
 8007414:	08007545 	.word	0x08007545
 8007418:	08007545 	.word	0x08007545
 800741c:	08007481 	.word	0x08007481
 8007420:	08007545 	.word	0x08007545
 8007424:	08007545 	.word	0x08007545
 8007428:	08007545 	.word	0x08007545
 800742c:	080074c3 	.word	0x080074c3
 8007430:	08007545 	.word	0x08007545
 8007434:	08007545 	.word	0x08007545
 8007438:	08007545 	.word	0x08007545
 800743c:	08007503 	.word	0x08007503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 f9e4 	bl	8007814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0208 	orr.w	r2, r2, #8
 800745a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0204 	bic.w	r2, r2, #4
 800746a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6999      	ldr	r1, [r3, #24]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	619a      	str	r2, [r3, #24]
      break;
 800747e:	e064      	b.n	800754a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fa34 	bl	80078f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800749a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6999      	ldr	r1, [r3, #24]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	021a      	lsls	r2, r3, #8
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	619a      	str	r2, [r3, #24]
      break;
 80074c0:	e043      	b.n	800754a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fa87 	bl	80079dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0208 	orr.w	r2, r2, #8
 80074dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0204 	bic.w	r2, r2, #4
 80074ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69d9      	ldr	r1, [r3, #28]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	691a      	ldr	r2, [r3, #16]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	61da      	str	r2, [r3, #28]
      break;
 8007500:	e023      	b.n	800754a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fadb 	bl	8007ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800751c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69d9      	ldr	r1, [r3, #28]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	021a      	lsls	r2, r3, #8
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	61da      	str	r2, [r3, #28]
      break;
 8007542:	e002      	b.n	800754a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
      break;
 8007548:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007552:	7dfb      	ldrb	r3, [r7, #23]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIM_ConfigClockSource+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e0b4      	b.n	80076e2 <HAL_TIM_ConfigClockSource+0x186>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b0:	d03e      	beq.n	8007630 <HAL_TIM_ConfigClockSource+0xd4>
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b6:	f200 8087 	bhi.w	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	f000 8086 	beq.w	80076ce <HAL_TIM_ConfigClockSource+0x172>
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c6:	d87f      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075c8:	2b70      	cmp	r3, #112	; 0x70
 80075ca:	d01a      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0xa6>
 80075cc:	2b70      	cmp	r3, #112	; 0x70
 80075ce:	d87b      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075d0:	2b60      	cmp	r3, #96	; 0x60
 80075d2:	d050      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x11a>
 80075d4:	2b60      	cmp	r3, #96	; 0x60
 80075d6:	d877      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075d8:	2b50      	cmp	r3, #80	; 0x50
 80075da:	d03c      	beq.n	8007656 <HAL_TIM_ConfigClockSource+0xfa>
 80075dc:	2b50      	cmp	r3, #80	; 0x50
 80075de:	d873      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d058      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0x13a>
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d86f      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075e8:	2b30      	cmp	r3, #48	; 0x30
 80075ea:	d064      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15a>
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d86b      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d060      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15a>
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d867      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05c      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15a>
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d05a      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15a>
 8007600:	e062      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007612:	f000 fb22 	bl	8007c5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	609a      	str	r2, [r3, #8]
      break;
 800762e:	e04f      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007640:	f000 fb0b 	bl	8007c5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007652:	609a      	str	r2, [r3, #8]
      break;
 8007654:	e03c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	461a      	mov	r2, r3
 8007664:	f000 fa82 	bl	8007b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2150      	movs	r1, #80	; 0x50
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fad9 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 8007674:	e02c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007682:	461a      	mov	r2, r3
 8007684:	f000 faa0 	bl	8007bc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2160      	movs	r1, #96	; 0x60
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fac9 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 8007694:	e01c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a2:	461a      	mov	r2, r3
 80076a4:	f000 fa62 	bl	8007b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2140      	movs	r1, #64	; 0x40
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fab9 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 80076b4:	e00c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f000 fab0 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 80076c6:	e003      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
      break;
 80076cc:	e000      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr

080076fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	bc80      	pop	{r7}
 800770c:	4770      	bx	lr

0800770e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr

08007720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a33      	ldr	r2, [pc, #204]	; (8007800 <TIM_Base_SetConfig+0xe0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a32      	ldr	r2, [pc, #200]	; (8007804 <TIM_Base_SetConfig+0xe4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00f      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007746:	d00b      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a2f      	ldr	r2, [pc, #188]	; (8007808 <TIM_Base_SetConfig+0xe8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a2e      	ldr	r2, [pc, #184]	; (800780c <TIM_Base_SetConfig+0xec>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a2d      	ldr	r2, [pc, #180]	; (8007810 <TIM_Base_SetConfig+0xf0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a22      	ldr	r2, [pc, #136]	; (8007800 <TIM_Base_SetConfig+0xe0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <TIM_Base_SetConfig+0x82>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a21      	ldr	r2, [pc, #132]	; (8007804 <TIM_Base_SetConfig+0xe4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <TIM_Base_SetConfig+0x82>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007788:	d00b      	beq.n	80077a2 <TIM_Base_SetConfig+0x82>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a1e      	ldr	r2, [pc, #120]	; (8007808 <TIM_Base_SetConfig+0xe8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_Base_SetConfig+0x82>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a1d      	ldr	r2, [pc, #116]	; (800780c <TIM_Base_SetConfig+0xec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_Base_SetConfig+0x82>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a1c      	ldr	r2, [pc, #112]	; (8007810 <TIM_Base_SetConfig+0xf0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a09      	ldr	r2, [pc, #36]	; (8007800 <TIM_Base_SetConfig+0xe0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0xc8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a08      	ldr	r2, [pc, #32]	; (8007804 <TIM_Base_SetConfig+0xe4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	615a      	str	r2, [r3, #20]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40013400 	.word	0x40013400
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00

08007814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	f023 0201 	bic.w	r2, r3, #1
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f023 0302 	bic.w	r3, r3, #2
 800785c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a20      	ldr	r2, [pc, #128]	; (80078ec <TIM_OC1_SetConfig+0xd8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d003      	beq.n	8007878 <TIM_OC1_SetConfig+0x64>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a1f      	ldr	r2, [pc, #124]	; (80078f0 <TIM_OC1_SetConfig+0xdc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d10c      	bne.n	8007892 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f023 0308 	bic.w	r3, r3, #8
 800787e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f023 0304 	bic.w	r3, r3, #4
 8007890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a15      	ldr	r2, [pc, #84]	; (80078ec <TIM_OC1_SetConfig+0xd8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d003      	beq.n	80078a2 <TIM_OC1_SetConfig+0x8e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a14      	ldr	r2, [pc, #80]	; (80078f0 <TIM_OC1_SetConfig+0xdc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d111      	bne.n	80078c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	621a      	str	r2, [r3, #32]
}
 80078e0:	bf00      	nop
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40012c00 	.word	0x40012c00
 80078f0:	40013400 	.word	0x40013400

080078f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	f023 0210 	bic.w	r2, r3, #16
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800792a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f023 0320 	bic.w	r3, r3, #32
 800793e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a21      	ldr	r2, [pc, #132]	; (80079d4 <TIM_OC2_SetConfig+0xe0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d003      	beq.n	800795c <TIM_OC2_SetConfig+0x68>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a20      	ldr	r2, [pc, #128]	; (80079d8 <TIM_OC2_SetConfig+0xe4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d10d      	bne.n	8007978 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	4313      	orrs	r3, r2
 800796e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a16      	ldr	r2, [pc, #88]	; (80079d4 <TIM_OC2_SetConfig+0xe0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_OC2_SetConfig+0x94>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <TIM_OC2_SetConfig+0xe4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d113      	bne.n	80079b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800798e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr
 80079d4:	40012c00 	.word	0x40012c00
 80079d8:	40013400 	.word	0x40013400

080079dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0303 	bic.w	r3, r3, #3
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a21      	ldr	r2, [pc, #132]	; (8007abc <TIM_OC3_SetConfig+0xe0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d003      	beq.n	8007a42 <TIM_OC3_SetConfig+0x66>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <TIM_OC3_SetConfig+0xe4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d10d      	bne.n	8007a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a16      	ldr	r2, [pc, #88]	; (8007abc <TIM_OC3_SetConfig+0xe0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_OC3_SetConfig+0x92>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <TIM_OC3_SetConfig+0xe4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d113      	bne.n	8007a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	621a      	str	r2, [r3, #32]
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40013400 	.word	0x40013400

08007ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	031b      	lsls	r3, r3, #12
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a11      	ldr	r2, [pc, #68]	; (8007b64 <TIM_OC4_SetConfig+0xa0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC4_SetConfig+0x68>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a10      	ldr	r2, [pc, #64]	; (8007b68 <TIM_OC4_SetConfig+0xa4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d109      	bne.n	8007b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	019b      	lsls	r3, r3, #6
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40013400 	.word	0x40013400

08007b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f023 0201 	bic.w	r2, r3, #1
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f023 030a 	bic.w	r3, r3, #10
 8007ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0210 	bic.w	r2, r3, #16
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	031b      	lsls	r3, r3, #12
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	621a      	str	r2, [r3, #32]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr

08007c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f043 0307 	orr.w	r3, r3, #7
 8007c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b087      	sub	sp, #28
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	021a      	lsls	r2, r3, #8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	609a      	str	r2, [r3, #8]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 031f 	and.w	r3, r3, #31
 8007caa:	2201      	movs	r2, #1
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a1a      	ldr	r2, [r3, #32]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	401a      	ands	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6a1a      	ldr	r2, [r3, #32]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e050      	b.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1b      	ldr	r2, [pc, #108]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d018      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d013      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4e:	d00e      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d009      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d004      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a12      	ldr	r2, [pc, #72]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d10c      	bne.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr
 8007da4:	40012c00 	.word	0x40012c00
 8007da8:	40013400 	.word	0x40013400
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00

08007db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e03d      	b.n	8007e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr

08007e5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr

08007e7e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e042      	b.n	8007f16 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d106      	bne.n	8007eaa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7fa ffaf 	bl	8002e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2224      	movs	r2, #36	; 0x24
 8007eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ec0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fc80 	bl	80087c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ed6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ee6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ef6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b0ba      	sub	sp, #232	; 0xe8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10f      	bne.n	8007f86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6a:	f003 0320 	and.w	r3, r3, #32
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <HAL_UART_IRQHandler+0x66>
 8007f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fb63 	bl	800864a <UART_Receive_IT>
      return;
 8007f84:	e25b      	b.n	800843e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80de 	beq.w	800814c <HAL_UART_IRQHandler+0x22c>
 8007f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d106      	bne.n	8007faa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 80d1 	beq.w	800814c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <HAL_UART_IRQHandler+0xae>
 8007fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f043 0201 	orr.w	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <HAL_UART_IRQHandler+0xd2>
 8007fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fea:	f043 0202 	orr.w	r2, r3, #2
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <HAL_UART_IRQHandler+0xf6>
 8007ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	f043 0204 	orr.w	r2, r3, #4
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d011      	beq.n	8008046 <HAL_UART_IRQHandler+0x126>
 8008022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d105      	bne.n	800803a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800802e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f043 0208 	orr.w	r2, r3, #8
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 81f2 	beq.w	8008434 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008054:	f003 0320 	and.w	r3, r3, #32
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <HAL_UART_IRQHandler+0x14e>
 800805c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 faee 	bl	800864a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf14      	ite	ne
 800807c:	2301      	movne	r3, #1
 800807e:	2300      	moveq	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <HAL_UART_IRQHandler+0x17a>
 8008092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008096:	2b00      	cmp	r3, #0
 8008098:	d04f      	beq.n	800813a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f9f8 	bl	8008490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d041      	beq.n	8008132 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3314      	adds	r3, #20
 80080d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1d9      	bne.n	80080ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d013      	beq.n	800812a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	4a7e      	ldr	r2, [pc, #504]	; (8008300 <HAL_UART_IRQHandler+0x3e0>)
 8008108:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	4618      	mov	r0, r3
 8008110:	f7fb fdb8 	bl	8003c84 <HAL_DMA_Abort_IT>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d016      	beq.n	8008148 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008128:	e00e      	b.n	8008148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f99c 	bl	8008468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008130:	e00a      	b.n	8008148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f998 	bl	8008468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008138:	e006      	b.n	8008148 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f994 	bl	8008468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008146:	e175      	b.n	8008434 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008148:	bf00      	nop
    return;
 800814a:	e173      	b.n	8008434 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	2b01      	cmp	r3, #1
 8008152:	f040 814f 	bne.w	80083f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	f003 0310 	and.w	r3, r3, #16
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8148 	beq.w	80083f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008168:	f003 0310 	and.w	r3, r3, #16
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8141 	beq.w	80083f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60bb      	str	r3, [r7, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80b6 	beq.w	8008304 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8145 	beq.w	8008438 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f080 813e 	bcs.w	8008438 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	f000 8088 	beq.w	80082e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	330c      	adds	r3, #12
 80081f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80081fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008208:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1d9      	bne.n	80081d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800822c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800822e:	f023 0301 	bic.w	r3, r3, #1
 8008232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008240:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008244:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008248:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e1      	bne.n	800821c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3314      	adds	r3, #20
 800825e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800826a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800826e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3314      	adds	r3, #20
 8008278:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800827c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800827e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008282:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800828a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e3      	bne.n	8008258 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	330c      	adds	r3, #12
 80082a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b0:	f023 0310 	bic.w	r3, r3, #16
 80082b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80082c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e3      	bne.n	800829e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fb fc96 	bl	8003c0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f8bf 	bl	800847a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082fc:	e09c      	b.n	8008438 <HAL_UART_IRQHandler+0x518>
 80082fe:	bf00      	nop
 8008300:	08008555 	.word	0x08008555
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800830c:	b29b      	uxth	r3, r3
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 808e 	beq.w	800843c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8089 	beq.w	800843c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	330c      	adds	r3, #12
 8008330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800833a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	330c      	adds	r3, #12
 800834a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800834e:	647a      	str	r2, [r7, #68]	; 0x44
 8008350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800835c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e3      	bne.n	800832a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3314      	adds	r3, #20
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	623b      	str	r3, [r7, #32]
   return(result);
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	f023 0301 	bic.w	r3, r3, #1
 8008378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3314      	adds	r3, #20
 8008382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008386:	633a      	str	r2, [r7, #48]	; 0x30
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800838c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e3      	bne.n	8008362 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	330c      	adds	r3, #12
 80083ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0310 	bic.w	r3, r3, #16
 80083be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083cc:	61fa      	str	r2, [r7, #28]
 80083ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	69b9      	ldr	r1, [r7, #24]
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	617b      	str	r3, [r7, #20]
   return(result);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e3      	bne.n	80083a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f844 	bl	800847a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083f2:	e023      	b.n	800843c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <HAL_UART_IRQHandler+0x4f4>
 8008400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f8b5 	bl	800857c <UART_Transmit_IT>
    return;
 8008412:	e014      	b.n	800843e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00e      	beq.n	800843e <HAL_UART_IRQHandler+0x51e>
 8008420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f8f4 	bl	800861a <UART_EndTransmit_IT>
    return;
 8008432:	e004      	b.n	800843e <HAL_UART_IRQHandler+0x51e>
    return;
 8008434:	bf00      	nop
 8008436:	e002      	b.n	800843e <HAL_UART_IRQHandler+0x51e>
      return;
 8008438:	bf00      	nop
 800843a:	e000      	b.n	800843e <HAL_UART_IRQHandler+0x51e>
      return;
 800843c:	bf00      	nop
  }
}
 800843e:	37e8      	adds	r7, #232	; 0xe8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr

08008456 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	bc80      	pop	{r7}
 8008478:	4770      	bx	lr

0800847a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b095      	sub	sp, #84	; 0x54
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b8:	643a      	str	r2, [r7, #64]	; 0x40
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3314      	adds	r3, #20
 80084d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	61fb      	str	r3, [r7, #28]
   return(result);
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f023 0301 	bic.w	r3, r3, #1
 80084e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e5      	bne.n	80084cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	2b01      	cmp	r3, #1
 8008506:	d119      	bne.n	800853c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	330c      	adds	r3, #12
 800850e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	60bb      	str	r3, [r7, #8]
   return(result);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0310 	bic.w	r3, r3, #16
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008528:	61ba      	str	r2, [r7, #24]
 800852a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6979      	ldr	r1, [r7, #20]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	613b      	str	r3, [r7, #16]
   return(result);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e5      	bne.n	8008508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
}
 800854a:	bf00      	nop
 800854c:	3754      	adds	r7, #84	; 0x54
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7ff ff7a 	bl	8008468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b21      	cmp	r3, #33	; 0x21
 800858e:	d13e      	bne.n	800860e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008598:	d114      	bne.n	80085c4 <UART_Transmit_IT+0x48>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d110      	bne.n	80085c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	1c9a      	adds	r2, r3, #2
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	621a      	str	r2, [r3, #32]
 80085c2:	e008      	b.n	80085d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	1c59      	adds	r1, r3, #1
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6211      	str	r1, [r2, #32]
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085da:	b29b      	uxth	r3, r3
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29b      	uxth	r3, r3
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	4619      	mov	r1, r3
 80085e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10f      	bne.n	800860a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008608:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	e000      	b.n	8008610 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800860e:	2302      	movs	r3, #2
  }
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008630:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff ff02 	bl	8008444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b08c      	sub	sp, #48	; 0x30
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b22      	cmp	r3, #34	; 0x22
 800865c:	f040 80ae 	bne.w	80087bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008668:	d117      	bne.n	800869a <UART_Receive_IT+0x50>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d113      	bne.n	800869a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	b29b      	uxth	r3, r3
 8008684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008688:	b29a      	uxth	r2, r3
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	1c9a      	adds	r2, r3, #2
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	629a      	str	r2, [r3, #40]	; 0x28
 8008698:	e026      	b.n	80086e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ac:	d007      	beq.n	80086be <UART_Receive_IT+0x74>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <UART_Receive_IT+0x82>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e008      	b.n	80086de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	4619      	mov	r1, r3
 80086f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d15d      	bne.n	80087b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f022 0220 	bic.w	r2, r2, #32
 800870a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800871a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0201 	bic.w	r2, r2, #1
 800872a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	2b01      	cmp	r3, #1
 8008740:	d135      	bne.n	80087ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	330c      	adds	r3, #12
 800874e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	613b      	str	r3, [r7, #16]
   return(result);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f023 0310 	bic.w	r3, r3, #16
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	330c      	adds	r3, #12
 8008766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008768:	623a      	str	r2, [r7, #32]
 800876a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	69f9      	ldr	r1, [r7, #28]
 800876e:	6a3a      	ldr	r2, [r7, #32]
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	61bb      	str	r3, [r7, #24]
   return(result);
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e5      	bne.n	8008748 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	2b10      	cmp	r3, #16
 8008788:	d10a      	bne.n	80087a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fe67 	bl	800847a <HAL_UARTEx_RxEventCallback>
 80087ac:	e002      	b.n	80087b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff fe51 	bl	8008456 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e002      	b.n	80087be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	e000      	b.n	80087be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80087bc:	2302      	movs	r3, #2
  }
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3730      	adds	r7, #48	; 0x30
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008802:	f023 030c 	bic.w	r3, r3, #12
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	68b9      	ldr	r1, [r7, #8]
 800880c:	430b      	orrs	r3, r1
 800880e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a2c      	ldr	r2, [pc, #176]	; (80088dc <UART_SetConfig+0x114>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d103      	bne.n	8008838 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008830:	f7fd fa62 	bl	8005cf8 <HAL_RCC_GetPCLK2Freq>
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	e002      	b.n	800883e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008838:	f7fd fa4a 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 800883c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009a      	lsls	r2, r3, #2
 8008848:	441a      	add	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	fbb2 f3f3 	udiv	r3, r2, r3
 8008854:	4a22      	ldr	r2, [pc, #136]	; (80088e0 <UART_SetConfig+0x118>)
 8008856:	fba2 2303 	umull	r2, r3, r2, r3
 800885a:	095b      	lsrs	r3, r3, #5
 800885c:	0119      	lsls	r1, r3, #4
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009a      	lsls	r2, r3, #2
 8008868:	441a      	add	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	fbb2 f2f3 	udiv	r2, r2, r3
 8008874:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <UART_SetConfig+0x118>)
 8008876:	fba3 0302 	umull	r0, r3, r3, r2
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	2064      	movs	r0, #100	; 0x64
 800887e:	fb00 f303 	mul.w	r3, r0, r3
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	3332      	adds	r3, #50	; 0x32
 8008888:	4a15      	ldr	r2, [pc, #84]	; (80088e0 <UART_SetConfig+0x118>)
 800888a:	fba2 2303 	umull	r2, r3, r2, r3
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008894:	4419      	add	r1, r3
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009a      	lsls	r2, r3, #2
 80088a0:	441a      	add	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80088ac:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <UART_SetConfig+0x118>)
 80088ae:	fba3 0302 	umull	r0, r3, r3, r2
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	2064      	movs	r0, #100	; 0x64
 80088b6:	fb00 f303 	mul.w	r3, r0, r3
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	3332      	adds	r3, #50	; 0x32
 80088c0:	4a07      	ldr	r2, [pc, #28]	; (80088e0 <UART_SetConfig+0x118>)
 80088c2:	fba2 2303 	umull	r2, r3, r2, r3
 80088c6:	095b      	lsrs	r3, r3, #5
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	440a      	add	r2, r1
 80088d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	40013800 	.word	0x40013800
 80088e0:	51eb851f 	.word	0x51eb851f

080088e4 <memset>:
 80088e4:	4603      	mov	r3, r0
 80088e6:	4402      	add	r2, r0
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d100      	bne.n	80088ee <memset+0xa>
 80088ec:	4770      	bx	lr
 80088ee:	f803 1b01 	strb.w	r1, [r3], #1
 80088f2:	e7f9      	b.n	80088e8 <memset+0x4>

080088f4 <__errno>:
 80088f4:	4b01      	ldr	r3, [pc, #4]	; (80088fc <__errno+0x8>)
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20000098 	.word	0x20000098

08008900 <__libc_init_array>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	2600      	movs	r6, #0
 8008904:	4d0c      	ldr	r5, [pc, #48]	; (8008938 <__libc_init_array+0x38>)
 8008906:	4c0d      	ldr	r4, [pc, #52]	; (800893c <__libc_init_array+0x3c>)
 8008908:	1b64      	subs	r4, r4, r5
 800890a:	10a4      	asrs	r4, r4, #2
 800890c:	42a6      	cmp	r6, r4
 800890e:	d109      	bne.n	8008924 <__libc_init_array+0x24>
 8008910:	f000 fb84 	bl	800901c <_init>
 8008914:	2600      	movs	r6, #0
 8008916:	4d0a      	ldr	r5, [pc, #40]	; (8008940 <__libc_init_array+0x40>)
 8008918:	4c0a      	ldr	r4, [pc, #40]	; (8008944 <__libc_init_array+0x44>)
 800891a:	1b64      	subs	r4, r4, r5
 800891c:	10a4      	asrs	r4, r4, #2
 800891e:	42a6      	cmp	r6, r4
 8008920:	d105      	bne.n	800892e <__libc_init_array+0x2e>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	f855 3b04 	ldr.w	r3, [r5], #4
 8008928:	4798      	blx	r3
 800892a:	3601      	adds	r6, #1
 800892c:	e7ee      	b.n	800890c <__libc_init_array+0xc>
 800892e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008932:	4798      	blx	r3
 8008934:	3601      	adds	r6, #1
 8008936:	e7f2      	b.n	800891e <__libc_init_array+0x1e>
 8008938:	08009160 	.word	0x08009160
 800893c:	08009160 	.word	0x08009160
 8008940:	08009160 	.word	0x08009160
 8008944:	08009164 	.word	0x08009164

08008948 <memcpy>:
 8008948:	440a      	add	r2, r1
 800894a:	4291      	cmp	r1, r2
 800894c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008950:	d100      	bne.n	8008954 <memcpy+0xc>
 8008952:	4770      	bx	lr
 8008954:	b510      	push	{r4, lr}
 8008956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800895a:	4291      	cmp	r1, r2
 800895c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008960:	d1f9      	bne.n	8008956 <memcpy+0xe>
 8008962:	bd10      	pop	{r4, pc}

08008964 <atan2>:
 8008964:	f000 b8fc 	b.w	8008b60 <__ieee754_atan2>

08008968 <sqrt>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	f000 f81f 	bl	80089b0 <__ieee754_sqrt>
 8008972:	4632      	mov	r2, r6
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
 8008978:	463b      	mov	r3, r7
 800897a:	4630      	mov	r0, r6
 800897c:	4639      	mov	r1, r7
 800897e:	f7f8 f8a9 	bl	8000ad4 <__aeabi_dcmpun>
 8008982:	b990      	cbnz	r0, 80089aa <sqrt+0x42>
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7f8 f87a 	bl	8000a84 <__aeabi_dcmplt>
 8008990:	b158      	cbz	r0, 80089aa <sqrt+0x42>
 8008992:	f7ff ffaf 	bl	80088f4 <__errno>
 8008996:	2321      	movs	r3, #33	; 0x21
 8008998:	2200      	movs	r2, #0
 800899a:	6003      	str	r3, [r0, #0]
 800899c:	2300      	movs	r3, #0
 800899e:	4610      	mov	r0, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	f7f7 ff27 	bl	80007f4 <__aeabi_ddiv>
 80089a6:	4604      	mov	r4, r0
 80089a8:	460d      	mov	r5, r1
 80089aa:	4620      	mov	r0, r4
 80089ac:	4629      	mov	r1, r5
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089b0 <__ieee754_sqrt>:
 80089b0:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8008b54 <__ieee754_sqrt+0x1a4>
 80089b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	ea3c 0c01 	bics.w	ip, ip, r1
 80089bc:	460b      	mov	r3, r1
 80089be:	4606      	mov	r6, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	460a      	mov	r2, r1
 80089c4:	4604      	mov	r4, r0
 80089c6:	d10e      	bne.n	80089e6 <__ieee754_sqrt+0x36>
 80089c8:	4602      	mov	r2, r0
 80089ca:	f7f7 fde9 	bl	80005a0 <__aeabi_dmul>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4630      	mov	r0, r6
 80089d4:	4629      	mov	r1, r5
 80089d6:	f7f7 fc2d 	bl	8000234 <__adddf3>
 80089da:	4606      	mov	r6, r0
 80089dc:	460d      	mov	r5, r1
 80089de:	4630      	mov	r0, r6
 80089e0:	4629      	mov	r1, r5
 80089e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e6:	2900      	cmp	r1, #0
 80089e8:	dc0d      	bgt.n	8008a06 <__ieee754_sqrt+0x56>
 80089ea:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80089ee:	ea5c 0c00 	orrs.w	ip, ip, r0
 80089f2:	d0f4      	beq.n	80089de <__ieee754_sqrt+0x2e>
 80089f4:	b139      	cbz	r1, 8008a06 <__ieee754_sqrt+0x56>
 80089f6:	4602      	mov	r2, r0
 80089f8:	f7f7 fc1a 	bl	8000230 <__aeabi_dsub>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	f7f7 fef8 	bl	80007f4 <__aeabi_ddiv>
 8008a04:	e7e9      	b.n	80089da <__ieee754_sqrt+0x2a>
 8008a06:	1512      	asrs	r2, r2, #20
 8008a08:	f000 8089 	beq.w	8008b1e <__ieee754_sqrt+0x16e>
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a1a:	07d2      	lsls	r2, r2, #31
 8008a1c:	bf5c      	itt	pl
 8008a1e:	005b      	lslpl	r3, r3, #1
 8008a20:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008a24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a28:	bf58      	it	pl
 8008a2a:	0064      	lslpl	r4, r4, #1
 8008a2c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008a30:	0062      	lsls	r2, r4, #1
 8008a32:	2016      	movs	r0, #22
 8008a34:	4629      	mov	r1, r5
 8008a36:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8008a3a:	1076      	asrs	r6, r6, #1
 8008a3c:	190f      	adds	r7, r1, r4
 8008a3e:	429f      	cmp	r7, r3
 8008a40:	bfde      	ittt	le
 8008a42:	1bdb      	suble	r3, r3, r7
 8008a44:	1939      	addle	r1, r7, r4
 8008a46:	192d      	addle	r5, r5, r4
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	3801      	subs	r0, #1
 8008a4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a50:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008a54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008a58:	d1f0      	bne.n	8008a3c <__ieee754_sqrt+0x8c>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	2720      	movs	r7, #32
 8008a5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008a62:	428b      	cmp	r3, r1
 8008a64:	eb0c 0e00 	add.w	lr, ip, r0
 8008a68:	dc02      	bgt.n	8008a70 <__ieee754_sqrt+0xc0>
 8008a6a:	d113      	bne.n	8008a94 <__ieee754_sqrt+0xe4>
 8008a6c:	4596      	cmp	lr, r2
 8008a6e:	d811      	bhi.n	8008a94 <__ieee754_sqrt+0xe4>
 8008a70:	f1be 0f00 	cmp.w	lr, #0
 8008a74:	eb0e 000c 	add.w	r0, lr, ip
 8008a78:	da56      	bge.n	8008b28 <__ieee754_sqrt+0x178>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	db54      	blt.n	8008b28 <__ieee754_sqrt+0x178>
 8008a7e:	f101 0801 	add.w	r8, r1, #1
 8008a82:	1a5b      	subs	r3, r3, r1
 8008a84:	4641      	mov	r1, r8
 8008a86:	4596      	cmp	lr, r2
 8008a88:	bf88      	it	hi
 8008a8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008a8e:	eba2 020e 	sub.w	r2, r2, lr
 8008a92:	4464      	add	r4, ip
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	3f01      	subs	r7, #1
 8008a98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008aa0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008aa4:	d1dd      	bne.n	8008a62 <__ieee754_sqrt+0xb2>
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d01b      	beq.n	8008ae2 <__ieee754_sqrt+0x132>
 8008aaa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008b58 <__ieee754_sqrt+0x1a8>
 8008aae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008b5c <__ieee754_sqrt+0x1ac>
 8008ab2:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ab6:	e9db 2300 	ldrd	r2, r3, [fp]
 8008aba:	f7f7 fbb9 	bl	8000230 <__aeabi_dsub>
 8008abe:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	4649      	mov	r1, r9
 8008aca:	f7f7 ffe5 	bl	8000a98 <__aeabi_dcmple>
 8008ace:	b140      	cbz	r0, 8008ae2 <__ieee754_sqrt+0x132>
 8008ad0:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ad4:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ad8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008adc:	d126      	bne.n	8008b2c <__ieee754_sqrt+0x17c>
 8008ade:	463c      	mov	r4, r7
 8008ae0:	3501      	adds	r5, #1
 8008ae2:	106b      	asrs	r3, r5, #1
 8008ae4:	0864      	lsrs	r4, r4, #1
 8008ae6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008aea:	07ea      	lsls	r2, r5, #31
 8008aec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008af0:	bf48      	it	mi
 8008af2:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8008af6:	4620      	mov	r0, r4
 8008af8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008afc:	e76d      	b.n	80089da <__ieee754_sqrt+0x2a>
 8008afe:	0ae3      	lsrs	r3, r4, #11
 8008b00:	3915      	subs	r1, #21
 8008b02:	0564      	lsls	r4, r4, #21
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0fa      	beq.n	8008afe <__ieee754_sqrt+0x14e>
 8008b08:	02d8      	lsls	r0, r3, #11
 8008b0a:	d50a      	bpl.n	8008b22 <__ieee754_sqrt+0x172>
 8008b0c:	f1c2 0020 	rsb	r0, r2, #32
 8008b10:	fa24 f000 	lsr.w	r0, r4, r0
 8008b14:	1e55      	subs	r5, r2, #1
 8008b16:	4094      	lsls	r4, r2
 8008b18:	4303      	orrs	r3, r0
 8008b1a:	1b4a      	subs	r2, r1, r5
 8008b1c:	e776      	b.n	8008a0c <__ieee754_sqrt+0x5c>
 8008b1e:	4611      	mov	r1, r2
 8008b20:	e7f0      	b.n	8008b04 <__ieee754_sqrt+0x154>
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	3201      	adds	r2, #1
 8008b26:	e7ef      	b.n	8008b08 <__ieee754_sqrt+0x158>
 8008b28:	4688      	mov	r8, r1
 8008b2a:	e7aa      	b.n	8008a82 <__ieee754_sqrt+0xd2>
 8008b2c:	f7f7 fb82 	bl	8000234 <__adddf3>
 8008b30:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f7f7 ffa2 	bl	8000a84 <__aeabi_dcmplt>
 8008b40:	b120      	cbz	r0, 8008b4c <__ieee754_sqrt+0x19c>
 8008b42:	1ca1      	adds	r1, r4, #2
 8008b44:	bf08      	it	eq
 8008b46:	3501      	addeq	r5, #1
 8008b48:	3402      	adds	r4, #2
 8008b4a:	e7ca      	b.n	8008ae2 <__ieee754_sqrt+0x132>
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	f024 0401 	bic.w	r4, r4, #1
 8008b52:	e7c6      	b.n	8008ae2 <__ieee754_sqrt+0x132>
 8008b54:	7ff00000 	.word	0x7ff00000
 8008b58:	200000a0 	.word	0x200000a0
 8008b5c:	200000a8 	.word	0x200000a8

08008b60 <__ieee754_atan2>:
 8008b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	4617      	mov	r7, r2
 8008b66:	4692      	mov	sl, r2
 8008b68:	4699      	mov	r9, r3
 8008b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b6e:	427b      	negs	r3, r7
 8008b70:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008cf0 <__ieee754_atan2+0x190>
 8008b74:	433b      	orrs	r3, r7
 8008b76:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008b7a:	4543      	cmp	r3, r8
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	d809      	bhi.n	8008b96 <__ieee754_atan2+0x36>
 8008b82:	4246      	negs	r6, r0
 8008b84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b88:	4306      	orrs	r6, r0
 8008b8a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008b8e:	4546      	cmp	r6, r8
 8008b90:	468e      	mov	lr, r1
 8008b92:	4683      	mov	fp, r0
 8008b94:	d908      	bls.n	8008ba8 <__ieee754_atan2+0x48>
 8008b96:	4652      	mov	r2, sl
 8008b98:	464b      	mov	r3, r9
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7f7 fb49 	bl	8000234 <__adddf3>
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	e019      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008ba8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8008bac:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008bb0:	433e      	orrs	r6, r7
 8008bb2:	d103      	bne.n	8008bbc <__ieee754_atan2+0x5c>
 8008bb4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	f000 b8a2 	b.w	8008d00 <atan>
 8008bbc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008bc0:	f006 0602 	and.w	r6, r6, #2
 8008bc4:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008bc8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008bcc:	d10a      	bne.n	8008be4 <__ieee754_atan2+0x84>
 8008bce:	2e02      	cmp	r6, #2
 8008bd0:	d067      	beq.n	8008ca2 <__ieee754_atan2+0x142>
 8008bd2:	2e03      	cmp	r6, #3
 8008bd4:	d102      	bne.n	8008bdc <__ieee754_atan2+0x7c>
 8008bd6:	a53a      	add	r5, pc, #232	; (adr r5, 8008cc0 <__ieee754_atan2+0x160>)
 8008bd8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	4317      	orrs	r7, r2
 8008be6:	d106      	bne.n	8008bf6 <__ieee754_atan2+0x96>
 8008be8:	f1be 0f00 	cmp.w	lr, #0
 8008bec:	da64      	bge.n	8008cb8 <__ieee754_atan2+0x158>
 8008bee:	a536      	add	r5, pc, #216	; (adr r5, 8008cc8 <__ieee754_atan2+0x168>)
 8008bf0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008bf4:	e7f2      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008bf6:	4542      	cmp	r2, r8
 8008bf8:	d10f      	bne.n	8008c1a <__ieee754_atan2+0xba>
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	f106 36ff 	add.w	r6, r6, #4294967295
 8008c00:	d107      	bne.n	8008c12 <__ieee754_atan2+0xb2>
 8008c02:	2e02      	cmp	r6, #2
 8008c04:	d851      	bhi.n	8008caa <__ieee754_atan2+0x14a>
 8008c06:	4b3b      	ldr	r3, [pc, #236]	; (8008cf4 <__ieee754_atan2+0x194>)
 8008c08:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008c10:	e7e4      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008c12:	2e02      	cmp	r6, #2
 8008c14:	d84d      	bhi.n	8008cb2 <__ieee754_atan2+0x152>
 8008c16:	4b38      	ldr	r3, [pc, #224]	; (8008cf8 <__ieee754_atan2+0x198>)
 8008c18:	e7f6      	b.n	8008c08 <__ieee754_atan2+0xa8>
 8008c1a:	4543      	cmp	r3, r8
 8008c1c:	d0e4      	beq.n	8008be8 <__ieee754_atan2+0x88>
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008c24:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c28:	da21      	bge.n	8008c6e <__ieee754_atan2+0x10e>
 8008c2a:	f1b9 0f00 	cmp.w	r9, #0
 8008c2e:	da01      	bge.n	8008c34 <__ieee754_atan2+0xd4>
 8008c30:	323c      	adds	r2, #60	; 0x3c
 8008c32:	db20      	blt.n	8008c76 <__ieee754_atan2+0x116>
 8008c34:	4652      	mov	r2, sl
 8008c36:	464b      	mov	r3, r9
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	f7f7 fdda 	bl	80007f4 <__aeabi_ddiv>
 8008c40:	f000 f9e8 	bl	8009014 <fabs>
 8008c44:	f000 f85c 	bl	8008d00 <atan>
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	2e01      	cmp	r6, #1
 8008c4e:	d015      	beq.n	8008c7c <__ieee754_atan2+0x11c>
 8008c50:	2e02      	cmp	r6, #2
 8008c52:	d017      	beq.n	8008c84 <__ieee754_atan2+0x124>
 8008c54:	2e00      	cmp	r6, #0
 8008c56:	d0c1      	beq.n	8008bdc <__ieee754_atan2+0x7c>
 8008c58:	a31d      	add	r3, pc, #116	; (adr r3, 8008cd0 <__ieee754_atan2+0x170>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fae5 	bl	8000230 <__aeabi_dsub>
 8008c66:	a31c      	add	r3, pc, #112	; (adr r3, 8008cd8 <__ieee754_atan2+0x178>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	e016      	b.n	8008c9c <__ieee754_atan2+0x13c>
 8008c6e:	a51c      	add	r5, pc, #112	; (adr r5, 8008ce0 <__ieee754_atan2+0x180>)
 8008c70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008c74:	e7ea      	b.n	8008c4c <__ieee754_atan2+0xec>
 8008c76:	2400      	movs	r4, #0
 8008c78:	2500      	movs	r5, #0
 8008c7a:	e7e7      	b.n	8008c4c <__ieee754_atan2+0xec>
 8008c7c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008c80:	461d      	mov	r5, r3
 8008c82:	e7ab      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008c84:	a312      	add	r3, pc, #72	; (adr r3, 8008cd0 <__ieee754_atan2+0x170>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	f7f7 facf 	bl	8000230 <__aeabi_dsub>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	a110      	add	r1, pc, #64	; (adr r1, 8008cd8 <__ieee754_atan2+0x178>)
 8008c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c9c:	f7f7 fac8 	bl	8000230 <__aeabi_dsub>
 8008ca0:	e77f      	b.n	8008ba2 <__ieee754_atan2+0x42>
 8008ca2:	a50d      	add	r5, pc, #52	; (adr r5, 8008cd8 <__ieee754_atan2+0x178>)
 8008ca4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ca8:	e798      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008caa:	a50f      	add	r5, pc, #60	; (adr r5, 8008ce8 <__ieee754_atan2+0x188>)
 8008cac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008cb0:	e794      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008cb2:	2400      	movs	r4, #0
 8008cb4:	2500      	movs	r5, #0
 8008cb6:	e791      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008cb8:	a509      	add	r5, pc, #36	; (adr r5, 8008ce0 <__ieee754_atan2+0x180>)
 8008cba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008cbe:	e78d      	b.n	8008bdc <__ieee754_atan2+0x7c>
 8008cc0:	54442d18 	.word	0x54442d18
 8008cc4:	c00921fb 	.word	0xc00921fb
 8008cc8:	54442d18 	.word	0x54442d18
 8008ccc:	bff921fb 	.word	0xbff921fb
 8008cd0:	33145c07 	.word	0x33145c07
 8008cd4:	3ca1a626 	.word	0x3ca1a626
 8008cd8:	54442d18 	.word	0x54442d18
 8008cdc:	400921fb 	.word	0x400921fb
 8008ce0:	54442d18 	.word	0x54442d18
 8008ce4:	3ff921fb 	.word	0x3ff921fb
 8008ce8:	54442d18 	.word	0x54442d18
 8008cec:	3fe921fb 	.word	0x3fe921fb
 8008cf0:	7ff00000 	.word	0x7ff00000
 8008cf4:	080090f0 	.word	0x080090f0
 8008cf8:	08009108 	.word	0x08009108
 8008cfc:	00000000 	.word	0x00000000

08008d00 <atan>:
 8008d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	4bb6      	ldr	r3, [pc, #728]	; (8008fe0 <atan+0x2e0>)
 8008d06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008d0a:	429e      	cmp	r6, r3
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	468b      	mov	fp, r1
 8008d12:	dd17      	ble.n	8008d44 <atan+0x44>
 8008d14:	4bb3      	ldr	r3, [pc, #716]	; (8008fe4 <atan+0x2e4>)
 8008d16:	429e      	cmp	r6, r3
 8008d18:	dc01      	bgt.n	8008d1e <atan+0x1e>
 8008d1a:	d109      	bne.n	8008d30 <atan+0x30>
 8008d1c:	b140      	cbz	r0, 8008d30 <atan+0x30>
 8008d1e:	4622      	mov	r2, r4
 8008d20:	462b      	mov	r3, r5
 8008d22:	4620      	mov	r0, r4
 8008d24:	4629      	mov	r1, r5
 8008d26:	f7f7 fa85 	bl	8000234 <__adddf3>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	e005      	b.n	8008d3c <atan+0x3c>
 8008d30:	f1bb 0f00 	cmp.w	fp, #0
 8008d34:	4cac      	ldr	r4, [pc, #688]	; (8008fe8 <atan+0x2e8>)
 8008d36:	f300 8121 	bgt.w	8008f7c <atan+0x27c>
 8008d3a:	4dac      	ldr	r5, [pc, #688]	; (8008fec <atan+0x2ec>)
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	4629      	mov	r1, r5
 8008d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d44:	4baa      	ldr	r3, [pc, #680]	; (8008ff0 <atan+0x2f0>)
 8008d46:	429e      	cmp	r6, r3
 8008d48:	dc11      	bgt.n	8008d6e <atan+0x6e>
 8008d4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008d4e:	429e      	cmp	r6, r3
 8008d50:	dc0a      	bgt.n	8008d68 <atan+0x68>
 8008d52:	a38b      	add	r3, pc, #556	; (adr r3, 8008f80 <atan+0x280>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	f7f7 fa6c 	bl	8000234 <__adddf3>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4ba5      	ldr	r3, [pc, #660]	; (8008ff4 <atan+0x2f4>)
 8008d60:	f7f7 feae 	bl	8000ac0 <__aeabi_dcmpgt>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d1e9      	bne.n	8008d3c <atan+0x3c>
 8008d68:	f04f 3aff 	mov.w	sl, #4294967295
 8008d6c:	e027      	b.n	8008dbe <atan+0xbe>
 8008d6e:	f000 f951 	bl	8009014 <fabs>
 8008d72:	4ba1      	ldr	r3, [pc, #644]	; (8008ff8 <atan+0x2f8>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	429e      	cmp	r6, r3
 8008d78:	460d      	mov	r5, r1
 8008d7a:	f300 80b8 	bgt.w	8008eee <atan+0x1ee>
 8008d7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008d82:	429e      	cmp	r6, r3
 8008d84:	f300 809c 	bgt.w	8008ec0 <atan+0x1c0>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	f7f7 fa52 	bl	8000234 <__adddf3>
 8008d90:	2200      	movs	r2, #0
 8008d92:	4b98      	ldr	r3, [pc, #608]	; (8008ff4 <atan+0x2f4>)
 8008d94:	f7f7 fa4c 	bl	8000230 <__aeabi_dsub>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460f      	mov	r7, r1
 8008d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7f7 fa45 	bl	8000234 <__adddf3>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 fd1f 	bl	80007f4 <__aeabi_ddiv>
 8008db6:	f04f 0a00 	mov.w	sl, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 fbeb 	bl	80005a0 <__aeabi_dmul>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4680      	mov	r8, r0
 8008dd0:	4689      	mov	r9, r1
 8008dd2:	f7f7 fbe5 	bl	80005a0 <__aeabi_dmul>
 8008dd6:	a36c      	add	r3, pc, #432	; (adr r3, 8008f88 <atan+0x288>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	4606      	mov	r6, r0
 8008dde:	460f      	mov	r7, r1
 8008de0:	f7f7 fbde 	bl	80005a0 <__aeabi_dmul>
 8008de4:	a36a      	add	r3, pc, #424	; (adr r3, 8008f90 <atan+0x290>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa23 	bl	8000234 <__adddf3>
 8008dee:	4632      	mov	r2, r6
 8008df0:	463b      	mov	r3, r7
 8008df2:	f7f7 fbd5 	bl	80005a0 <__aeabi_dmul>
 8008df6:	a368      	add	r3, pc, #416	; (adr r3, 8008f98 <atan+0x298>)
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f7f7 fa1a 	bl	8000234 <__adddf3>
 8008e00:	4632      	mov	r2, r6
 8008e02:	463b      	mov	r3, r7
 8008e04:	f7f7 fbcc 	bl	80005a0 <__aeabi_dmul>
 8008e08:	a365      	add	r3, pc, #404	; (adr r3, 8008fa0 <atan+0x2a0>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f7f7 fa11 	bl	8000234 <__adddf3>
 8008e12:	4632      	mov	r2, r6
 8008e14:	463b      	mov	r3, r7
 8008e16:	f7f7 fbc3 	bl	80005a0 <__aeabi_dmul>
 8008e1a:	a363      	add	r3, pc, #396	; (adr r3, 8008fa8 <atan+0x2a8>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 fa08 	bl	8000234 <__adddf3>
 8008e24:	4632      	mov	r2, r6
 8008e26:	463b      	mov	r3, r7
 8008e28:	f7f7 fbba 	bl	80005a0 <__aeabi_dmul>
 8008e2c:	a360      	add	r3, pc, #384	; (adr r3, 8008fb0 <atan+0x2b0>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 f9ff 	bl	8000234 <__adddf3>
 8008e36:	4642      	mov	r2, r8
 8008e38:	464b      	mov	r3, r9
 8008e3a:	f7f7 fbb1 	bl	80005a0 <__aeabi_dmul>
 8008e3e:	a35e      	add	r3, pc, #376	; (adr r3, 8008fb8 <atan+0x2b8>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	4680      	mov	r8, r0
 8008e46:	4689      	mov	r9, r1
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fba8 	bl	80005a0 <__aeabi_dmul>
 8008e50:	a35b      	add	r3, pc, #364	; (adr r3, 8008fc0 <atan+0x2c0>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 f9eb 	bl	8000230 <__aeabi_dsub>
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	463b      	mov	r3, r7
 8008e5e:	f7f7 fb9f 	bl	80005a0 <__aeabi_dmul>
 8008e62:	a359      	add	r3, pc, #356	; (adr r3, 8008fc8 <atan+0x2c8>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 f9e2 	bl	8000230 <__aeabi_dsub>
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	463b      	mov	r3, r7
 8008e70:	f7f7 fb96 	bl	80005a0 <__aeabi_dmul>
 8008e74:	a356      	add	r3, pc, #344	; (adr r3, 8008fd0 <atan+0x2d0>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 f9d9 	bl	8000230 <__aeabi_dsub>
 8008e7e:	4632      	mov	r2, r6
 8008e80:	463b      	mov	r3, r7
 8008e82:	f7f7 fb8d 	bl	80005a0 <__aeabi_dmul>
 8008e86:	a354      	add	r3, pc, #336	; (adr r3, 8008fd8 <atan+0x2d8>)
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	f7f7 f9d0 	bl	8000230 <__aeabi_dsub>
 8008e90:	4632      	mov	r2, r6
 8008e92:	463b      	mov	r3, r7
 8008e94:	f7f7 fb84 	bl	80005a0 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	f7f7 f9c8 	bl	8000234 <__adddf3>
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	f7f7 fb7a 	bl	80005a0 <__aeabi_dmul>
 8008eac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	d144      	bne.n	8008f40 <atan+0x240>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 f9b9 	bl	8000230 <__aeabi_dsub>
 8008ebe:	e734      	b.n	8008d2a <atan+0x2a>
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4b4c      	ldr	r3, [pc, #304]	; (8008ff4 <atan+0x2f4>)
 8008ec4:	f7f7 f9b4 	bl	8000230 <__aeabi_dsub>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460f      	mov	r7, r1
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4b48      	ldr	r3, [pc, #288]	; (8008ff4 <atan+0x2f4>)
 8008ed4:	f7f7 f9ae 	bl	8000234 <__adddf3>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4630      	mov	r0, r6
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f7f7 fc88 	bl	80007f4 <__aeabi_ddiv>
 8008ee4:	f04f 0a01 	mov.w	sl, #1
 8008ee8:	4604      	mov	r4, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	e767      	b.n	8008dbe <atan+0xbe>
 8008eee:	4b43      	ldr	r3, [pc, #268]	; (8008ffc <atan+0x2fc>)
 8008ef0:	429e      	cmp	r6, r3
 8008ef2:	da1a      	bge.n	8008f2a <atan+0x22a>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4b42      	ldr	r3, [pc, #264]	; (8009000 <atan+0x300>)
 8008ef8:	f7f7 f99a 	bl	8000230 <__aeabi_dsub>
 8008efc:	2200      	movs	r2, #0
 8008efe:	4606      	mov	r6, r0
 8008f00:	460f      	mov	r7, r1
 8008f02:	4620      	mov	r0, r4
 8008f04:	4629      	mov	r1, r5
 8008f06:	4b3e      	ldr	r3, [pc, #248]	; (8009000 <atan+0x300>)
 8008f08:	f7f7 fb4a 	bl	80005a0 <__aeabi_dmul>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4b39      	ldr	r3, [pc, #228]	; (8008ff4 <atan+0x2f4>)
 8008f10:	f7f7 f990 	bl	8000234 <__adddf3>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4630      	mov	r0, r6
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f7f7 fc6a 	bl	80007f4 <__aeabi_ddiv>
 8008f20:	f04f 0a02 	mov.w	sl, #2
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	e749      	b.n	8008dbe <atan+0xbe>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	2000      	movs	r0, #0
 8008f30:	4934      	ldr	r1, [pc, #208]	; (8009004 <atan+0x304>)
 8008f32:	f7f7 fc5f 	bl	80007f4 <__aeabi_ddiv>
 8008f36:	f04f 0a03 	mov.w	sl, #3
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	e73e      	b.n	8008dbe <atan+0xbe>
 8008f40:	4b31      	ldr	r3, [pc, #196]	; (8009008 <atan+0x308>)
 8008f42:	4e32      	ldr	r6, [pc, #200]	; (800900c <atan+0x30c>)
 8008f44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f970 	bl	8000230 <__aeabi_dsub>
 8008f50:	4622      	mov	r2, r4
 8008f52:	462b      	mov	r3, r5
 8008f54:	f7f7 f96c 	bl	8000230 <__aeabi_dsub>
 8008f58:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008f64:	f7f7 f964 	bl	8000230 <__aeabi_dsub>
 8008f68:	f1bb 0f00 	cmp.w	fp, #0
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	460d      	mov	r5, r1
 8008f70:	f6bf aee4 	bge.w	8008d3c <atan+0x3c>
 8008f74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f78:	461d      	mov	r5, r3
 8008f7a:	e6df      	b.n	8008d3c <atan+0x3c>
 8008f7c:	4d24      	ldr	r5, [pc, #144]	; (8009010 <atan+0x310>)
 8008f7e:	e6dd      	b.n	8008d3c <atan+0x3c>
 8008f80:	8800759c 	.word	0x8800759c
 8008f84:	7e37e43c 	.word	0x7e37e43c
 8008f88:	e322da11 	.word	0xe322da11
 8008f8c:	3f90ad3a 	.word	0x3f90ad3a
 8008f90:	24760deb 	.word	0x24760deb
 8008f94:	3fa97b4b 	.word	0x3fa97b4b
 8008f98:	a0d03d51 	.word	0xa0d03d51
 8008f9c:	3fb10d66 	.word	0x3fb10d66
 8008fa0:	c54c206e 	.word	0xc54c206e
 8008fa4:	3fb745cd 	.word	0x3fb745cd
 8008fa8:	920083ff 	.word	0x920083ff
 8008fac:	3fc24924 	.word	0x3fc24924
 8008fb0:	5555550d 	.word	0x5555550d
 8008fb4:	3fd55555 	.word	0x3fd55555
 8008fb8:	2c6a6c2f 	.word	0x2c6a6c2f
 8008fbc:	bfa2b444 	.word	0xbfa2b444
 8008fc0:	52defd9a 	.word	0x52defd9a
 8008fc4:	3fadde2d 	.word	0x3fadde2d
 8008fc8:	af749a6d 	.word	0xaf749a6d
 8008fcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008fd0:	fe231671 	.word	0xfe231671
 8008fd4:	3fbc71c6 	.word	0x3fbc71c6
 8008fd8:	9998ebc4 	.word	0x9998ebc4
 8008fdc:	3fc99999 	.word	0x3fc99999
 8008fe0:	440fffff 	.word	0x440fffff
 8008fe4:	7ff00000 	.word	0x7ff00000
 8008fe8:	54442d18 	.word	0x54442d18
 8008fec:	bff921fb 	.word	0xbff921fb
 8008ff0:	3fdbffff 	.word	0x3fdbffff
 8008ff4:	3ff00000 	.word	0x3ff00000
 8008ff8:	3ff2ffff 	.word	0x3ff2ffff
 8008ffc:	40038000 	.word	0x40038000
 8009000:	3ff80000 	.word	0x3ff80000
 8009004:	bff00000 	.word	0xbff00000
 8009008:	08009140 	.word	0x08009140
 800900c:	08009120 	.word	0x08009120
 8009010:	3ff921fb 	.word	0x3ff921fb

08009014 <fabs>:
 8009014:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009018:	4619      	mov	r1, r3
 800901a:	4770      	bx	lr

0800901c <_init>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr

08009028 <_fini>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr
